<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="chksum_8c" kind="file" language="C++">
    <compoundname>chksum.c</compoundname>
    <includes refid="general_8h" local="yes">general.h</includes>
    <includes refid="chksum_8h" local="yes">chksum.h</includes>
    <includes local="yes">mcu_cfg.h</includes>
    <includes refid="version_8h" local="yes">version.h</includes>
    <incdepgraph>
      <node id="649">
        <label>general.h</label>
        <link refid="general_8h"/>
        <childnode refid="650" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
      </node>
      <node id="650">
        <label>stdint.h</label>
      </node>
      <node id="648">
        <label>chksum.c</label>
        <link refid="chksum_8c"/>
        <childnode refid="649" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="654" relation="include">
        </childnode>
        <childnode refid="653" relation="include">
        </childnode>
      </node>
      <node id="652">
        <label>chksum.h</label>
        <link refid="chksum_8h"/>
        <childnode refid="653" relation="include">
        </childnode>
      </node>
      <node id="654">
        <label>mcu_cfg.h</label>
      </node>
      <node id="651">
        <label>std_types.h</label>
        <link refid="std__types_8h"/>
      </node>
      <node id="653">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="650" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="chksum_8c_1a1e8acf1fdd8f889dde0261dc0cbb9ecb" prot="public" static="no" mutable="no">
        <type><ref refid="structCHK__STATUS__s" kindref="compound">CHK_STATUS_s</ref></type>
        <definition>CHK_STATUS_s chk_status</definition>
        <argsstring></argsstring>
        <name>chk_status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c" line="62" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="chksum_8c_1a7c7c77e0a077b9bb9cf05672007c195f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t CHK_modulo32addition</definition>
        <argsstring>(uint8_t *data, uint32_t len)</argsstring>
        <name>CHK_modulo32addition</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CHK_modulo32addition provides modulo32bitaddition algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>This function provides some basic checksum functionality using module32bitaddition algorithm. It has no hardware dependencies.</para><para><simplesect kind="return"><para>(type: uint32_t) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c" line="65" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c" bodystart="100" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="chksum_8c_1aba5196e1171f5a56adef0a2aeec49a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>STD_RETURN_TYPE_e CHK_Flashchecksum</definition>
        <argsstring>(const VER_ValidStruct_s *valid_struct)</argsstring>
        <name>CHK_Flashchecksum</name>
        <param>
          <type>const <ref refid="structVER__ValidStruct__s" kindref="compound">VER_ValidStruct_s</ref> *</type>
          <declname>valid_struct</declname>
        </param>
        <briefdescription>
<para>CHK_Flashchecksum provides validation for the currently used firmware. </para>        </briefdescription>
        <detaileddescription>
<para>This function gets called during startup and validates the currently used firmware by doing a checksum over pre-defined memory areas and compares result with a pre-calculated checksum stored in the flashheader</para><para><simplesect kind="return"><para>(type: uint8_t) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c" line="78" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c" bodystart="78" bodyend="89"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="structVER__ValidStruct__s_1a25bb7b984176c10061b7db889316e345" compoundref="version_8h" startline="130">VER_ValidStruct_s::endaddress</references>
        <references refid="structVER__ValidStruct__s_1a99fb803c9393430d6df81a0254513820" compoundref="version_8h" startline="129">VER_ValidStruct_s::startaddress</references>
        <references refid="chksum_8c_1a45d3a9fdb49e56d5762df7bc259eb9e1" compoundref="chksum_8c" startline="115" endline="129">CHK_crc32</references>
        <references refid="structVER__ValidStruct__s_1a4668df862c4f9a40eb4c707bbf67cf01" compoundref="version_8h" startline="118">VER_ValidStruct_s::Checksum_u32</references>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
      </memberdef>
      <memberdef kind="function" id="chksum_8c_1a45d3a9fdb49e56d5762df7bc259eb9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t CHK_crc32</definition>
        <argsstring>(uint8_t *data, uint32_t len)</argsstring>
        <name>CHK_crc32</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>CHK_crc32 provides crc32 algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>This function provides crc32 checksum functionality with hardware support. It has been modified to match the common implementations used in zlib/WinZip/... RCC_CRC_CLK needs to be enabled.</para><para><simplesect kind="return"><para>(type: uint32_t) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c" line="115" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c" bodystart="115" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Driver for the checksum calculation. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para><copy/> 2010 - 2017, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. All rights reserved.</para></simplesect>
BSD 3-Clause License Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para></listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para></listitem><listitem><para>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para></listitem></orderedlist>
</para><para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para><para>We kindly request you to use one or more of the following phrases to refer to foxBMS in your hardware, software, documentation or advertising materials:</para><para><Prime/>This product uses parts of foxBMS<registered/><Prime/></para><para><Prime/>This product includes parts of foxBMS<registered/><Prime/></para><para><Prime/>This product is derived from foxBMS<registered/><Prime/></para><para><simplesect kind="author"><para>foxBMS Team </para></simplesect>
<simplesect kind="date"><para>28.08.2015 (date of creation)</para></simplesect>
<simplesect kind="par"><title>Module-prefix</title><para>CHK</para></simplesect>
This module provides some checksum functionality using either modulo32bitaddition as fast and easy algorithm or hardware supported crc32. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="42"><highlight class="comment">/*==================<sp/>Includes<sp/>=============================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>recommended<sp/>include<sp/>order<sp/>of<sp/>header<sp/>files:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>1.<sp/><sp/><sp/><sp/>include<sp/>general.h</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>2.<sp/><sp/><sp/><sp/>include<sp/>module&apos;s<sp/>own<sp/>header</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>3...<sp/><sp/>other<sp/>headers</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="general_8h" kindref="compound">general.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="chksum_8h" kindref="compound">chksum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mcu_cfg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="version_8h" kindref="compound">version.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Macros<sp/>and<sp/>Definitions<sp/>===============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Constant<sp/>and<sp/>Variable<sp/>Definitions<sp/>====================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="chksum_8h_1a1e8acf1fdd8f889dde0261dc0cbb9ecb" refkind="member"><highlight class="normal"><ref refid="structCHK__STATUS__s" kindref="compound">CHK_STATUS_s</ref><sp/><ref refid="chksum_8c_1a1e8acf1fdd8f889dde0261dc0cbb9ecb" kindref="member">chk_status</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Prototypes<sp/>==================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">uint32_t<sp/><ref refid="chksum_8c_1a7c7c77e0a077b9bb9cf05672007c195f" kindref="member">CHK_modulo32addition</ref>(uint8_t*<sp/>data,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Implementations<sp/>=============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="chksum_8h_1aba5196e1171f5a56adef0a2aeec49a77" refkind="member"><highlight class="normal"><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="chksum_8c_1aba5196e1171f5a56adef0a2aeec49a77" kindref="member">CHK_Flashchecksum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structVER__ValidStruct__s" kindref="compound">VER_ValidStruct_s</ref><sp/>*valid_struct)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal=<ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>length<sp/>=<sp/>valid_struct-&gt;<ref refid="structVER__ValidStruct__s_1a25bb7b984176c10061b7db889316e345" kindref="member">endaddress</ref><sp/>-<sp/>valid_struct-&gt;<ref refid="structVER__ValidStruct__s_1a99fb803c9393430d6df81a0254513820" kindref="member">startaddress</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>start<sp/>=<sp/>valid_struct-&gt;<ref refid="structVER__ValidStruct__s_1a99fb803c9393430d6df81a0254513820" kindref="member">startaddress</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cs<sp/>=<sp/><ref refid="chksum_8c_1a45d3a9fdb49e56d5762df7bc259eb9e1" kindref="member">CHK_crc32</ref>((uint8_t*)start,<sp/>length);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs<sp/>==<sp/>valid_struct-&gt;<ref refid="structVER__ValidStruct__s_1a4668df862c4f9a40eb4c707bbf67cf01" kindref="member">Checksum_u32</ref>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal=<ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal=<ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="chksum_8c_1a7c7c77e0a077b9bb9cf05672007c195f" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="chksum_8c_1a7c7c77e0a077b9bb9cf05672007c195f" kindref="member">CHK_modulo32addition</ref>(uint8_t*<sp/>data,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*pBuffer<sp/>=<sp/>(uint32_t*)<sp/>data;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>BufferLength<sp/>=<sp/>len<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>chksum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(BufferLength<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chksum<sp/>+=<sp/>*pBuffer;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pBuffer++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferLength--;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chksum;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="chksum_8h_1a45d3a9fdb49e56d5762df7bc259eb9e1" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="chksum_8c_1a45d3a9fdb49e56d5762df7bc259eb9e1" kindref="member">CHK_crc32</ref>(uint8_t*<sp/>data,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/>pBuffer<sp/>=<sp/>(uint32_t*)<sp/>data;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>BufferLength<sp/>=<sp/>len/4;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_RCC_CRC_CLK_ENABLE();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>CRC-&gt;CR<sp/>=<sp/>CRC_CR_RESET;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>BufferLength;<sp/>index++)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRC-&gt;DR<sp/>=<sp/>__RBIT(pBuffer[index]);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__RBIT(CRC-&gt;DR)<sp/>^<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/chksum/chksum.c"/>
  </compounddef>
</doxygen>
