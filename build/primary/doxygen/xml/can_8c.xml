<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="can_8c" kind="file" language="C++">
    <compoundname>can.c</compoundname>
    <includes refid="general_8h" local="yes">general.h</includes>
    <includes refid="can_8h" local="yes">can.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <includes refid="mcu_8h" local="yes">mcu.h</includes>
    <includes refid="diag_8h" local="yes">diag.h</includes>
    <includes refid="io_8h" local="yes">io.h</includes>
    <incdepgraph>
      <node id="442">
        <label>general.h</label>
        <link refid="general_8h"/>
        <childnode refid="443" relation="include">
        </childnode>
        <childnode refid="444" relation="include">
        </childnode>
      </node>
      <node id="457">
        <label>rtc.h</label>
        <link refid="rtc_8h"/>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
      </node>
      <node id="443">
        <label>stdint.h</label>
      </node>
      <node id="453">
        <label>diag.h</label>
        <link refid="diag_8h"/>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
      </node>
      <node id="462">
        <label>mcu.h</label>
        <link refid="mcu_8h"/>
        <childnode refid="442" relation="include">
        </childnode>
      </node>
      <node id="465">
        <label>io_package_cfg.h</label>
        <link refid="io__package__cfg_8h"/>
      </node>
      <node id="461">
        <label>cmsis_os.h</label>
      </node>
      <node id="454">
        <label>diag_cfg.h</label>
        <link refid="diag__cfg_8h"/>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
      </node>
      <node id="464">
        <label>io_cfg.h</label>
        <link refid="io__cfg_8h"/>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="465" relation="include">
        </childnode>
        <childnode refid="466" relation="include">
        </childnode>
      </node>
      <node id="452">
        <label>sox_cfg.h</label>
        <link refid="sox__cfg_8h"/>
      </node>
      <node id="451">
        <label>sox.h</label>
        <link refid="sox_8h"/>
        <childnode refid="452" relation="include">
        </childnode>
      </node>
      <node id="466">
        <label>io_mcu_cfg.h</label>
        <link refid="io__mcu__cfg_8h"/>
      </node>
      <node id="450">
        <label>bkpsram_cfg.h</label>
        <link refid="bkpsram__cfg_8h"/>
        <childnode refid="451" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
      </node>
      <node id="459">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="457" relation="include">
        </childnode>
      </node>
      <node id="447">
        <label>mcu_cfg.h</label>
      </node>
      <node id="444">
        <label>std_types.h</label>
        <link refid="std__types_8h"/>
      </node>
      <node id="458">
        <label>rtc_cfg.h</label>
        <link refid="rtc__cfg_8h"/>
        <childnode refid="447" relation="include">
        </childnode>
      </node>
      <node id="448">
        <label>eepr.h</label>
        <link refid="eepr_8h"/>
        <childnode refid="449" relation="include">
        </childnode>
      </node>
      <node id="441">
        <label>can.c</label>
        <link refid="can_8c"/>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="445" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="463" relation="include">
        </childnode>
      </node>
      <node id="445">
        <label>can.h</label>
        <link refid="can_8h"/>
        <childnode refid="446" relation="include">
        </childnode>
      </node>
      <node id="446">
        <label>can_cfg.h</label>
        <link refid="can__cfg_8h"/>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
      </node>
      <node id="463">
        <label>io.h</label>
        <link refid="io_8h"/>
        <childnode refid="464" relation="include">
        </childnode>
      </node>
      <node id="456">
        <label>diag_id_cfg.h</label>
        <link refid="diag__id__cfg_8h"/>
      </node>
      <node id="460">
        <label>os.h</label>
        <link refid="os_8h"/>
        <childnode refid="461" relation="include">
        </childnode>
      </node>
      <node id="449">
        <label>eepr_cfg.h</label>
        <link refid="eepr__cfg_8h"/>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
      </node>
      <node id="455">
        <label>batterysystem_cfg.h</label>
        <link refid="batterysystem__cfg_8h"/>
        <childnode refid="442" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="can_8c_1a7e3d6e850c79d86d2edc5e80f3b35961" prot="public" static="no">
        <name>ID_16BIT_FIFO0</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="53" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_8c_1a65e8bf3c09172364d402f30ddb57ff78" prot="public" static="no">
        <name>ID_16BIT_FIFO1</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="54" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" prot="public" static="no">
        <name>ID_32BIT_FIFO0</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="55" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_8c_1ab0bee15a564ce968d2c8224d84985a77" prot="public" static="no">
        <name>ID_32BIT_FIFO1</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="56" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" prot="public" static="no">
        <name>MSK_16BIT_FIFO0</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="57" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" prot="public" static="no">
        <name>MSK_16BIT_FIFO1</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="58" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" prot="public" static="no">
        <name>MSK_32BIT</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="59" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t canNode0_listenonly_mode</definition>
        <argsstring></argsstring>
        <name>canNode0_listenonly_mode</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>CAN listen only transceiver mode of CAN node 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="62" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t canNode1_listenonly_mode</definition>
        <argsstring></argsstring>
        <name>canNode1_listenonly_mode</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>CAN listen only transceiver mode of CAN node 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="63" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="can_8c_1ac997e9b383c699d06caa088a64dbac90" prot="public" static="no" mutable="no">
        <type>CAN_FilterConfTypeDef</type>
        <definition>CAN_FilterConfTypeDef sFilterConfig</definition>
        <argsstring></argsstring>
        <name>sFilterConfig</name>
        <initializer>= {
        
        .FilterActivation = ENABLE,     
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="133" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="can_8c_1a7f2ae9e76f9ca5289785ccd00fd58ef7" prot="public" static="no" mutable="no">
        <type>CanRxMsgTypeDef</type>
        <definition>CanRxMsgTypeDef sReceiveStruct0</definition>
        <argsstring></argsstring>
        <name>sReceiveStruct0</name>
        <initializer>= {
        
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="138" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="can_8c_1ad612db183864cd2dc50857d7158184e2" prot="public" static="no" mutable="no">
        <type>CanRxMsgTypeDef</type>
        <definition>CanRxMsgTypeDef sReceiveStruct1</definition>
        <argsstring></argsstring>
        <name>sReceiveStruct1</name>
        <initializer>= {
        
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="142" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="can_8c_1a8975fdc25f90009f3de12e5446010eec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t CAN_GetNextID</definition>
        <argsstring>(CAN_MSG_RX_TYPE_s *can_RxMsgs, uint8_t numberOfRxIDs, uint8_t startIndex, uint8_t filterCase)</argsstring>
        <name>CAN_GetNextID</name>
        <param>
          <type><ref refid="can__cfg_8h_1a378285fe3feca9cf1acb2198c066d0ef" kindref="member">CAN_MSG_RX_TYPE_s</ref> *</type>
          <declname>can_RxMsgs</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numberOfRxIDs</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>filterCase</declname>
        </param>
        <briefdescription>
<para>Returns the next index of wished filter ID setting in CAN_MSG_RX_TYPE_t can_RxMsgs[CAN_NUMBER_OF_RX_IDs]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can_RxMsgs</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to receive message struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfRxIDs</parametername>
</parameternamelist>
<parameterdescription>
<para>count of that type of receive message in can_RxMsgs struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>startIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>index where to start searching </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filterCase</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the object what will be found</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="148" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="537" bodyend="568"/>
        <references refid="can_8c_1a7e3d6e850c79d86d2edc5e80f3b35961" compoundref="can_8c" startline="53">ID_16BIT_FIFO0</references>
        <references refid="can_8c_1a65e8bf3c09172364d402f30ddb57ff78" compoundref="can_8c" startline="54">ID_16BIT_FIFO1</references>
        <references refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" compoundref="can_8c" startline="55">ID_32BIT_FIFO0</references>
        <references refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" compoundref="can_8c" startline="56">ID_32BIT_FIFO1</references>
        <references refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" compoundref="can_8c" startline="57">MSK_16BIT_FIFO0</references>
        <references refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" compoundref="can_8c" startline="58">MSK_16BIT_FIFO1</references>
        <references refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" compoundref="can_8c" startline="59">MSK_32BIT</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a68dc0bb72e3070c318b5c7b0ca98892a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t CAN_NumberOfNeededFilters</definition>
        <argsstring>(CAN_MSG_RX_TYPE_s *can_RxMsgs, uint8_t *numberOfDifferentIDs)</argsstring>
        <name>CAN_NumberOfNeededFilters</name>
        <param>
          <type><ref refid="can__cfg_8h_1a378285fe3feca9cf1acb2198c066d0ef" kindref="member">CAN_MSG_RX_TYPE_s</ref> *</type>
          <declname>can_RxMsgs</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>numberOfDifferentIDs</declname>
        </param>
        <briefdescription>
<para>Returns the number of filters that have to be initialized. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>can_RxMsgs</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to receive message struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numberOfDifferentIDs</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to array, where to store the specific number of different IDs</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>of needed filters </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="150" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="425" bodyend="525"/>
        <references refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" compoundref="can__cfg_8c" startline="379">can0_RxMsgs</references>
        <references refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" compoundref="can__cfg_8c" startline="414">can_CAN0_rx_length</references>
        <references refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" compoundref="can__cfg_8c" startline="409">can1_RxMsgs</references>
        <references refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" compoundref="can__cfg_8c" startline="415">can_CAN1_rx_length</references>
        <references refid="group__CONFIG__CAN_1ga20834704e9a69d64d0b67b32ab068b0b" compoundref="can__cfg_8h" startline="205">CAN0_BUFFER_BYPASS_NUMBER_OF_IDs</references>
        <references refid="can__cfg_8c_1a94a1d1e04ae4e0a90e6ec1be61d99c63" compoundref="can__cfg_8c" startline="422">can0_bufferBypass_RxMsgs</references>
        <references refid="group__CONFIG__CAN_1gaa756c8f6c2d26fd59c6e5160cb42e50a" compoundref="can__cfg_8h" startline="217">CAN1_BUFFER_BYPASS_NUMBER_OF_IDs</references>
        <references refid="can__cfg_8c_1a28ff322ba9188546f81eaedc80f909ea" compoundref="can__cfg_8c" startline="426">can1_bufferBypass_RxMsgs</references>
        <references refid="can_8c_1a7e3d6e850c79d86d2edc5e80f3b35961" compoundref="can_8c" startline="53">ID_16BIT_FIFO0</references>
        <references refid="can_8c_1a65e8bf3c09172364d402f30ddb57ff78" compoundref="can_8c" startline="54">ID_16BIT_FIFO1</references>
        <references refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" compoundref="diag_8c" startline="450" endline="484">DIAG_Handler</references>
        <references refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" compoundref="diag__cfg_8h" startline="98">DIAG_CH_CAN_INIT_FAILURE</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" compoundref="diag__id__cfg_8h" startline="44">DIAG_EVENT_NOK</references>
        <references refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" compoundref="can_8c" startline="55">ID_32BIT_FIFO0</references>
        <references refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" compoundref="can_8c" startline="56">ID_32BIT_FIFO1</references>
        <references refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" compoundref="can_8c" startline="57">MSK_16BIT_FIFO0</references>
        <references refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" compoundref="can_8c" startline="58">MSK_16BIT_FIFO1</references>
        <references refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" compoundref="can_8c" startline="59">MSK_32BIT</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a9d2ac075410a424726befa42b8c9d819" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CAN_InitFilter</definition>
        <argsstring>(CAN_HandleTypeDef *ptrHcan, CAN_MSG_RX_TYPE_s *can_RxMsgs, uint8_t numberOfRxMsgs)</argsstring>
        <name>CAN_InitFilter</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>ptrHcan</declname>
        </param>
        <param>
          <type><ref refid="can__cfg_8h_1a378285fe3feca9cf1acb2198c066d0ef" kindref="member">CAN_MSG_RX_TYPE_s</ref> *</type>
          <declname>can_RxMsgs</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>numberOfRxMsgs</declname>
        </param>
        <briefdescription>
<para>Initializes message filtering. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="151" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="232" bodyend="415"/>
        <references refid="can_8c_1a68dc0bb72e3070c318b5c7b0ca98892a" compoundref="can_8c" startline="425" endline="525">CAN_NumberOfNeededFilters</references>
        <references refid="group__CONFIG__CAN_1gaab847c98da84e4cfbb6a87559c13f35d" compoundref="can__cfg_8h" startline="348">CAN_NUMBER_OF_FILTERBANKS</references>
        <references refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" compoundref="can_8c" startline="133">sFilterConfig</references>
        <references refid="can_8c_1a8975fdc25f90009f3de12e5446010eec" compoundref="can_8c" startline="537" endline="568">CAN_GetNextID</references>
        <references refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" compoundref="can__cfg_8h" startline="351">CAN_MSG_RX_TYPE::ID</references>
        <references refid="can_8c_1a7e3d6e850c79d86d2edc5e80f3b35961" compoundref="can_8c" startline="53">ID_16BIT_FIFO0</references>
        <references refid="can_8c_1a65e8bf3c09172364d402f30ddb57ff78" compoundref="can_8c" startline="54">ID_16BIT_FIFO1</references>
        <references refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" compoundref="can_8c" startline="55">ID_32BIT_FIFO0</references>
        <references refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" compoundref="can_8c" startline="56">ID_32BIT_FIFO1</references>
        <references refid="structCAN__MSG__RX__TYPE_1ac5de244f09fc4a22cf7388ceb63c193e" compoundref="can__cfg_8h" startline="354">CAN_MSG_RX_TYPE::RTR</references>
        <references refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" compoundref="can_8c" startline="57">MSK_16BIT_FIFO0</references>
        <references refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" compoundref="can_8c" startline="58">MSK_16BIT_FIFO1</references>
        <references refid="structCAN__MSG__RX__TYPE_1a29de944e5bb4dcb752fe57f81c98cdc1" compoundref="can__cfg_8h" startline="352">CAN_MSG_RX_TYPE::mask</references>
        <references refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" compoundref="can_8c" startline="59">MSK_32BIT</references>
        <references refid="structCAN__MSG__RX__TYPE_1a71f515413521c3b71c0ddbb5ac3b243b" compoundref="can__cfg_8h" startline="355">CAN_MSG_RX_TYPE::fifo</references>
        <references refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" compoundref="diag_8c" startline="450" endline="484">DIAG_Handler</references>
        <references refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" compoundref="diag__cfg_8h" startline="98">DIAG_CH_CAN_INIT_FAILURE</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" compoundref="diag__id__cfg_8h" startline="44">DIAG_EVENT_NOK</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a7527dda2064eca2a8785fd7f8be134d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CAN_Disable_Transmit_IT</definition>
        <argsstring>(CAN_HandleTypeDef *ptrHcan)</argsstring>
        <name>CAN_Disable_Transmit_IT</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>ptrHcan</declname>
        </param>
        <briefdescription>
<para>Disables transmit mailbox empty interrupt and calls callback functions for transmitting messages from buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>E_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>if transmission successful, otherwise E_NOT_OK </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="154" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="732" bodyend="757"/>
        <references refid="can_8c_1a8f33c36f63d1d1f1eef92f5fc3e44d20" compoundref="can_8c" startline="766" endline="798">CAN_TxCpltCallback</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a8f33c36f63d1d1f1eef92f5fc3e44d20" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CAN_TxCpltCallback</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode)</argsstring>
        <name>CAN_TxCpltCallback</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <briefdescription>
<para>Transmission complete callback in non blocking mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode that transmitted a message</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para>(void) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="155" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="766" bodyend="798"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" compoundref="can_8h" startline="105">CAN_TX_BUFFER::ptrWrite</references>
        <references refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" compoundref="can_8h" startline="104">CAN_TX_BUFFER::ptrRead</references>
        <references refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" compoundref="can_8h" startline="107">CAN_TX_BUFFER::buffer</references>
        <references refid="structCAN__TX__BUFFERELEMENT_1af12470bc6b1485391eed1ca2cdf19539" compoundref="can_8h" startline="100">CAN_TX_BUFFERELEMENT::newMsg</references>
        <references refid="can_8c_1a1aef8b8c5b4c2a4e50033d65630a473e" compoundref="can_8c" startline="936" endline="985">CAN_TxMsgBuffer</references>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1aa4dbf86d1f59d72beeb24bffd2269b75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CAN_ErrorCallback</definition>
        <argsstring>(CAN_HandleTypeDef *ptrHcan)</argsstring>
        <name>CAN_ErrorCallback</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>ptrHhcan</declname>
          <defname>ptrHcan</defname>
        </param>
        <briefdescription>
<para>Error occured callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrHcan</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="156" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="806" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a5e6080405cd793da60708daac0f18dd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>static STD_RETURN_TYPE_e CAN_RxMsg</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, CAN_HandleTypeDef *ptrHcan, uint8_t FIFONumber)</argsstring>
        <name>CAN_RxMsg</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>ptrHcan</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>FIFONumber</declname>
        </param>
        <briefdescription>
<para>Receives CAN messages and stores them either in RxBuffer or in hcan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode which received the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptrHcan</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a CAN_HandleTypeDef structure that contains the message information of the specified CAN. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FIFONumber</parametername>
</parameternamelist>
<parameterdescription>
<para>FIFO in which the message has been received </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para>(void) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="157" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="1000" bodyend="1187"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" compoundref="can__cfg_8c" startline="409">can1_RxMsgs</references>
        <references refid="can__cfg_8c_1a28ff322ba9188546f81eaedc80f909ea" compoundref="can__cfg_8c" startline="426">can1_bufferBypass_RxMsgs</references>
        <references refid="group__CONFIG__CAN_1gaa756c8f6c2d26fd59c6e5160cb42e50a" compoundref="can__cfg_8h" startline="217">CAN1_BUFFER_BYPASS_NUMBER_OF_IDs</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" compoundref="can__cfg_8c" startline="379">can0_RxMsgs</references>
        <references refid="can__cfg_8c_1a94a1d1e04ae4e0a90e6ec1be61d99c63" compoundref="can__cfg_8c" startline="422">can0_bufferBypass_RxMsgs</references>
        <references refid="group__CONFIG__CAN_1ga20834704e9a69d64d0b67b32ab068b0b" compoundref="can__cfg_8h" startline="205">CAN0_BUFFER_BYPASS_NUMBER_OF_IDs</references>
        <references refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" compoundref="can_8h" startline="95">CAN_RX_BUFFER::buffer</references>
        <references refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" compoundref="can_8h" startline="93">CAN_RX_BUFFER::ptrWrite</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1a895b465fdf3363e2a9fc59f268a25212" compoundref="can_8h" startline="88">CAN_RX_BUFFERELEMENT::newMsg</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1a47289a987b6ac9eb00f6b7fbc49e49c1" compoundref="can_8h" startline="84">CAN_RX_BUFFERELEMENT::ID</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1ae27e8bffe6baf04dc0c60def9531380d" compoundref="can_8h" startline="86">CAN_RX_BUFFERELEMENT::RTR</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1a11f63b433bcf825f9ec1d8b370c6ffd4" compoundref="can_8h" startline="85">CAN_RX_BUFFERELEMENT::DLC</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" compoundref="can_8h" startline="87">CAN_RX_BUFFERELEMENT::Data</references>
        <references refid="structCAN__RX__BUFFER_1a47a5da3da927dbb8aaa8dc0241436c98" compoundref="can_8h" startline="94">CAN_RX_BUFFER::length</references>
        <references refid="structCAN__MSG__RX__TYPE_1a555019bdf97b724f0435249047d83e71" compoundref="can__cfg_8h" startline="356">CAN_MSG_RX_TYPE::func</references>
        <references refid="can_8c_1a52ba67dd474b373e7179c746f69527f1" compoundref="can_8c" startline="1248" endline="1493">CAN_BufferBypass</references>
        <references refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" compoundref="can__cfg_8c" startline="414">can_CAN0_rx_length</references>
        <references refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" compoundref="can__cfg_8c" startline="415">can_CAN1_rx_length</references>
        <references refid="can_8c_1a0b6c703ba61116e6f30f7b3c1aa39e53" compoundref="can_8c" startline="1506" endline="1518">CAN_InterpretReceivedMsg</references>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a52ba67dd474b373e7179c746f69527f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>static STD_RETURN_TYPE_e CAN_BufferBypass</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, uint32_t msgID, uint8_t *rxData, uint8_t DLC, uint8_t RTR)</argsstring>
        <name>CAN_BufferBypass</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msgID</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>rxData</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>DLC</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>RTR</declname>
        </param>
        <briefdescription>
<para>Receives a bypassed CAN message and interprets it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode on which the message has been received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgID</parametername>
</parameternamelist>
<parameterdescription>
<para>message ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the message data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DLC</parametername>
</parameternamelist>
<parameterdescription>
<para>length of received data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RTR</parametername>
</parameternamelist>
<parameterdescription>
<para>RTR bit of received message</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>E_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>if interpreting was successful, otherwise E_NOT_OK </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="160" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="1248" bodyend="1493"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
        <references refid="group__CONFIG__CAN_1ga23c0d810cd22f19c43556a65b87a155c" compoundref="can__cfg_8h" startline="234">CAN_ID_SOFTWARE_RESET_MSG</references>
        <references refid="can__cfg_8c_1a5e2181df66b88d357c46c156d5e56aa4" compoundref="can__cfg_8c" startline="431" endline="440">CAN_CheckNodeID</references>
        <references refid="can__cfg_8c_1ad1258f7bac42dabd47e8a60e00a5fd42" compoundref="can__cfg_8c" startline="453" endline="463">CAN_CheckUniqueDeviceID</references>
        <references refid="can__cfg_8c_1a70128542894da8e9abd73fdda0881d20" compoundref="can__cfg_8c" startline="442" endline="451">CAN_CheckBroadcastID</references>
        <references refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" compoundref="can__cfg_8h" startline="295">CAN_ID_BOOTLOADER_MSG</references>
        <references refid="group__CONFIG__CAN_1gac0bc0f76047350682326ff70b45eee2c" compoundref="can__cfg_8h" startline="307">CAN_ID_BOOTLOADER_SUBMSG_IDENTIFY</references>
        <references refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" compoundref="mcu_8c" startline="55">mcu_unique_deviceID</references>
        <references refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" compoundref="mcu_8h" startline="48">MCU_DeviceID_s::crc</references>
        <references refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" compoundref="eepr__cfg_8c" startline="98">eepr_board_info</references>
        <references refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" compoundref="eepr__cfg_8h" startline="234">EEPR_BOARD_INFO_s::network_nodeID</references>
        <references refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" compoundref="eepr__cfg_8h" startline="240">EEPR_DEFAULT_NETWORK_ID</references>
        <references refid="can__cfg_8h_1a69e7d94c13e30ac1500727d583af0c14" compoundref="can__cfg_8h" startline="335">CAN_BL_ACK</references>
        <references refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" compoundref="can_8c" startline="814" endline="857">CAN_TxMsg</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="group__CONFIG__CAN_1ga4e7f84c0a452e6a67e9f13045687d95d" compoundref="can__cfg_8h" startline="319">CAN_ID_BOOTLOADER_SUBMSG_SILENCE</references>
        <references refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" compoundref="can_8c" startline="62">canNode0_listenonly_mode</references>
        <references refid="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" compoundref="can_8c" startline="63">canNode1_listenonly_mode</references>
        <references refid="mcu_8c_1ad73255284eee7230c9082a9f0e0500f9" compoundref="mcu_8c" startline="62" endline="93">MCU_Wait_us</references>
        <references refid="can__cfg_8h_1a0aed37091214e0e13a3a1d6e2876c1a7" compoundref="can__cfg_8h" startline="333">CAN_ID_BOOTLOADER_SUBMSG_SILENCE_FINI</references>
        <references refid="group__CONFIG__CAN_1ga2eacc96e149e4ba38d2013f00238ec5c" compoundref="can__cfg_8h" startline="331">CAN_ID_BOOTLOADER_OPEN_BL_SESSION</references>
        <references refid="rtc__cfg_8h_1a9c3d4b75fb2ae8f94d0181220e042d1c" compoundref="rtc__cfg_8h" startline="46">RTC_DOWNLOAD_REQUEST_FLAG</references>
        <references refid="rtc_8c_1aa0c7fca836406ade332e1e3f1039d8ab" compoundref="rtc_8c" startline="51">hrtc</references>
        <references refid="can__cfg_8h_1a07b3bfdb3e98f63d106abedc49411b15" compoundref="can__cfg_8h" startline="336">CAN_BL_NACK</references>
        <references refid="group__CONFIG__CAN_1ga03c5228e8d5d9322abafddb94fac1b63" compoundref="can__cfg_8h" startline="246">CAN_ID_NETWORK_NODE_ID</references>
        <references refid="group__CONFIG__CAN_1gacc2fddea990e0417957aa5e797d498ca" compoundref="can__cfg_8h" startline="270">CAN_ID_NETWORK_NODE_ID_SUBMSG_WRITE</references>
        <references refid="structEEPR__BOARD__INFO__s_1a62312b7c811d29293f5f8f494fa8c502" compoundref="eepr__cfg_8h" startline="237">EEPR_BOARD_INFO_s::chksum</references>
        <references refid="eepr__cfg_8c_1ab14595ae571d9012a9650b3e2da964a5" compoundref="eepr__cfg_8c" startline="231" endline="239">EEPR_CalcChecksum</references>
        <references refid="eepr__cfg_8c_1a4fbf51938cfadc93ea31f69fe2be0e4f" compoundref="eepr__cfg_8c" startline="582" endline="601">EEPR_SetChannelData</references>
        <references refid="eepr__cfg_8h_1a291d4ec50ef4ae6731a6551fd907b4bd" compoundref="eepr__cfg_8h" startline="125">EEPR_CH_BOARD_INFO</references>
        <references refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" compoundref="std__types_8h" startline="40">NULL_PTR</references>
        <references refid="group__CONFIG__CAN_1gaaad99d53332511f290a6f5c9cc4672d7" compoundref="can__cfg_8h" startline="258">CAN_ID_NETWORK_NODE_ID_SUBMSG_READ</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a0b6c703ba61116e6f30f7b3c1aa39e53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>static STD_RETURN_TYPE_e CAN_InterpretReceivedMsg</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, uint32_t msgID, uint8_t *data, uint8_t DLC, uint8_t RTR)</argsstring>
        <name>CAN_InterpretReceivedMsg</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msgID</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>DLC</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>RTR</declname>
        </param>
        <briefdescription>
<para>Interprets the received message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode on which the message has been received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgID</parametername>
</parameternamelist>
<parameterdescription>
<para>message ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the message data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DLC</parametername>
</parameternamelist>
<parameterdescription>
<para>length of received data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RTR</parametername>
</parameternamelist>
<parameterdescription>
<para>RTR bit of received message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>E_OK if interpretation successful, otherwise E_NOT_OK </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="162" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="1506" bodyend="1518"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a0505a1f9b26b55293dc199f45e7bb0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_Init</definition>
        <argsstring>(void)</argsstring>
        <name>CAN_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes CAN settings and message filtering. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para>(void) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="171" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="171" bodyend="226"/>
        <references refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" compoundref="can__cfg_8c" startline="62">hcan0</references>
        <references refid="can_8c_1a7f2ae9e76f9ca5289785ccd00fd58ef7" compoundref="can_8c" startline="138">sReceiveStruct0</references>
        <references refid="can_8c_1a9d2ac075410a424726befa42b8c9d819" compoundref="can_8c" startline="232" endline="415">CAN_InitFilter</references>
        <references refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" compoundref="can__cfg_8c" startline="379">can0_RxMsgs</references>
        <references refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" compoundref="can__cfg_8c" startline="414">can_CAN0_rx_length</references>
        <references refid="group__CONFIG__CAN_1ga20834704e9a69d64d0b67b32ab068b0b" compoundref="can__cfg_8h" startline="205">CAN0_BUFFER_BYPASS_NUMBER_OF_IDs</references>
        <references refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" compoundref="diag_8c" startline="450" endline="484">DIAG_Handler</references>
        <references refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" compoundref="diag__cfg_8h" startline="98">DIAG_CH_CAN_INIT_FAILURE</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" compoundref="diag__id__cfg_8h" startline="44">DIAG_EVENT_NOK</references>
        <references refid="io_8c_1a1709c6b36be8ee2ebaf5e076300b6a93" compoundref="io_8c" startline="147" endline="150">IO_WritePin</references>
        <references refid="STM32F4xx_2mcu__cfg_8h_1a2ebc6528005693f7f574224ea00960c5" compoundref="STM32F4xx_2mcu__cfg_8h" startline="42">IO_PIN_CAN_0_TRANS_STANDBY_CONTROL</references>
        <references refid="io__cfg_8h_1a810cb4986f0729a97af72c3c80cdd11da1147ec98546e2e04cba09c4e6e4ff2e3" compoundref="io__cfg_8h" startline="204">IO_PIN_SET</references>
        <references refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" compoundref="can__cfg_8c" startline="156">hcan1</references>
        <references refid="can_8c_1ad612db183864cd2dc50857d7158184e2" compoundref="can_8c" startline="142">sReceiveStruct1</references>
        <references refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" compoundref="can__cfg_8c" startline="409">can1_RxMsgs</references>
        <references refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" compoundref="can__cfg_8c" startline="415">can_CAN1_rx_length</references>
        <references refid="group__CONFIG__CAN_1gaa756c8f6c2d26fd59c6e5160cb42e50a" compoundref="can__cfg_8h" startline="217">CAN1_BUFFER_BYPASS_NUMBER_OF_IDs</references>
        <references refid="STM32F4xx_2mcu__cfg_8h_1ad5257989fd9fb4155948a1402c5d7a0c" compoundref="STM32F4xx_2mcu__cfg_8h" startline="43">IO_PIN_CAN_1_TRANS_STANDBY_CONTROL</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a539bc7c8da4f1a8724915582aaf4dee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_TX_IRQHandler</definition>
        <argsstring>(CAN_HandleTypeDef *ptrHcan)</argsstring>
        <name>CAN_TX_IRQHandler</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>ptrHcan</declname>
        </param>
        <briefdescription>
<para>Handles CAN TX interrupt request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrHcan</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para>(void) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="574" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="574" bodyend="585"/>
        <references refid="can_8c_1a7527dda2064eca2a8785fd7f8be134d1" compoundref="can_8c" startline="732" endline="757">CAN_Disable_Transmit_IT</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a79338c20357e7247284f0009552d93e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_RX_IRQHandler</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, CAN_HandleTypeDef *ptrHcan)</argsstring>
        <name>CAN_RX_IRQHandler</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>ptrHcan</declname>
        </param>
        <briefdescription>
<para>Handles CAN RX interrupt request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode that received a message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptrHcan</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="588" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="588" bodyend="600"/>
        <references refid="can_8c_1a5e6080405cd793da60708daac0f18dd1" compoundref="can_8c" startline="1000" endline="1187">CAN_RxMsg</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a9820425942a5c033cca31ddbe7101ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_Error_IRQHandler</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, CAN_HandleTypeDef *ptrHcan)</argsstring>
        <name>CAN_Error_IRQHandler</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>ptrHcan</declname>
        </param>
        <briefdescription>
<para>Handles CAN error interrupt request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptrHcan</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a CAN_HandleTypeDef structure that contains the configuration information for the specified CAN.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="602" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="602" bodyend="725"/>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" compoundref="can_8h" startline="77">CAN_ERROR::canErrorCounter</references>
        <references refid="structCAN__ERROR_1a207a999831105f1b29bacc9d16d37acf" compoundref="can_8h" startline="76">CAN_ERROR::canError</references>
        <references refid="structCAN__ERROR_1a8667bb8ae1c3874db7486422264487c4" compoundref="can_8h" startline="80">CAN_ERROR::previous_timestamp</references>
        <references refid="structCAN__ERROR_1a00bee8727f74d498cf77ab7ef41368a8" compoundref="can_8h" startline="79">CAN_ERROR::timestamp</references>
        <references refid="mcu_8c_1a09e5f493b1f3dc15a07b7b72ad69cede" compoundref="mcu_8c" startline="164" endline="166">MCU_GetTimeStamp</references>
        <references refid="can_8c_1aa4dbf86d1f59d72beeb24bffd2269b75" compoundref="can_8c" startline="806" endline="808">CAN_ErrorCallback</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1ae507124701ea8830a9bea774d8ed38cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>STD_RETURN_TYPE_e CAN_TxMsg</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, uint32_t msgID, uint8_t *ptrMsgData, uint32_t msgLength, uint32_t RTR)</argsstring>
        <name>CAN_TxMsg</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msgID</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>ptrMsgData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msgLength</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>RTR</declname>
        </param>
        <briefdescription>
<para>Transmits message directly on the CAN bus. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode on which the message shall be transmitted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the message that will be transmitted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptrMsgData</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data that shall be transmitted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the data length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RTR</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the type of frame for the message that will be transmitted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>E_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>if transmission successful, otherwise E_NOT_OK </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="814" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="814" bodyend="857"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" compoundref="can_8c" startline="62">canNode0_listenonly_mode</references>
        <references refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" compoundref="can__cfg_8c" startline="62">hcan0</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" compoundref="can_8c" startline="63">canNode1_listenonly_mode</references>
        <references refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" compoundref="can__cfg_8c" startline="156">hcan1</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1ad7386c0b7048c957b8453b6492fb544f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>STD_RETURN_TYPE_e CAN_Send</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, uint32_t msgID, uint8_t *ptrMsgData, uint32_t msgLength, uint32_t RTR)</argsstring>
        <name>CAN_Send</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msgID</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>ptrMsgData</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msgLength</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>RTR</declname>
        </param>
        <briefdescription>
<para>Add message to transmit buffer, message will be transmitted shortly after. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode on which the message shall be transmitted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the message that will be transmitted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptrMsgData</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a uint8_t array that contains the message that will be transmitted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLength</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the message that will be transmitted This parameter can be a value of CAN_identifier_type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RTR</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the type of frame for the message that will be transmitted. This parameter can be a value of CAN_remote_transmission_request</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>E_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>if successful, E_NOT_OK if buffer is full or error occurred </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="860" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="860" bodyend="933"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="os_8c_1a5573d7c2221a3f3b9cfe5c109603b441" compoundref="os_8c" startline="317" endline="328">OS_TaskEnter_Critical</references>
        <references refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" compoundref="can_8h" startline="105">CAN_TX_BUFFER::ptrWrite</references>
        <references refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" compoundref="can_8h" startline="104">CAN_TX_BUFFER::ptrRead</references>
        <references refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" compoundref="can_8h" startline="107">CAN_TX_BUFFER::buffer</references>
        <references refid="structCAN__TX__BUFFERELEMENT_1af12470bc6b1485391eed1ca2cdf19539" compoundref="can_8h" startline="100">CAN_TX_BUFFERELEMENT::newMsg</references>
        <references refid="structCAN__TX__BUFFER_1ab8226696c9a33665d4b0dcddd33466d9" compoundref="can_8h" startline="106">CAN_TX_BUFFER::length</references>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
        <references refid="os_8c_1a7e5b7892152952d2109c89baa0add1a8" compoundref="os_8c" startline="330" endline="341">OS_TaskExit_Critical</references>
        <references refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" compoundref="can_8h" startline="99">CAN_TX_BUFFERELEMENT::msg</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a1aef8b8c5b4c2a4e50033d65630a473e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>STD_RETURN_TYPE_e CAN_TxMsgBuffer</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode)</argsstring>
        <name>CAN_TxMsgBuffer</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <briefdescription>
<para>Transmits a can message from transmit buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode on which the message shall be transmitted</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>E_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>if transmission successful, otherwise E_NOT_OK </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="936" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="936" bodyend="985"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" compoundref="can_8c" startline="62">canNode0_listenonly_mode</references>
        <references refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" compoundref="can__cfg_8c" startline="62">hcan0</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" compoundref="can_8c" startline="63">canNode1_listenonly_mode</references>
        <references refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" compoundref="can__cfg_8c" startline="156">hcan1</references>
        <references refid="os_8c_1a5573d7c2221a3f3b9cfe5c109603b441" compoundref="os_8c" startline="317" endline="328">OS_TaskEnter_Critical</references>
        <references refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" compoundref="can_8h" startline="105">CAN_TX_BUFFER::ptrWrite</references>
        <references refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" compoundref="can_8h" startline="104">CAN_TX_BUFFER::ptrRead</references>
        <references refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" compoundref="can_8h" startline="107">CAN_TX_BUFFER::buffer</references>
        <references refid="structCAN__TX__BUFFERELEMENT_1af12470bc6b1485391eed1ca2cdf19539" compoundref="can_8h" startline="100">CAN_TX_BUFFERELEMENT::newMsg</references>
        <references refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" compoundref="can_8h" startline="99">CAN_TX_BUFFERELEMENT::msg</references>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
        <references refid="structCAN__TX__BUFFER_1ab8226696c9a33665d4b0dcddd33466d9" compoundref="can_8h" startline="106">CAN_TX_BUFFER::length</references>
        <references refid="os_8c_1a7e5b7892152952d2109c89baa0add1a8" compoundref="os_8c" startline="330" endline="341">OS_TaskExit_Critical</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a043869ff22e53aac90ce0895bdf60ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>STD_RETURN_TYPE_e CAN_ReceiveBuffer</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, Can_PduType *msg)</argsstring>
        <name>CAN_ReceiveBuffer</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type><ref refid="can__cfg_8h_1a374dfdd1a08fb06f469deebbf8c9c323" kindref="member">Can_PduType</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Reads a can message from RxBuffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode on which a message has been received </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>message that has been received</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>E_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>if reception successful, if buffer empty or invalid pointer E_NOT_OK </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="1190" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="1190" bodyend="1235"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" compoundref="can_8h" startline="93">CAN_RX_BUFFER::ptrWrite</references>
        <references refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" compoundref="can_8h" startline="92">CAN_RX_BUFFER::ptrRead</references>
        <references refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" compoundref="can_8h" startline="95">CAN_RX_BUFFER::buffer</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1a895b465fdf3363e2a9fc59f268a25212" compoundref="can_8h" startline="88">CAN_RX_BUFFERELEMENT::newMsg</references>
        <references refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" compoundref="can__cfg_8h" startline="380">CanPdu::id</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1a47289a987b6ac9eb00f6b7fbc49e49c1" compoundref="can_8h" startline="84">CAN_RX_BUFFERELEMENT::ID</references>
        <references refid="structCanPdu_1a11b3ccf3bb1e8f402b99a471ea316b29" compoundref="can__cfg_8h" startline="381">CanPdu::dlc</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1a11f63b433bcf825f9ec1d8b370c6ffd4" compoundref="can_8h" startline="85">CAN_RX_BUFFERELEMENT::DLC</references>
        <references refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" compoundref="can__cfg_8h" startline="379">CanPdu::sdu</references>
        <references refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" compoundref="can_8h" startline="87">CAN_RX_BUFFERELEMENT::Data</references>
        <references refid="structCAN__RX__BUFFER_1a47a5da3da927dbb8aaa8dc0241436c98" compoundref="can_8h" startline="94">CAN_RX_BUFFER::length</references>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a16f96b3b71b4f4ea6e8e9b0b06f8976c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_SetSleepMode</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode)</argsstring>
        <name>CAN_SetSleepMode</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <briefdescription>
<para>Set CAN to sleep mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode which shall be put to sleep mode</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para>(void) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="1524" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="1524" bodyend="1531"/>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" compoundref="can__cfg_8c" startline="62">hcan0</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" compoundref="can__cfg_8c" startline="156">hcan1</references>
      </memberdef>
      <memberdef kind="function" id="can_8c_1a5a81b3e2fbc69b03435aba60dfd61402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_WakeUp</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode)</argsstring>
        <name>CAN_WakeUp</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <briefdescription>
<para>Wake CAN up from sleep mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>canNode</parametername>
</parameternamelist>
<parameterdescription>
<para>canNode which shall be waken up from sleep mode</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" line="1534" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c" bodystart="1534" bodyend="1541"/>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" compoundref="can__cfg_8c" startline="62">hcan0</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" compoundref="can__cfg_8c" startline="156">hcan1</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Driver for the CAN module. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para><copy/> 2010 - 2017, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. All rights reserved.</para></simplesect>
BSD 3-Clause License Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para></listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para></listitem><listitem><para>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para></listitem></orderedlist>
</para><para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para><para>We kindly request you to use one or more of the following phrases to refer to foxBMS in your hardware, software, documentation or advertising materials:</para><para><Prime/>This product uses parts of foxBMS<registered/><Prime/></para><para><Prime/>This product includes parts of foxBMS<registered/><Prime/></para><para><Prime/>This product is derived from foxBMS<registered/><Prime/></para><para><simplesect kind="author"><para>foxBMS Team </para></simplesect>
<simplesect kind="date"><para>12.07.2015 (date of creation)</para></simplesect>
<simplesect kind="par"><title>Module-prefix</title><para>CAN</para></simplesect>
Implementation of the CAN Interrupts, initialization, buffers, receive and transmit interfaces. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="37"><highlight class="comment">/*==================<sp/>Includes<sp/>=============================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>recommended<sp/>include<sp/>order<sp/>of<sp/>header<sp/>files:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>1.<sp/><sp/><sp/><sp/>include<sp/>general.h</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>2.<sp/><sp/><sp/><sp/>include<sp/>module&apos;s<sp/>own<sp/>header</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>3...<sp/><sp/>other<sp/>headers</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="general_8h" kindref="compound">general.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="can_8h" kindref="compound">can.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="os_8h" kindref="compound">os.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mcu_8h" kindref="compound">mcu.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="diag_8h" kindref="compound">diag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="io_8h" kindref="compound">io.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Macros<sp/>and<sp/>Definitions<sp/>===============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="can_8c_1a7e3d6e850c79d86d2edc5e80f3b35961" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ID_16BIT_FIFO0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="can_8c_1a65e8bf3c09172364d402f30ddb57ff78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ID_16BIT_FIFO1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ID_32BIT_FIFO0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ID_32BIT_FIFO1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSK_16BIT_FIFO0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSK_16BIT_FIFO1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSK_32BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Constant<sp/>and<sp/>Variable<sp/>Definitions<sp/>====================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="can_8h_1adf1b1f5fa4e9025b882545c3cfd02d3f" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" kindref="member">canNode0_listenonly_mode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63" refid="can_8h_1a52e614be9f1d0b38ade8d5f1dfd52b00" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" kindref="member">canNode1_listenonly_mode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_USE_TX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="structCAN__TX__BUFFERELEMENT" kindref="compound">CAN_TX_BUFFERELEMENT_s</ref><sp/>can0_txbufferelements[<ref refid="can_8h_1a238ecc02f2310e15e91563cbe0796bcd" kindref="member">CAN0_TX_BUFFER_LENGTH</ref>];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="structCAN__TX__BUFFER" kindref="compound">CAN_TX_BUFFER_s</ref><sp/>can0_txbuffer<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structCAN__TX__BUFFER_1ab8226696c9a33665d4b0dcddd33466d9" kindref="member">length</ref><sp/>=<sp/><ref refid="can_8h_1a238ecc02f2310e15e91563cbe0796bcd" kindref="member">CAN0_TX_BUFFER_LENGTH</ref>,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>&amp;can0_txbufferelements[0],</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_USE_RX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="structCAN__RX__BUFFERELEMENT" kindref="compound">CAN_RX_BUFFERELEMENT_s</ref><sp/>can0_rxbufferelements[<ref refid="can_8h_1ac5955cbfd7dc08d66755c0c951af7d51" kindref="member">CAN0_RX_BUFFER_LENGTH</ref>];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="structCAN__RX__BUFFER" kindref="compound">CAN_RX_BUFFER_s</ref><sp/>can0_rxbuffer<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structCAN__RX__BUFFER_1a47a5da3da927dbb8aaa8dc0241436c98" kindref="member">length</ref><sp/>=<sp/><ref refid="can_8h_1ac5955cbfd7dc08d66755c0c951af7d51" kindref="member">CAN0_RX_BUFFER_LENGTH</ref>,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>&amp;can0_rxbufferelements[0],</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">uint8_t<sp/>can0_fastLinkIndex[<ref refid="group__CONFIG__CAN_1ga20834704e9a69d64d0b67b32ab068b0b" kindref="member">CAN0_BUFFER_BYPASS_NUMBER_OF_IDs</ref>];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Link<sp/>Table<sp/>for<sp/>bufferBypassing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="structCAN__ERROR" kindref="compound">CAN_ERROR_s</ref><sp/>CAN0_errorStruct<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structCAN__ERROR_1a207a999831105f1b29bacc9d16d37acf" kindref="member">canError</ref><sp/>=<sp/>HAL_CAN_ERROR_NONE,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>.canErrorCounter<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>.timestamp<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>.previous_timestamp<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_USE_TX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="structCAN__TX__BUFFERELEMENT" kindref="compound">CAN_TX_BUFFERELEMENT_s</ref><sp/>can1_txbufferelements[<ref refid="can_8h_1aa3d3ece60bb6c40496e9a3aeecae442a" kindref="member">CAN1_TX_BUFFER_LENGTH</ref>];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="structCAN__TX__BUFFER" kindref="compound">CAN_TX_BUFFER_s</ref><sp/>can1_txbuffer<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structCAN__TX__BUFFER_1ab8226696c9a33665d4b0dcddd33466d9" kindref="member">length</ref><sp/>=<sp/><ref refid="can_8h_1aa3d3ece60bb6c40496e9a3aeecae442a" kindref="member">CAN1_TX_BUFFER_LENGTH</ref>,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>&amp;can1_txbufferelements[0],</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_USE_RX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="structCAN__RX__BUFFERELEMENT" kindref="compound">CAN_RX_BUFFERELEMENT_s</ref><sp/>can1_rxbufferelements[<ref refid="can_8h_1a4f3913cbb9c7d421b1bc7132976b8c22" kindref="member">CAN1_RX_BUFFER_LENGTH</ref>];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="structCAN__RX__BUFFER" kindref="compound">CAN_RX_BUFFER_s</ref><sp/>can1_rxbuffer<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structCAN__RX__BUFFER_1a47a5da3da927dbb8aaa8dc0241436c98" kindref="member">length</ref><sp/>=<sp/><ref refid="can_8h_1a4f3913cbb9c7d421b1bc7132976b8c22" kindref="member">CAN1_RX_BUFFER_LENGTH</ref>,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>&amp;can1_rxbufferelements[0],</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">uint8_t<sp/>can1_fastLinkIndex[<ref refid="group__CONFIG__CAN_1gaa756c8f6c2d26fd59c6e5160cb42e50a" kindref="member">CAN1_BUFFER_BYPASS_NUMBER_OF_IDs</ref>];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Link<sp/>Table<sp/>for<sp/>bufferBypassing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="structCAN__ERROR" kindref="compound">CAN_ERROR_s</ref><sp/>CAN1_errorStruct<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structCAN__ERROR_1a207a999831105f1b29bacc9d16d37acf" kindref="member">canError</ref><sp/>=<sp/>HAL_CAN_ERROR_NONE,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>.canErrorCounter<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>},</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>.timestamp<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>.previous_timestamp<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="121"><highlight class="normal">};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(CAN1_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>CAN_USE_CAN_NODE1)<sp/>||<sp/>(CAN0_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>CAN_USE_CAN_NODE0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">uint8_t<sp/>fastLinkBuffer[8];<sp/></highlight><highlight class="comment">/*<sp/>data<sp/>buffer<sp/>for<sp/>bypassed<sp/>message,<sp/>therefore<sp/>size<sp/>=<sp/>8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***********************************************************</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>Dummies<sp/>for<sp/>filter<sp/>initialization<sp/>and<sp/>message<sp/>reception</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" refkind="member"><highlight class="normal">CAN_FilterConfTypeDef<sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>insert<sp/>here<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.FilterActivation<sp/>=<sp/>ENABLE,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>the<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="can_8c_1a7f2ae9e76f9ca5289785ccd00fd58ef7" refkind="member"><highlight class="normal">CanRxMsgTypeDef<sp/><ref refid="can_8c_1a7f2ae9e76f9ca5289785ccd00fd58ef7" kindref="member">sReceiveStruct0</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>insert<sp/>here<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="can_8c_1ad612db183864cd2dc50857d7158184e2" refkind="member"><highlight class="normal">CanRxMsgTypeDef<sp/><ref refid="can_8c_1ad612db183864cd2dc50857d7158184e2" kindref="member">sReceiveStruct1</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>insert<sp/>here<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Prototypes<sp/>==================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Inits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="can_8c_1a8975fdc25f90009f3de12e5446010eec" kindref="member">CAN_GetNextID</ref>(<ref refid="structCAN__MSG__RX__TYPE" kindref="compound">CAN_MSG_RX_TYPE_s</ref>*<sp/>can_RxMsgs,<sp/>uint8_t<sp/>numberOfRxIDs,<sp/>uint8_t<sp/>startIndex,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>filterCase);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="can_8c_1a68dc0bb72e3070c318b5c7b0ca98892a" kindref="member">CAN_NumberOfNeededFilters</ref>(<ref refid="structCAN__MSG__RX__TYPE" kindref="compound">CAN_MSG_RX_TYPE_s</ref>*<sp/>can_RxMsgs,<sp/>uint8_t*<sp/>numberOfDifferentIDs);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a9d2ac075410a424726befa42b8c9d819" kindref="member">CAN_InitFilter</ref>(CAN_HandleTypeDef*<sp/>ptrHcan,<sp/><ref refid="structCAN__MSG__RX__TYPE" kindref="compound">CAN_MSG_RX_TYPE_s</ref>*<sp/>can_RxMsgs,<sp/>uint8_t<sp/>numberOfRxMsgs);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a7527dda2064eca2a8785fd7f8be134d1" kindref="member">CAN_Disable_Transmit_IT</ref>(CAN_HandleTypeDef*<sp/>ptrHcan);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a8f33c36f63d1d1f1eef92f5fc3e44d20" kindref="member">CAN_TxCpltCallback</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1aa4dbf86d1f59d72beeb24bffd2269b75" kindref="member">CAN_ErrorCallback</ref>(CAN_HandleTypeDef*<sp/>ptrHhcan);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1a5e6080405cd793da60708daac0f18dd1" kindref="member">CAN_RxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>CAN_HandleTypeDef*<sp/>ptrHcan,<sp/>uint8_t<sp/>FIFONumber);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Buffer/Interpreter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1a52ba67dd474b373e7179c746f69527f1" kindref="member">CAN_BufferBypass</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>uint32_t<sp/>msgID,<sp/>uint8_t*<sp/>rxData,<sp/>uint8_t<sp/>DLC,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>RTR);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1a0b6c703ba61116e6f30f7b3c1aa39e53" kindref="member">CAN_InterpretReceivedMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>uint32_t<sp/>msgID,<sp/>uint8_t*<sp/>data,<sp/>uint8_t<sp/>DLC,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>RTR);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Implementations<sp/>=============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>Initialization</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>****************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="can_8h_1a0505a1f9b26b55293dc199f45e7bb0ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a0505a1f9b26b55293dc199f45e7bb0ec" kindref="member">CAN_Init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DeInit<sp/>CAN0<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CAN_DeInit(&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Init<sp/>CAN0-handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CAN_Init(&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>.pRxMsg<sp/>=<sp/>&amp;<ref refid="can_8c_1a7f2ae9e76f9ca5289785ccd00fd58ef7" kindref="member">sReceiveStruct0</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>message<sp/>for<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>CAN0<sp/>hardware<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can_8c_1a9d2ac075410a424726befa42b8c9d819" kindref="member">CAN_InitFilter</ref>(&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>,<sp/>&amp;<ref refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" kindref="member">can0_RxMsgs</ref>[0],<sp/><ref refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" kindref="member">can_CAN0_rx_length</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>more<sp/>rx<sp/>messages<sp/>are<sp/>bypassed<sp/>than<sp/>received<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__CONFIG__CAN_1ga20834704e9a69d64d0b67b32ab068b0b" kindref="member">CAN0_BUFFER_BYPASS_NUMBER_OF_IDs</ref><sp/>&gt;<sp/><ref refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" kindref="member">can_CAN0_rx_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" kindref="member">DIAG_CH_CAN_INIT_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>1,<sp/>NULL);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>Interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CAN_Receive_IT(&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>,<sp/>CAN_FIFO0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>can<sp/>message<sp/>receive<sp/>interrupt<sp/>FIFO0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>.State<sp/>=<sp/>HAL_CAN_STATE_READY;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CAN_Receive_IT(&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>,<sp/>CAN_FIFO1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>can<sp/>message<sp/>receive<sp/>interrupt<sp/>FIFO1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>DBF<sp/>bit<sp/>to<sp/>0<sp/>for<sp/>CAN<sp/>activity<sp/>while<sp/>in<sp/>debug<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DBG_FREEZE(&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>,<sp/>DISABLE);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="io_8c_1a1709c6b36be8ee2ebaf5e076300b6a93" kindref="member">IO_WritePin</ref>(<ref refid="STM32F4xx_2mcu__cfg_8h_1a2ebc6528005693f7f574224ea00960c5" kindref="member">IO_PIN_CAN_0_TRANS_STANDBY_CONTROL</ref>,<sp/><ref refid="io__cfg_8h_1a810cb4986f0729a97af72c3c80cdd11da1147ec98546e2e04cba09c4e6e4ff2e3" kindref="member">IO_PIN_SET</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DeInit<sp/>CAN1<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CAN_DeInit(&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Init<sp/>CAN1-handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CAN_Init(&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>.pRxMsg<sp/>=<sp/>&amp;<ref refid="can_8c_1ad612db183864cd2dc50857d7158184e2" kindref="member">sReceiveStruct1</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>message<sp/>for<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>CAN1<sp/>hardware<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can_8c_1a9d2ac075410a424726befa42b8c9d819" kindref="member">CAN_InitFilter</ref>(&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>,<sp/>&amp;<ref refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" kindref="member">can1_RxMsgs</ref>[0],<sp/><ref refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" kindref="member">can_CAN1_rx_length</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>more<sp/>RX<sp/>messages<sp/>are<sp/>bypassed<sp/>than<sp/>received<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__CONFIG__CAN_1gaa756c8f6c2d26fd59c6e5160cb42e50a" kindref="member">CAN1_BUFFER_BYPASS_NUMBER_OF_IDs</ref><sp/>&gt;<sp/><ref refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" kindref="member">can_CAN1_rx_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" kindref="member">DIAG_CH_CAN_INIT_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>Interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CAN_Receive_IT(&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>,<sp/>CAN_FIFO0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>can<sp/>message<sp/>receive<sp/>interrupt<sp/>FIFO0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>.State<sp/>=<sp/>HAL_CAN_STATE_READY;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CAN_Receive_IT(&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>,<sp/>CAN_FIFO1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>can<sp/>message<sp/>receive<sp/>interrupt<sp/>FIFO1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>DBF<sp/>bit<sp/>to<sp/>0<sp/>for<sp/>CAN<sp/>activity<sp/>while<sp/>in<sp/>debug<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DBG_FREEZE(&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>,<sp/>DISABLE);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="io_8c_1a1709c6b36be8ee2ebaf5e076300b6a93" kindref="member">IO_WritePin</ref>(<ref refid="STM32F4xx_2mcu__cfg_8h_1ad5257989fd9fb4155948a1402c5d7a0c" kindref="member">IO_PIN_CAN_1_TRANS_STANDBY_CONTROL</ref>,<sp/><ref refid="io__cfg_8h_1a810cb4986f0729a97af72c3c80cdd11da1147ec98546e2e04cba09c4e6e4ff2e3" kindref="member">IO_PIN_SET</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="can_8c_1a9d2ac075410a424726befa42b8c9d819" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a9d2ac075410a424726befa42b8c9d819" kindref="member">CAN_InitFilter</ref>(CAN_HandleTypeDef*<sp/>ptrHcan,<sp/><ref refid="structCAN__MSG__RX__TYPE" kindref="compound">CAN_MSG_RX_TYPE_s</ref>*<sp/>can_RxMsgs,<sp/>uint8_t<sp/>numberOfRxMsgs)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Contains<sp/>the<sp/>occurrence<sp/>of<sp/>of<sp/>the<sp/>different<sp/>filter<sp/>cases<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>[0]<sp/>-<sp/>ID<sp/>List<sp/>mode<sp/>16bit<sp/>routed<sp/>on<sp/>FIFO0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>[1]<sp/>-<sp/>ID<sp/>List<sp/>mode<sp/>16bit<sp/>routed<sp/>on<sp/>FIFO1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>[2]<sp/>-<sp/>ID<sp/>List<sp/>mode<sp/>32bit<sp/>routed<sp/>on<sp/>FIFO0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>[3]<sp/>-<sp/>ID<sp/>List<sp/>mode<sp/>32bit<sp/>routed<sp/>on<sp/>FIFO1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>[4]<sp/>-<sp/>Mask<sp/>mode<sp/>16bit<sp/>routed<sp/>on<sp/>FIFO0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>[5]<sp/>-<sp/>Mask<sp/>mode<sp/>16bit<sp/>routed<sp/>on<sp/>FIFO1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>[6]<sp/>-<sp/>Mask<sp/>mode<sp/>32bit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>numberOfDifferentIDs[7]<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>filterNumber<sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>the<sp/>filter<sp/>to<sp/>be<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>number<sp/>of<sp/>needed<sp/>filter<sp/>banks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>numberNeededFilters<sp/>=<sp/><ref refid="can_8c_1a68dc0bb72e3070c318b5c7b0ca98892a" kindref="member">CAN_NumberOfNeededFilters</ref>(can_RxMsgs,<sp/>&amp;numberOfDifferentIDs[0]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numberNeededFilters<sp/>&lt;=<sp/><ref refid="group__CONFIG__CAN_1gaab847c98da84e4cfbb6a87559c13f35d" kindref="member">CAN_NUMBER_OF_FILTERBANKS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>j<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Counts<sp/>the<sp/>number<sp/>of<sp/>initialized<sp/>instances<sp/>per<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>posRxMsgs<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator<sp/>for<sp/>can_RxMsgs[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>numberRegistersUsed<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Counts<sp/>how<sp/>many<sp/>register<sp/>space<sp/>is<sp/>already<sp/>used<sp/>in<sp/>each<sp/>filter<sp/>bank<sp/>(max.<sp/>64bit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>caseID<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>indicates<sp/>the<sp/>actual<sp/>filter<sp/>mode<sp/>that<sp/>will<sp/>be<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrHcan-&gt;Instance<sp/><sp/>==<sp/><sp/>CAN2)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>start<sp/>slave<sp/>bank<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.BankNumber<sp/>=<sp/>filterNumber;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(caseID<sp/>=<sp/>0;<sp/>caseID<sp/>&lt;<sp/>2;<sp/>caseID++)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID<sp/>List<sp/>mode<sp/>16bit<sp/>routed<sp/>on<sp/>FIFO0<sp/>or<sp/>FIFO1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numberOfDifferentIDs[caseID]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>numberOfDifferentIDs[caseID])<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Until<sp/>all<sp/>IDs<sp/>in<sp/>that<sp/>filter<sp/>case<sp/>are<sp/>treated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posRxMsgs<sp/>=<sp/><ref refid="can_8c_1a8975fdc25f90009f3de12e5446010eec" kindref="member">CAN_GetNextID</ref>(can_RxMsgs,<sp/>numberOfRxMsgs,<sp/>posRxMsgs,<sp/>caseID);<sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>array<sp/>position<sp/>of<sp/>next<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(numberRegistersUsed)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/><sp/></highlight><highlight class="comment">//<sp/>1st<sp/>ID<sp/>per<sp/>filter<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdHigh<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>5)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].RTR<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/><sp/></highlight><highlight class="comment">//<sp/>2nd<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdLow<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>5)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].RTR<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/></highlight><highlight class="comment">//<sp/>3rd<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdHigh<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>5)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].RTR<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/><sp/></highlight><highlight class="comment">//<sp/>4th<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdLow<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>5)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].RTR<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberRegistersUsed<sp/>=<sp/>j<sp/>%<sp/>4;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>space<sp/>for<sp/>4<sp/>IDs<sp/>a<sp/>16<sp/>bit<sp/>in<sp/>one<sp/>filter<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((numberRegistersUsed<sp/><sp/>==<sp/><sp/>0<sp/>&amp;&amp;<sp/>j<sp/>&gt;<sp/>1)<sp/>||<sp/>j<sp/><sp/>==<sp/><sp/>numberOfDifferentIDs[caseID])<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>registers<sp/>in<sp/>filter<sp/>bank<sp/>used<sp/>OR<sp/>no<sp/>more<sp/>IDs<sp/>in<sp/>that<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMode<sp/>=<sp/>CAN_FILTERMODE_IDLIST;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterScale<sp/>=<sp/>CAN_FILTERSCALE_16BIT;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a7e3d6e850c79d86d2edc5e80f3b35961" kindref="member">ID_16BIT_FIFO0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterFIFOAssignment<sp/>=<sp/>CAN_FIFO0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a65e8bf3c09172364d402f30ddb57ff78" kindref="member">ID_16BIT_FIFO1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterFIFOAssignment<sp/>=<sp/>CAN_FIFO1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterNumber<sp/>=<sp/>filterNumber;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_CAN_ConfigFilter(ptrHcan,<sp/>&amp;<ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>filter<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterNumber++;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>filter<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posRxMsgs++;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>array<sp/>position<sp/>to<sp/>find<sp/>next<sp/>valid<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posRxMsgs<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>variables<sp/>for<sp/>next<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberRegistersUsed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(caseID<sp/>=<sp/>2;<sp/>caseID<sp/>&lt;<sp/>6;<sp/>caseID++)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID<sp/>List<sp/>mode<sp/>32bit<sp/>routed<sp/>on<sp/>FIFO0<sp/>or<sp/>FIFO1;<sp/>Mask<sp/>mode<sp/>16bit<sp/>routed<sp/>on<sp/>FIFO0<sp/>or<sp/>FIFO1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numberOfDifferentIDs[caseID]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>numberOfDifferentIDs[caseID])<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Until<sp/>all<sp/>IDs<sp/>in<sp/>that<sp/>filter<sp/>case<sp/>are<sp/>treated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posRxMsgs<sp/>=<sp/><ref refid="can_8c_1a8975fdc25f90009f3de12e5446010eec" kindref="member">CAN_GetNextID</ref>(can_RxMsgs,<sp/>numberOfRxMsgs,<sp/>posRxMsgs,<sp/>caseID);<sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>array<sp/>position<sp/>of<sp/>next<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(numberRegistersUsed)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>32bit<sp/>per<sp/>filter<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" kindref="member">ID_32BIT_FIFO0</ref><sp/>||<sp/>caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" kindref="member">ID_32BIT_FIFO1</ref>)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>mode<sp/>32bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdHigh<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>3)<sp/>&gt;&gt;<sp/>16);<sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>&lt;&lt;<sp/>2<sp/>is<sp/>for<sp/>setting<sp/>IDE<sp/>bit<sp/>to<sp/>receive<sp/>extended<sp/>identifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdLow<sp/>=<sp/>(uint16_t)((can_RxMsgs[posRxMsgs].ID<sp/>&lt;&lt;<sp/>3)<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>2</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1ac5de244f09fc4a22cf7388ceb63c193e" kindref="member">RTR</ref><sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" kindref="member">MSK_16BIT_FIFO0</ref><sp/>||<sp/>caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" kindref="member">MSK_16BIT_FIFO1</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>mask<sp/>mode<sp/>16bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdHigh<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>5)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].RTR<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdHigh<sp/>=<sp/>can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a29de944e5bb4dcb752fe57f81c98cdc1" kindref="member">mask</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdLow<sp/>=<sp/>0x0000;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>second<sp/>register<sp/>to<sp/>0xFFFF,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdLow<sp/>=<sp/>0xFFFF;<sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>all<sp/>messages<sp/>would<sp/>be<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>32bit<sp/>per<sp/>filter<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" kindref="member">ID_32BIT_FIFO0</ref><sp/>||<sp/>caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" kindref="member">ID_32BIT_FIFO1</ref>)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>mode<sp/>32bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdHigh<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>3)<sp/>&gt;&gt;<sp/>16);<sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>&lt;&lt;<sp/>2<sp/>is<sp/>for<sp/>setting<sp/>IDE<sp/>bit<sp/>to<sp/>receive<sp/>extended<sp/>identifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdLow<sp/>=<sp/>(uint16_t)((can_RxMsgs[posRxMsgs].ID<sp/>&lt;&lt;<sp/>3)<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>2</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1ac5de244f09fc4a22cf7388ceb63c193e" kindref="member">RTR</ref><sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" kindref="member">MSK_16BIT_FIFO0</ref><sp/>||<sp/>caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" kindref="member">MSK_16BIT_FIFO1</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>mask<sp/>mode<sp/>16bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdLow<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>5)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].RTR<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdLow<sp/>=<sp/>can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a29de944e5bb4dcb752fe57f81c98cdc1" kindref="member">mask</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberRegistersUsed<sp/>=<sp/>j<sp/>%<sp/>2;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Space<sp/>for<sp/>two<sp/>IDs<sp/>a<sp/>32bit<sp/>or<sp/>two<sp/>mask<sp/>a<sp/>16bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((numberRegistersUsed<sp/><sp/>==<sp/><sp/>0<sp/>&amp;&amp;<sp/>j<sp/>&gt;<sp/>1)<sp/>||<sp/>j<sp/><sp/>==<sp/><sp/>numberOfDifferentIDs[caseID])<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>registers<sp/>in<sp/>filter<sp/>bank<sp/>used<sp/>OR<sp/>no<sp/>more<sp/>IDs<sp/>in<sp/>that<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" kindref="member">ID_32BIT_FIFO0</ref><sp/>||<sp/>caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" kindref="member">ID_32BIT_FIFO1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMode<sp/>=<sp/>CAN_FILTERMODE_IDLIST;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterScale<sp/>=<sp/>CAN_FILTERSCALE_32BIT;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" kindref="member">ID_32BIT_FIFO0</ref>)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterFIFOAssignment<sp/>=<sp/>CAN_FIFO0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterFIFOAssignment<sp/>=<sp/>CAN_FIFO1;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" kindref="member">MSK_16BIT_FIFO0</ref><sp/>||<sp/>caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" kindref="member">MSK_16BIT_FIFO1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMode<sp/>=<sp/>CAN_FILTERMODE_IDMASK;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterScale<sp/>=<sp/>CAN_FILTERSCALE_16BIT;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caseID<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" kindref="member">MSK_16BIT_FIFO0</ref>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterFIFOAssignment<sp/>=<sp/>CAN_FIFO0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterFIFOAssignment<sp/>=<sp/>CAN_FIFO1;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterNumber<sp/>=<sp/>filterNumber;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_CAN_ConfigFilter(ptrHcan,<sp/>&amp;<ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>filter<sp/>bank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterNumber++;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>filter<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posRxMsgs++;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>array<sp/>position<sp/>to<sp/>find<sp/>next<sp/>valid<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posRxMsgs<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>variables<sp/>for<sp/>next<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberRegistersUsed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numberOfDifferentIDs[<ref refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" kindref="member">MSK_32BIT</ref>]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mask<sp/>mode<sp/>32bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>numberOfDifferentIDs[<ref refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" kindref="member">MSK_32BIT</ref>])<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>array<sp/>position<sp/>of<sp/>next<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Until<sp/>all<sp/>IDs<sp/>in<sp/>that<sp/>filter<sp/>case<sp/>are<sp/>treated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posRxMsgs<sp/>=<sp/><ref refid="can_8c_1a8975fdc25f90009f3de12e5446010eec" kindref="member">CAN_GetNextID</ref>(can_RxMsgs,<sp/>numberOfRxMsgs,<sp/>posRxMsgs,<sp/>MSK_32BIT);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMode<sp/>=<sp/>CAN_FILTERMODE_IDMASK;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterScale<sp/>=<sp/>CAN_FILTERSCALE_32BIT;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdHigh<sp/>=<sp/>((can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref><sp/>&lt;&lt;<sp/>3)<sp/>&gt;&gt;<sp/>16);<sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>&lt;&lt;<sp/>2<sp/>is<sp/>for<sp/>setting<sp/>IDE<sp/>bit<sp/>to<sp/>receive<sp/>extended<sp/>identifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterIdLow<sp/>=<sp/>(uint16_t)((can_RxMsgs[posRxMsgs].ID<sp/>&lt;&lt;<sp/>3)<sp/>|<sp/>1<sp/>&lt;&lt;<sp/>2</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1ac5de244f09fc4a22cf7388ceb63c193e" kindref="member">RTR</ref><sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdHigh<sp/>=<sp/>can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a29de944e5bb4dcb752fe57f81c98cdc1" kindref="member">mask</ref><sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterMaskIdLow<sp/>=<sp/>(uint16_t)(can_RxMsgs[posRxMsgs].mask);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterFIFOAssignment<sp/>=<sp/>can_RxMsgs[posRxMsgs].<ref refid="structCAN__MSG__RX__TYPE_1a71f515413521c3b71c0ddbb5ac3b243b" kindref="member">fifo</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>.FilterNumber<sp/>=<sp/>filterNumber;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_CAN_ConfigFilter(ptrHcan,<sp/>&amp;<ref refid="can_8c_1ac997e9b383c699d06caa088a64dbac90" kindref="member">sFilterConfig</ref>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filterNumber++;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posRxMsgs++;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Too<sp/>many<sp/>filterbanks<sp/>needed!<sp/>Check<sp/>the<sp/>value<sp/>of<sp/>CAN_NUMBER_OF_FILTERBANKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>correct,<sp/>try<sp/>to<sp/>reduce<sp/>the<sp/>IDs<sp/>through<sp/>masks<sp/>or<sp/>optimize<sp/>used<sp/>filter<sp/>bank<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>different<sp/>filter<sp/>cases<sp/>can<sp/>be<sp/>evaluated<sp/>in<sp/>numberOfDifferentIDs[].<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filter<sp/>bank<sp/>as<sp/>many<sp/>messages<sp/>as<sp/>followed:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>IDs<sp/>in<sp/>list<sp/>mode<sp/>16bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>IDs<sp/>in<sp/>list<sp/>mode<sp/>32bit<sp/>and<sp/>mask<sp/>mode<sp/>16bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>ID<sp/>in<sp/>32bit<sp/>mask<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" kindref="member">DIAG_CH_CAN_INIT_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>2,<sp/>NULL);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="can_8c_1a68dc0bb72e3070c318b5c7b0ca98892a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="can_8c_1a68dc0bb72e3070c318b5c7b0ca98892a" kindref="member">CAN_NumberOfNeededFilters</ref>(<ref refid="structCAN__MSG__RX__TYPE" kindref="compound">CAN_MSG_RX_TYPE_s</ref>*<sp/>can_RxMsgs,<sp/>uint8_t*<sp/>numberOfDifferentIDs)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>retVal<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>so<sp/>save<sp/>the<sp/>number<sp/>of<sp/>filters<sp/>from<sp/>CAN1<sp/>and<sp/>add<sp/>to<sp/>the<sp/>ones<sp/>from<sp/>CAN0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>can_rx_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs<sp/><sp/>==<sp/><sp/>&amp;<ref refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" kindref="member">can0_RxMsgs</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rx_length<sp/>=<sp/><ref refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" kindref="member">can_CAN0_rx_length</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs<sp/><sp/>==<sp/><sp/>&amp;<ref refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" kindref="member">can1_RxMsgs</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rx_length<sp/>=<sp/><ref refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" kindref="member">can_CAN1_rx_length</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rx_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>can_rx_length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs<sp/><sp/>==<sp/><sp/>&amp;<ref refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" kindref="member">can0_RxMsgs</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>buffer<sp/>bypass<sp/>IDs<sp/>link<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/><ref refid="group__CONFIG__CAN_1ga20834704e9a69d64d0b67b32ab068b0b" kindref="member">CAN0_BUFFER_BYPASS_NUMBER_OF_IDs</ref>;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].ID<sp/><sp/>==<sp/><sp/><ref refid="can__cfg_8c_1a94a1d1e04ae4e0a90e6ec1be61d99c63" kindref="member">can0_bufferBypass_RxMsgs</ref>[k])<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bypass<sp/>ID<sp/><sp/>==<sp/><sp/>ID<sp/>in<sp/>message<sp/>receive<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can0_fastLinkIndex[k]<sp/>=<sp/>i;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>for<sp/>can_bufferBypass_RxMsgs[k]<sp/>link<sp/>to<sp/>array<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs<sp/><sp/>==<sp/><sp/>&amp;<ref refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" kindref="member">can1_RxMsgs</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>buffer<sp/>bypass<sp/>IDs<sp/>link<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/><ref refid="group__CONFIG__CAN_1gaa756c8f6c2d26fd59c6e5160cb42e50a" kindref="member">CAN1_BUFFER_BYPASS_NUMBER_OF_IDs</ref>;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" kindref="member">can1_RxMsgs</ref>[i].ID<sp/><sp/>==<sp/><sp/><ref refid="can__cfg_8c_1a28ff322ba9188546f81eaedc80f909ea" kindref="member">can1_bufferBypass_RxMsgs</ref>[k])<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bypass<sp/>ID<sp/><sp/>==<sp/><sp/>ID<sp/>in<sp/>message<sp/>receive<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can1_fastLinkIndex[k]<sp/>=<sp/>i;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>for<sp/>can1_bufferBypass_RxMsgs[k]<sp/>link<sp/>to<sp/>array<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].mask<sp/><sp/>==<sp/><sp/>0<sp/>&amp;&amp;<sp/>IS_CAN_STDID(can_RxMsgs[i].ID))<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID<sp/>List<sp/>mode<sp/>16bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].fifo<sp/><sp/>==<sp/><sp/>CAN_FIFO0)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfDifferentIDs[<ref refid="can_8c_1a7e3d6e850c79d86d2edc5e80f3b35961" kindref="member">ID_16BIT_FIFO0</ref>]++;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].fifo<sp/><sp/>==<sp/><sp/>CAN_FIFO1)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfDifferentIDs[<ref refid="can_8c_1a65e8bf3c09172364d402f30ddb57ff78" kindref="member">ID_16BIT_FIFO1</ref>]++;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invalid<sp/>FIFO<sp/>selection;<sp/>check<sp/>can_RxMsgs[i].fifo<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" kindref="member">DIAG_CH_CAN_INIT_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>3,<sp/>NULL);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].mask<sp/><sp/>==<sp/><sp/>0<sp/>&amp;&amp;<sp/>IS_CAN_EXTID(can_RxMsgs[i].ID))<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ID<sp/>List<sp/>mode<sp/>32bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].fifo<sp/><sp/>==<sp/><sp/>CAN_FIFO0)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfDifferentIDs[<ref refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" kindref="member">ID_32BIT_FIFO0</ref>]++;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].fifo<sp/><sp/>==<sp/><sp/>CAN_FIFO1)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfDifferentIDs[<ref refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" kindref="member">ID_32BIT_FIFO1</ref>]++;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invalid<sp/>FIFO<sp/>selection;<sp/>check<sp/>can_RxMsgs[i].fifo<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" kindref="member">DIAG_CH_CAN_INIT_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>4,<sp/>NULL);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].mask<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>IS_CAN_STDID(can_RxMsgs[i].ID))<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mask<sp/>mode<sp/>16bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].fifo<sp/><sp/>==<sp/><sp/>CAN_FIFO0)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfDifferentIDs[<ref refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" kindref="member">MSK_16BIT_FIFO0</ref>]++;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].fifo<sp/><sp/>==<sp/><sp/>CAN_FIFO1)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfDifferentIDs[<ref refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" kindref="member">MSK_16BIT_FIFO1</ref>]++;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invalid<sp/>FIFO<sp/>selection;<sp/>check<sp/>can_RxMsgs[i].fifo<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" kindref="member">DIAG_CH_CAN_INIT_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>5,<sp/>NULL);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_RxMsgs[i].mask<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>IS_CAN_EXTID(can_RxMsgs[i].ID))<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mask<sp/>mode<sp/>32bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numberOfDifferentIDs[<ref refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" kindref="member">MSK_32BIT</ref>]++;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invalid<sp/>ID<sp/>&gt;<sp/>IS_CAN_EXTID;<sp/>check<sp/>can_RxMsgs[i].ID<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd21d83f3c9be9f8e626670e20cde1f7" kindref="member">DIAG_CH_CAN_INIT_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>6,<sp/>NULL);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numberOfDifferentIDs[i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>+=<sp/>(numberOfDifferentIDs[i]<sp/>+<sp/>2)<sp/>/<sp/>4;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>IDs<sp/>per<sp/>filter;<sp/>rounding<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numberOfDifferentIDs[i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>+=<sp/>(numberOfDifferentIDs[i]<sp/>+<sp/>1)<sp/>/<sp/>2;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>IDs<sp/>per<sp/>filter;<sp/>rounding<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numberOfDifferentIDs[<ref refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" kindref="member">MSK_32BIT</ref>]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>+=<sp/>numberOfDifferentIDs[6];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>ID<sp/>per<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="can_8c_1a8975fdc25f90009f3de12e5446010eec" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="can_8c_1a8975fdc25f90009f3de12e5446010eec" kindref="member">CAN_GetNextID</ref>(<ref refid="structCAN__MSG__RX__TYPE" kindref="compound">CAN_MSG_RX_TYPE_s</ref>*<sp/>can_RxMsgs,<sp/>uint8_t<sp/>numberOfRxIDs,<sp/>uint8_t<sp/>startIndex,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>filterCase)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>i<sp/>=<sp/>startIndex;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>numberOfRxIDs)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterCase<sp/><sp/>==<sp/><sp/><ref refid="can_8c_1a7e3d6e850c79d86d2edc5e80f3b35961" kindref="member">ID_16BIT_FIFO0</ref><sp/>&amp;&amp;<sp/>can_RxMsgs[i].mask<sp/>==<sp/>0&amp;&amp;<sp/>IS_CAN_STDID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>can_RxMsgs[i].fifo<sp/>==<sp/>CAN_FIFO0)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterCase<sp/>==<sp/><ref refid="can_8c_1a65e8bf3c09172364d402f30ddb57ff78" kindref="member">ID_16BIT_FIFO1</ref><sp/>&amp;&amp;<sp/>can_RxMsgs[i].mask<sp/>==<sp/>0&amp;&amp;<sp/>IS_CAN_STDID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>can_RxMsgs[i].fifo<sp/>==<sp/>CAN_FIFO1)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterCase<sp/>==<sp/><ref refid="can_8c_1a4d7b25eb881e220832caa35d8c5f6440" kindref="member">ID_32BIT_FIFO0</ref><sp/>&amp;&amp;<sp/>can_RxMsgs[i].mask<sp/>==<sp/>0&amp;&amp;<sp/>!IS_CAN_STDID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>IS_CAN_EXTID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>can_RxMsgs[i].fifo<sp/>==<sp/>CAN_FIFO0)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterCase<sp/>==<sp/><ref refid="can_8c_1ab0bee15a564ce968d2c8224d84985a77" kindref="member">ID_32BIT_FIFO1</ref><sp/>&amp;&amp;<sp/>can_RxMsgs[i].mask<sp/>==<sp/>0&amp;&amp;<sp/>!IS_CAN_STDID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>IS_CAN_EXTID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>can_RxMsgs[i].fifo<sp/>==<sp/>CAN_FIFO1)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterCase<sp/>==<sp/><ref refid="can_8c_1a3a274ce17b703b46b4581e4a3b3c82f6" kindref="member">MSK_16BIT_FIFO0</ref><sp/>&amp;&amp;<sp/>can_RxMsgs[i].mask<sp/>&gt;<sp/>0&amp;&amp;<sp/>IS_CAN_STDID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>can_RxMsgs[i].fifo<sp/>==<sp/>CAN_FIFO0)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterCase<sp/>==<sp/><ref refid="can_8c_1ad4e81e93ae09b61a4206df0749f8402c" kindref="member">MSK_16BIT_FIFO1</ref><sp/>&amp;&amp;<sp/>can_RxMsgs[i].mask<sp/>&gt;<sp/>0&amp;&amp;<sp/>IS_CAN_STDID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>can_RxMsgs[i].fifo<sp/>==<sp/>CAN_FIFO1)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filterCase<sp/>==<sp/><ref refid="can_8c_1ac3df4b3032d6e1e2a5dc9aace1aa0065" kindref="member">MSK_32BIT</ref><sp/>&amp;&amp;<sp/>can_RxMsgs[i].mask<sp/>&gt;<sp/>0&amp;&amp;<sp/>!IS_CAN_STDID(can_RxMsgs[i].ID)<sp/>&amp;&amp;<sp/>IS_CAN_EXTID(can_RxMsgs[i].ID))<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/><sp/>Interrupt<sp/>handling</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>****************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574" refid="can_8h_1a539bc7c8da4f1a8724915582aaf4dee5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a539bc7c8da4f1a8724915582aaf4dee5" kindref="member">CAN_TX_IRQHandler</ref>(CAN_HandleTypeDef*<sp/>ptrHcan)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>End<sp/>of<sp/>transmission<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_TME))<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((__HAL_CAN_TRANSMIT_STATUS(ptrHcan,<sp/>CAN_TXMAILBOX_0))</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(__HAL_CAN_TRANSMIT_STATUS(ptrHcan,<sp/>CAN_TXMAILBOX_1))</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(__HAL_CAN_TRANSMIT_STATUS(ptrHcan,<sp/>CAN_TXMAILBOX_2)))<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>transmit<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a7527dda2064eca2a8785fd7f8be134d1" kindref="member">CAN_Disable_Transmit_IT</ref>(ptrHcan);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="can_8h_1a79338c20357e7247284f0009552d93e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a79338c20357e7247284f0009552d93e2" kindref="member">CAN_RX_IRQHandler</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>CAN_HandleTypeDef*<sp/>ptrHcan)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>End<sp/>of<sp/>reception<sp/>flag<sp/>for<sp/>FIFO0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_FMP0))<sp/>&amp;&amp;<sp/>(__HAL_CAN_MSG_PENDING(ptrHcan,<sp/>CAN_FIFO0)<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>receive<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a5e6080405cd793da60708daac0f18dd1" kindref="member">CAN_RxMsg</ref>(canNode,<sp/>ptrHcan,<sp/>CAN_FIFO0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>towards<sp/>HAL_CAN_IRQHandler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>End<sp/>of<sp/>reception<sp/>flag<sp/>for<sp/>FIFO1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_FMP1))<sp/>&amp;&amp;<sp/>(__HAL_CAN_MSG_PENDING(ptrHcan,<sp/>CAN_FIFO1)<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>receive<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a5e6080405cd793da60708daac0f18dd1" kindref="member">CAN_RxMsg</ref>(canNode,<sp/>ptrHcan,<sp/>CAN_FIFO1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>towards<sp/>HAL_CAN_IRQHandler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602" refid="can_8h_1a9820425942a5c033cca31ddbe7101ff9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a9820425942a5c033cca31ddbe7101ff9" kindref="member">CAN_Error_IRQHandler</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>CAN_HandleTypeDef*<sp/>ptrHcan)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCAN__ERROR" kindref="compound">CAN_ERROR_s</ref>*<sp/>errorStruct;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/>==<sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct<sp/>=<sp/>&amp;CAN1_errorStruct;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct<sp/>=<sp/>&amp;CAN0_errorStruct;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>Error<sp/>Warning<sp/>Flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((__HAL_CAN_GET_FLAG(ptrHcan,<sp/>CAN_FLAG_EWG))<sp/>&amp;&amp;<sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_EWG))</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_ERR)))<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>EWG<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>bit<sp/>is<sp/>set<sp/>by<sp/>hardware<sp/>when<sp/>the<sp/>warning<sp/>limit<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_EWG;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reached<sp/>(Receive<sp/>Error<sp/>Counter<sp/>or<sp/>Transmit<sp/>Error<sp/>Counter&gt;=96)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[0]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>until<sp/>error<sp/>counter<sp/>127<sp/>write<sp/>error<sp/>frames<sp/>dominant<sp/>on<sp/>can<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>error<sp/>warning<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>Error<sp/>Warning<sp/>Flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_CAN_CLEAR_FLAG(ptrHcan,<sp/>CAN_FLAG_EWG);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>Error<sp/>Passive<sp/>Flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((__HAL_CAN_GET_FLAG(ptrHcan,<sp/>CAN_FLAG_EPV))<sp/>&amp;&amp;<sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_EPV))</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_ERR)))<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>EPV<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>bit<sp/>is<sp/>set<sp/>by<sp/>hardware<sp/>when<sp/>the<sp/>Error<sp/>Passive<sp/>limit<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_EPV;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reached<sp/>(Receive<sp/>Error<sp/>Counter<sp/>or<sp/>Transmit<sp/>Error<sp/>Counter&gt;127)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[1]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>error<sp/>frames<sp/>recessive<sp/>on<sp/>can<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>error<sp/>passive<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>Error<sp/>Passive<sp/>Flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_CAN_CLEAR_FLAG(ptrHcan,<sp/>CAN_FLAG_EPV);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>Bus-Off<sp/>Flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((__HAL_CAN_GET_FLAG(ptrHcan,<sp/>CAN_FLAG_BOF))<sp/>&amp;&amp;<sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_BOF))</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_ERR)))<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>BOF<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>bit<sp/>is<sp/>set<sp/>by<sp/>hardware<sp/>when<sp/>it<sp/>enters<sp/>the<sp/>bus-off<sp/>state.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_BOF;<sp/><sp/></highlight><highlight class="comment">//<sp/>bus-off<sp/>state<sp/>is<sp/>entered<sp/>on<sp/>TEC<sp/>overflow,<sp/>greater<sp/>than<sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[2]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>bus-off<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>Bus-Off<sp/>Flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_CAN_CLEAR_FLAG(ptrHcan,<sp/>CAN_FLAG_BOF);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>Last<sp/>error<sp/>code<sp/>Flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!HAL_IS_BIT_CLR(ptrHcan-&gt;Instance-&gt;ESR,<sp/>CAN_ESR_LEC))<sp/>&amp;&amp;<sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_LEC))</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(__HAL_CAN_GET_IT_SOURCE(ptrHcan,<sp/>CAN_IT_ERR)))<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ptrHcan-&gt;Instance-&gt;ESR<sp/>&amp;<sp/>CAN_ESR_LEC)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(CAN_ESR_LEC_0):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STUFF<sp/>ERROR<sp/>---<sp/>When<sp/>five<sp/>consecutive<sp/>bits<sp/>of<sp/>the<sp/>same<sp/>level<sp/>have<sp/>been<sp/>transmitted<sp/>by<sp/>a<sp/>node,<sp/>it<sp/>will<sp/>add<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>STF<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sixth<sp/>bit<sp/>of<sp/>the<sp/>opposite<sp/>level<sp/>to<sp/>the<sp/>outgoing<sp/>bit<sp/>stream.<sp/>The<sp/>receivers<sp/>will<sp/>remove<sp/><sp/>this<sp/>extra<sp/>bit.This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_STF;<sp/><sp/></highlight><highlight class="comment">//<sp/>done<sp/>to<sp/>avoid<sp/>excessive<sp/>DC<sp/>components<sp/>on<sp/>the<sp/>bus,<sp/>but<sp/>it<sp/>also<sp/>gives<sp/>the<sp/>receivers<sp/>an<sp/>extra<sp/>opportunity<sp/>to<sp/>detect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>errors:<sp/>if<sp/>more<sp/>than<sp/>five<sp/>consecutive<sp/>bits<sp/>of<sp/>the<sp/>same<sp/>level<sp/>occurs<sp/>on<sp/>the<sp/>bus,<sp/>a<sp/>Stuff<sp/>Error<sp/>is<sp/>signaled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[3]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>stuff<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(CAN_ESR_LEC_1):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FORM<sp/>ERROR<sp/>---<sp/>Some<sp/>parts<sp/>of<sp/>the<sp/>CAN<sp/>message<sp/>have<sp/>a<sp/>fixed<sp/>format,<sp/>i.e.<sp/>the<sp/>standard<sp/>defines<sp/>exactly<sp/>what<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>FOR<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>occur<sp/>and<sp/>when.<sp/>(Those<sp/>parts<sp/>are<sp/>the<sp/>CRC<sp/>Delimiter,<sp/>ACK<sp/>Delimiter,<sp/>End<sp/>of<sp/>Frame,<sp/>and<sp/>also<sp/>the<sp/>Intermission,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_FOR;<sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>there<sp/>are<sp/>some<sp/>extra<sp/>special<sp/>error<sp/>checking<sp/>rules<sp/>for<sp/>that.)<sp/>If<sp/>a<sp/>CAN<sp/>controller<sp/>detects<sp/>an<sp/>invalid<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>one<sp/>of<sp/>these<sp/>fixed<sp/>fields,<sp/>a<sp/>Form<sp/>Error<sp/>is<sp/>signaled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[4]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>form<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(CAN_ESR_LEC_1<sp/>|<sp/>CAN_ESR_LEC_0):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ACKNOWLEDGMENT<sp/>ERROR<sp/>---<sp/>All<sp/>nodes<sp/>on<sp/>the<sp/>bus<sp/>that<sp/>correctly<sp/>receives<sp/>a<sp/>message<sp/>(regardless<sp/>of<sp/>their<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>ACK<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interested<sp/>of<sp/>its<sp/>contents<sp/>or<sp/>not)<sp/>are<sp/>expected<sp/>to<sp/>send<sp/>a<sp/>dominant<sp/>level<sp/>in<sp/>the<sp/>so-called<sp/>Acknowledgement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_ACK;<sp/><sp/></highlight><highlight class="comment">//<sp/>Slot<sp/>in<sp/>the<sp/>message.<sp/>The<sp/>transmitter<sp/>will<sp/>transmit<sp/>a<sp/>recessive<sp/>level<sp/>here.<sp/>If<sp/>the<sp/>transmitter<sp/>can<sp/>detect<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dominant<sp/>level<sp/>in<sp/>the<sp/>ACK<sp/>slot,<sp/>an<sp/>Acknowledgement<sp/>Error<sp/>is<sp/>signaled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[5]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>acknowledgment<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(CAN_ESR_LEC_2):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BIT<sp/>RECESSIVE<sp/>ERROR<sp/>---<sp/>Each<sp/>transmitter<sp/>on<sp/>the<sp/>CAN<sp/>bus<sp/>monitors<sp/>(i.e.<sp/>reads<sp/>back)<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>BR<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transmitted<sp/>signal<sp/>level.<sp/>If<sp/>the<sp/>bit<sp/>level<sp/>actually<sp/>read<sp/>differs<sp/>from<sp/>the<sp/>one<sp/>transmitted,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_BR;<sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>Bit<sp/>Error<sp/>(No<sp/>bit<sp/>error<sp/>is<sp/>raised<sp/>during<sp/>the<sp/>arbitration<sp/>process.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[6]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>bit<sp/>recessive<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(CAN_ESR_LEC_2<sp/>|<sp/>CAN_ESR_LEC_0):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BIT<sp/>DOMINANT<sp/>ERROR<sp/>---<sp/>Each<sp/>transmitter<sp/>on<sp/>the<sp/>CAN<sp/>bus<sp/>monitors<sp/>(i.e.<sp/>reads<sp/>back)<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>BD<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transmitted<sp/>signal<sp/>level.<sp/>If<sp/>the<sp/>bit<sp/>level<sp/>actually<sp/>read<sp/>differs<sp/>from<sp/>the<sp/>one<sp/>transmitted,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_BD;<sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>Bit<sp/>Error<sp/>(No<sp/>bit<sp/>error<sp/>is<sp/>raised<sp/>during<sp/>the<sp/>arbitration<sp/>process.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[7]++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>bit<sp/>dominant<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(CAN_ESR_LEC_2<sp/>|<sp/>CAN_ESR_LEC_1):<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CRC<sp/>ERROR<sp/>---<sp/>Each<sp/>message<sp/>features<sp/>a<sp/>15-bit<sp/>Cyclic<sp/>Redundancy<sp/>Checksum<sp/>(CRC),<sp/>and<sp/>any<sp/>node<sp/>that<sp/>detects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>CRC<sp/>error<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>different<sp/>CRC<sp/>in<sp/>the<sp/>message<sp/>than<sp/>what<sp/>it<sp/>has<sp/>calculated<sp/>itself<sp/>will<sp/>signal<sp/>an<sp/>CRC<sp/>Error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>|=<sp/>HAL_CAN_ERROR_CRC;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a643ca16de99d353516135aeae994b57a" kindref="member">canErrorCounter</ref>[8]++;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>error<sp/>occurrence<sp/>of<sp/>crc<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>Last<sp/>error<sp/>code<sp/>Flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;Instance-&gt;ESR<sp/>&amp;=<sp/>~(CAN_ESR_LEC);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>Error<sp/>callback<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrHcan-&gt;ErrorCode<sp/>!=<sp/>HAL_CAN_ERROR_NONE)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>last<sp/>error<sp/>code<sp/>in<sp/>CAN_errorStruct<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a207a999831105f1b29bacc9d16d37acf" kindref="member">canError</ref><sp/>=<sp/>ptrHcan-&gt;ErrorCode;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>error<sp/>time<sp/>and<sp/>date<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a8667bb8ae1c3874db7486422264487c4" kindref="member">previous_timestamp</ref><sp/>=<sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a00bee8727f74d498cf77ab7ef41368a8" kindref="member">timestamp</ref>;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorStruct-&gt;<ref refid="structCAN__ERROR_1a00bee8727f74d498cf77ab7ef41368a8" kindref="member">timestamp</ref><sp/>=<sp/><ref refid="mcu_8c_1a09e5f493b1f3dc15a07b7b72ad69cede" kindref="member">MCU_GetTimeStamp</ref>();</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1aa4dbf86d1f59d72beeb24bffd2269b75" kindref="member">CAN_ErrorCallback</ref>(ptrHcan);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>SCE<sp/>Interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DISABLE_IT(ptrHcan,<sp/>CAN_IT_BOF);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DISABLE_IT(ptrHcan,<sp/>CAN_IT_WKU);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DISABLE_IT(ptrHcan,<sp/>CAN_IT_SLK);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DISABLE_IT(ptrHcan,<sp/>CAN_IT_EWG);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DISABLE_IT(ptrHcan,<sp/>CAN_IT_EPV);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DISABLE_IT(ptrHcan,<sp/>CAN_IT_LEC);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DISABLE_IT(ptrHcan,<sp/>CAN_IT_ERR);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CAN<sp/>error<sp/>code<sp/>to<sp/>none<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrHcan-&gt;ErrorCode<sp/>=<sp/>HAL_CAN_ERROR_NONE;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>CAN<sp/>state<sp/>ready<sp/>to<sp/>be<sp/>able<sp/>to<sp/>start<sp/>again<sp/>the<sp/>process<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrHcan-&gt;State<sp/>=<sp/>HAL_CAN_STATE_READY;</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="732" refid="can_8c_1a7527dda2064eca2a8785fd7f8be134d1" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a7527dda2064eca2a8785fd7f8be134d1" kindref="member">CAN_Disable_Transmit_IT</ref>(CAN_HandleTypeDef*<sp/>ptrHcan)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>Transmit<sp/>mailbox<sp/>empty<sp/>Interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>__HAL_CAN_DISABLE_IT(ptrHcan,<sp/>CAN_IT_TME);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrHcan-&gt;State<sp/><sp/>==<sp/><sp/>HAL_CAN_STATE_BUSY_TX_RX)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Change<sp/>CAN<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;State<sp/>=<sp/>HAL_CAN_STATE_BUSY_RX;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Change<sp/>CAN<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;State<sp/>=<sp/>HAL_CAN_STATE_READY;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_USE_TX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrHcan-&gt;Instance<sp/><sp/>==<sp/><sp/>CAN2)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a8f33c36f63d1d1f1eef92f5fc3e44d20" kindref="member">CAN_TxCpltCallback</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_USE_TX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>for<sp/>callback,<sp/>if<sp/>no<sp/>buffer<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrHcan-&gt;Instance<sp/><sp/>==<sp/><sp/>CAN1)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transmission<sp/>complete<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a8f33c36f63d1d1f1eef92f5fc3e44d20" kindref="member">CAN_TxCpltCallback</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="766" refid="can_8c_1a8f33c36f63d1d1f1eef92f5fc3e44d20" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a8f33c36f63d1d1f1eef92f5fc3e44d20" kindref="member">CAN_TxCpltCallback</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCAN__TX__BUFFER" kindref="compound">CAN_TX_BUFFER_s</ref>*<sp/>can_txbuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer<sp/>=<sp/>&amp;can0_txbuffer;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer<sp/>=<sp/>&amp;can1_txbuffer;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_txbuffer<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>Error<sp/>during<sp/>start<sp/>of<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref><sp/><sp/>==<sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref>)</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref>].<ref refid="structCAN__TX__BUFFERELEMENT_1af12470bc6b1485391eed1ca2cdf19539" kindref="member">newMsg</ref><sp/><sp/>==<sp/><sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>transmit,<sp/>buffer<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="can_8c_1a1aef8b8c5b4c2a4e50033d65630a473e" kindref="member">CAN_TxMsgBuffer</ref>(canNode);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retVal<sp/><sp/>==<sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>during<sp/>transmission,<sp/>retransmit<sp/>message<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>transmit<sp/>buffer<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="806" refid="can_8c_1aa4dbf86d1f59d72beeb24bffd2269b75" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1aa4dbf86d1f59d72beeb24bffd2269b75" kindref="member">CAN_ErrorCallback</ref>(CAN_HandleTypeDef*<sp/>ptrHcan)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*<sp/><sp/>Transmit<sp/>message</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>****************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814" refid="can_8h_1ae507124701ea8830a9bea774d8ed38cb" refkind="member"><highlight class="normal"><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>uint32_t<sp/>msgID,<sp/>uint8_t*<sp/>ptrMsgData,<sp/>uint32_t<sp/>msgLength,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>RTR)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>CanTxMsgTypeDef<sp/>Message;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_HandleTypeDef<sp/>*ptrHcan;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" kindref="member">canNode0_listenonly_mode</ref>)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" kindref="member">canNode1_listenonly_mode</ref>)</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((IS_CAN_STDID(msgID)<sp/>||<sp/>IS_CAN_EXTID(msgID))<sp/>&amp;&amp;<sp/>IS_CAN_DLC(msgLength)<sp/>&amp;&amp;<sp/>ptrHcan<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_CAN_STDID(msgID))<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Message.StdId<sp/>=<sp/>msgID;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Message.IDE<sp/>=<sp/>CAN_ID_STD;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Message.ExtId<sp/>=<sp/>msgID;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Message.IDE<sp/>=<sp/>CAN_ID_EXT;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Message.DLC<sp/>=<sp/>msgLength;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>msgLength;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>message<sp/>data<sp/>in<sp/>handle<sp/>transmit<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Message.Data[i]<sp/>=<sp/>ptrMsgData[i];</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Message.RTR<sp/>=<sp/>RTR;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pTxMsg<sp/>=<sp/>&amp;Message;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>HAL_CAN_Transmit_IT(ptrHcan);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860" refid="can_8h_1ad7386c0b7048c957b8453b6492fb544f" refkind="member"><highlight class="normal"><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1ad7386c0b7048c957b8453b6492fb544f" kindref="member">CAN_Send</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>uint32_t<sp/>msgID,<sp/>uint8_t*<sp/>ptrMsgData,<sp/>uint32_t<sp/>msgLength,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>RTR)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>tmptxbuffer_wr;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCAN__TX__BUFFER" kindref="compound">CAN_TX_BUFFER_s</ref>*<sp/>can_txbuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer<sp/>=<sp/>&amp;can0_txbuffer;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer<sp/>=<sp/>&amp;can1_txbuffer;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_txbuffer<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os_8c_1a5573d7c2221a3f3b9cfe5c109603b441" kindref="member">OS_TaskEnter_Critical</ref>();</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmptxbuffer_wr<sp/>=<sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref>;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmptxbuffer_wr<sp/><sp/>==<sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref>)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1af12470bc6b1485391eed1ca2cdf19539" kindref="member">newMsg</ref><sp/><sp/>==<sp/><sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>buffer<sp/>space<sp/>for<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref>++;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref><sp/>=<sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref><sp/>%<sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1ab8226696c9a33665d4b0dcddd33466d9" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref>++;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref><sp/>=<sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref><sp/>%<sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1ab8226696c9a33665d4b0dcddd33466d9" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os_8c_1a7e5b7892152952d2109c89baa0add1a8" kindref="member">OS_TaskExit_Critical</ref>();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retVal<sp/><sp/>==<sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref><sp/>&amp;&amp;<sp/>(IS_CAN_STDID(msgID)<sp/>||<sp/>IS_CAN_EXTID(msgID))<sp/>&amp;&amp;<sp/>IS_CAN_DLC(msgLength))<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>buffer<sp/>free<sp/>and<sp/>valid<sp/>CAN<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1af12470bc6b1485391eed1ca2cdf19539" kindref="member">newMsg</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_CAN_STDID(msgID))<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.StdId<sp/>=<sp/>msgID;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.IDE<sp/>=<sp/>CAN_ID_STD;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>use<sp/>extended<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.ExtId<sp/>=<sp/>msgID;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.IDE<sp/>=<sp/>CAN_ID_EXT;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>extended<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.RTR<sp/>=<sp/>RTR;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.DLC<sp/>=<sp/>msgLength;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>length<sp/>of<sp/>the<sp/>frame<sp/>that<sp/>will<sp/>be<sp/>transmitted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>message<sp/>data<sp/>in<sp/>handle<sp/>transmit<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.Data[0]<sp/>=<sp/>ptrMsgData[0];</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.Data[1]<sp/>=<sp/>ptrMsgData[1];</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.Data[2]<sp/>=<sp/>ptrMsgData[2];</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.Data[3]<sp/>=<sp/>ptrMsgData[3];</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.Data[4]<sp/>=<sp/>ptrMsgData[4];</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.Data[5]<sp/>=<sp/>ptrMsgData[5];</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.Data[6]<sp/>=<sp/>ptrMsgData[6];</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[tmptxbuffer_wr].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>.Data[7]<sp/>=<sp/>ptrMsgData[7];</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936" refid="can_8h_1a1aef8b8c5b4c2a4e50033d65630a473e" refkind="member"><highlight class="normal"><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1a1aef8b8c5b4c2a4e50033d65630a473e" kindref="member">CAN_TxMsgBuffer</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCAN__TX__BUFFER" kindref="compound">CAN_TX_BUFFER_s</ref>*<sp/>can_txbuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_HandleTypeDef*<sp/>ptrHcan<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" kindref="member">canNode0_listenonly_mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer<sp/>=<sp/>&amp;can0_txbuffer;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" kindref="member">canNode1_listenonly_mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer<sp/>=<sp/>&amp;can1_txbuffer;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_txbuffer<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os_8c_1a5573d7c2221a3f3b9cfe5c109603b441" kindref="member">OS_TaskEnter_Critical</ref>();</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a0439b3c3a20eb0a4e7d1f6a86fffe78a" kindref="member">ptrWrite</ref><sp/><sp/>==<sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref>)</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref>].<ref refid="structCAN__TX__BUFFERELEMENT_1af12470bc6b1485391eed1ca2cdf19539" kindref="member">newMsg</ref><sp/><sp/>==<sp/><sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>transmit,<sp/>buffer<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pTxMsg<sp/>=<sp/>&amp;can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref>].<ref refid="structCAN__TX__BUFFERELEMENT_1ae0aa1af48a38fb570682c084a2bcf377" kindref="member">msg</ref>;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>HAL_CAN_Transmit_IT(ptrHcan);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retVal<sp/><sp/>==<sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>Error<sp/>during<sp/>start<sp/>of<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a66f70184fa8c6010e665d60793a2c98a" kindref="member">buffer</ref>[can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref>].<ref refid="structCAN__TX__BUFFERELEMENT_1af12470bc6b1485391eed1ca2cdf19539" kindref="member">newMsg</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Msg<sp/>is<sp/>sent,<sp/>set<sp/>newMsg<sp/>to<sp/>0,<sp/>to<sp/>allow<sp/>writing<sp/>of<sp/>new<sp/>data<sp/>in<sp/>buffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref>++;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref><sp/>=<sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1a15f915db60c1a1f4da7e452d003ff691" kindref="member">ptrRead</ref><sp/>%<sp/>can_txbuffer-&gt;<ref refid="structCAN__TX__BUFFER_1ab8226696c9a33665d4b0dcddd33466d9" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>during<sp/>transmission,<sp/>retransmit<sp/>message<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os_8c_1a7e5b7892152952d2109c89baa0add1a8" kindref="member">OS_TaskExit_Critical</ref>();</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>transmit<sp/>buffer<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*<sp/><sp/>Receive<sp/>message</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/>****************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000" refid="can_8c_1a5e6080405cd793da60708daac0f18dd1" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1a5e6080405cd793da60708daac0f18dd1" kindref="member">CAN_RxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>CAN_HandleTypeDef*<sp/>ptrHcan,<sp/>uint8_t<sp/>FIFONumber)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bypassLinkIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>msgID;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_USE_RX_BUFFER<sp/>||<sp/>CAN1_USE_RX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t*<sp/>can_bufferbypass_rxmsgs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bufferbypasslength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCAN__RX__BUFFER" kindref="compound">CAN_RX_BUFFER_s</ref>*<sp/>can_rxbuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCAN__MSG__RX__TYPE" kindref="compound">CAN_MSG_RX_TYPE_s</ref>*<sp/>can_rxmsgs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>can_fastLinkIndex<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>pointer<sp/>on<sp/>respective<sp/>RxBuffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_USE_RX_BUFFER<sp/>&amp;&amp;<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer<sp/>=<sp/>&amp;can1_rxbuffer;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxmsgs<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" kindref="member">can1_RxMsgs</ref>[0];</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_bufferbypass_rxmsgs<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1a28ff322ba9188546f81eaedc80f909ea" kindref="member">can1_bufferBypass_RxMsgs</ref>[0];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferbypasslength<sp/>=<sp/><ref refid="group__CONFIG__CAN_1gaa756c8f6c2d26fd59c6e5160cb42e50a" kindref="member">CAN1_BUFFER_BYPASS_NUMBER_OF_IDs</ref>;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_fastLinkIndex<sp/>=<sp/>&amp;can1_fastLinkIndex[0];</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_USE_RX_BUFFER<sp/>&amp;&amp;<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer<sp/>=<sp/>&amp;can0_rxbuffer;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxmsgs<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" kindref="member">can0_RxMsgs</ref>[0];</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_bufferbypass_rxmsgs<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1a94a1d1e04ae4e0a90e6ec1be61d99c63" kindref="member">can0_bufferBypass_RxMsgs</ref>[0];</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferbypasslength<sp/>=<sp/><ref refid="group__CONFIG__CAN_1ga20834704e9a69d64d0b67b32ab068b0b" kindref="member">CAN0_BUFFER_BYPASS_NUMBER_OF_IDs</ref>;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_fastLinkIndex<sp/>=<sp/>&amp;can0_fastLinkIndex[0];</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>message<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;IDE<sp/>=<sp/>(uint8_t)0x04<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RIR;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ptrHcan-&gt;pRxMsg-&gt;IDE<sp/><sp/>==<sp/><sp/>CAN_ID_STD)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgID<sp/>=<sp/>(uint32_t)0x000007FF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RIR<sp/>&gt;&gt;<sp/>21);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgID<sp/>=<sp/>(uint32_t)0x1FFFFFFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RIR<sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0<sp/>||<sp/>CAN0_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_bufferbypass_rxmsgs<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>needed<sp/>when<sp/>messages<sp/>are<sp/>bypassed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bypassLinkIndex<sp/>=<sp/>0;<sp/>bypassLinkIndex<sp/>&lt;<sp/>bufferbypasslength;<sp/>bypassLinkIndex++)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgID<sp/><sp/>==<sp/><sp/>can_bufferbypass_rxmsgs[bypassLinkIndex])<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bypassLinkIndex<sp/>&gt;=<sp/>bufferbypasslength<sp/>&amp;&amp;<sp/>can_rxbuffer<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#####<sp/>Use<sp/>buffer<sp/>/<sp/>Copy<sp/>data<sp/>in<sp/>buffer<sp/>#####<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_USE_RX_BUFFER<sp/>||<sp/>CAN1_USE_RX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NO<sp/>NEED<sp/>TO<sp/>DISABLE<sp/>INTERRUPTS,<sp/>BECAUSE<sp/>FUNCTION<sp/>IS<sp/>CALLED<sp/>FROM<sp/>ISR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>to<sp/>1<sp/>to<sp/>mark<sp/>message<sp/>as<sp/>new<sp/>received.<sp/>Set<sp/>to<sp/>0<sp/>when<sp/>reading<sp/>message<sp/>from<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a895b465fdf3363e2a9fc59f268a25212" kindref="member">newMsg</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>message<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a47289a987b6ac9eb00f6b7fbc49e49c1" kindref="member">ID</ref><sp/>=<sp/>msgID;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1ae27e8bffe6baf04dc0c60def9531380d" kindref="member">RTR</ref><sp/>=<sp/>(uint8_t)0x02</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RIR;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>DLC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a11f63b433bcf825f9ec1d8b370c6ffd4" kindref="member">DLC</ref><sp/>=<sp/>(uint8_t)0x0F</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDTR;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>data<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[0]<sp/>=<sp/>(uint8_t)0xFF</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[1]<sp/>=<sp/>(uint8_t)0xFF</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[2]<sp/>=<sp/>(uint8_t)0xFF</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[3]<sp/>=<sp/>(uint8_t)0xFF</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[4]<sp/>=<sp/>(uint8_t)0xFF</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[5]<sp/>=<sp/>(uint8_t)0xFF</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[6]<sp/>=<sp/>(uint8_t)0xFF</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[7]<sp/>=<sp/>(uint8_t)0xFF</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>write<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref>++;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref><sp/>=<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref><sp/>%<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a47a5da3da927dbb8aaa8dc0241436c98" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bypassLinkIndex<sp/>&lt;<sp/>bufferbypasslength<sp/>&amp;&amp;<sp/>can_rxmsgs<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>can_fastLinkIndex<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#####<sp/>Buffer<sp/>active<sp/>but<sp/>bypassed<sp/>#####<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0<sp/>||<sp/>CAN0_BUFFER_BYPASS_NUMBER_OF_IDs<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data<sp/>in<sp/>handle<sp/>and<sp/>call<sp/>buffer<sp/>bypass<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>DLC,<sp/>RTR;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>DLC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DLC<sp/>=<sp/>(uint8_t)0x0F<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDTR;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>data<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastLinkBuffer[0]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastLinkBuffer[1]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastLinkBuffer[2]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastLinkBuffer[3]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastLinkBuffer[4]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastLinkBuffer[5]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastLinkBuffer[6]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastLinkBuffer[7]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>RTR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTR<sp/>=<sp/>(uint8_t)0x02<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RIR;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>callback<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(can_rxmsgs[can_fastLinkIndex[bypassLinkIndex]].func<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxmsgs[can_fastLinkIndex[bypassLinkIndex]].<ref refid="structCAN__MSG__RX__TYPE_1a555019bdf97b724f0435249047d83e71" kindref="member">func</ref>(msgID,<sp/>&amp;fastLinkBuffer[0],<sp/>DLC,<sp/>RTR);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>callback<sp/>function<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a52ba67dd474b373e7179c746f69527f1" kindref="member">CAN_BufferBypass</ref>(canNode,<sp/>msgID,<sp/>&amp;fastLinkBuffer[0],<sp/>DLC,<sp/>RTR);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>#####<sp/>Buffer<sp/>not<sp/>active<sp/>#####<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCAN__MSG__RX__TYPE" kindref="compound">CAN_MSG_RX_TYPE_s</ref>*<sp/>msgRXstruct;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>length;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/>==<sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgRXstruct<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" kindref="member">can0_RxMsgs</ref>[0];</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/><ref refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" kindref="member">can_CAN0_rx_length</ref>;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgRXstruct<sp/>=<sp/>&amp;<ref refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" kindref="member">can1_RxMsgs</ref>[0];</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/><ref refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" kindref="member">can_CAN1_rx_length</ref>;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>Id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;StdId<sp/>=<sp/>msgID;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;RTR<sp/>=<sp/>(uint8_t)0x02<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RIR;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>DLC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;DLC<sp/>=<sp/>(uint8_t)0x0F<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDTR;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>data<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;Data[0]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;Data[1]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;Data[2]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;Data[3]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDLR<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;Data[4]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;Data[5]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;Data[6]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;Data[7]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(ptrHcan-&gt;Instance-&gt;sFIFOMailBox[FIFONumber].RDHR<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgRXstruct[i].ID<sp/>==<sp/>msgID)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interpret<sp/>received<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgRXstruct[i].func<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgRXstruct[i].<ref refid="structCAN__MSG__RX__TYPE_1a555019bdf97b724f0435249047d83e71" kindref="member">func</ref>(msgID,<sp/>ptrHcan-&gt;pRxMsg-&gt;Data,<sp/>ptrHcan-&gt;pRxMsg-&gt;DLC,<sp/>ptrHcan-&gt;pRxMsg-&gt;RTR);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a0b6c703ba61116e6f30f7b3c1aa39e53" kindref="member">CAN_InterpretReceivedMsg</ref>(canNode,<sp/>ptrHcan-&gt;pRxMsg-&gt;StdId,<sp/>ptrHcan-&gt;pRxMsg-&gt;Data,<sp/>ptrHcan-&gt;pRxMsg-&gt;DLC,</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrHcan-&gt;pRxMsg-&gt;RTR);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>the<sp/>FIFO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>FIFO0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FIFONumber<sp/><sp/>==<sp/><sp/>CAN_FIFO0)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_CAN_FIFO_RELEASE(ptrHcan,<sp/>CAN_FIFO0);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>FIFO1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIFONumber<sp/><sp/>==<sp/><sp/>CAN_FIFO1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__HAL_CAN_FIFO_RELEASE(ptrHcan,<sp/>CAN_FIFO1);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>function<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190" refid="can_8h_1a043869ff22e53aac90ce0895bdf60ff6" refkind="member"><highlight class="normal"><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1a043869ff22e53aac90ce0895bdf60ff6" kindref="member">CAN_ReceiveBuffer</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/><ref refid="structCanPdu" kindref="compound">Can_PduType</ref>*<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>E_OK<sp/>is<sp/>returned,<sp/>if<sp/>buffer<sp/>is<sp/>empty<sp/>and<sp/>interpret<sp/>function<sp/>is<sp/>called<sp/>successful<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_USE_RX_BUFFER<sp/>||<sp/>CAN1_USE_RX_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCAN__RX__BUFFER" kindref="compound">CAN_RX_BUFFER_s</ref>*<sp/>can_rxbuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN0_USE_RX_BUFFER<sp/>&amp;&amp;<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer<sp/>=<sp/>&amp;can0_rxbuffer;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN1_USE_RX_BUFFER<sp/>&amp;&amp;<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer<sp/>=<sp/>&amp;can1_rxbuffer;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg<sp/><sp/>==<sp/><sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>pointer<sp/>to<sp/>message<sp/>data<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a324459948678acccea34b4058ee1e43d" kindref="member">ptrWrite</ref></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref>&amp;&amp;<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a895b465fdf3363e2a9fc59f268a25212" kindref="member">newMsg</ref><sp/><sp/>==<sp/><sp/>1<sp/>&amp;&amp;<sp/>can_rxbuffer<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>buffer<sp/>not<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg-&gt;<ref refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" kindref="member">id</ref><sp/>=<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a47289a987b6ac9eb00f6b7fbc49e49c1" kindref="member">ID</ref>;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg-&gt;<ref refid="structCanPdu_1a11b3ccf3bb1e8f402b99a471ea316b29" kindref="member">dlc</ref><sp/>=<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a11f63b433bcf825f9ec1d8b370c6ffd4" kindref="member">DLC</ref>;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg-&gt;<ref refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" kindref="member">sdu</ref>[i]<sp/>=<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a72c38ce2ec3dff93fef0f7500bf8b5dc" kindref="member">Data</ref>[i];</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>to<sp/>0<sp/>to<sp/>mark<sp/>buffer<sp/>entry<sp/>as<sp/>read.<sp/>Set<sp/>to<sp/>1<sp/>when<sp/>writing<sp/>message<sp/>into<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a760c52f2e809f30fa0ea5be9c76bf130" kindref="member">buffer</ref>[can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref>].<ref refid="structCAN__RX__BUFFERELEMENT_1a895b465fdf3363e2a9fc59f268a25212" kindref="member">newMsg</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>to<sp/>next<sp/>buffer<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref>++;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref><sp/>=<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1aebacd6951fe2a6aa010d232d08b27d2e" kindref="member">ptrRead</ref><sp/>%<sp/>can_rxbuffer-&gt;<ref refid="structCAN__RX__BUFFER_1a47a5da3da927dbb8aaa8dc0241436c98" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248" refid="can_8c_1a52ba67dd474b373e7179c746f69527f1" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1a52ba67dd474b373e7179c746f69527f1" kindref="member">CAN_BufferBypass</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>uint32_t<sp/>msgID,<sp/>uint8_t*<sp/>rxData,<sp/>uint8_t<sp/>DLC,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>RTR)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>canData[8];</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>***************************************************************</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Implement<sp/>wished<sp/>functionality<sp/>of<sp/>received<sp/>messages<sp/>here,</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>if<sp/>no<sp/>callback<sp/>function<sp/>in<sp/>CAN_MSG_RX_TYPE_s<sp/>struct<sp/>is<sp/>defined</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*****************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Perform<sp/>SW<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgID<sp/>==<sp/><ref refid="group__CONFIG__CAN_1ga23c0d810cd22f19c43556a65b87a155c" kindref="member">CAN_ID_SOFTWARE_RESET_MSG</ref><sp/>&amp;&amp;<sp/>DLC<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>reset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN<sp/>data<sp/>=<sp/>FF<sp/>FF<sp/>FF<sp/>FF<sp/>FF<sp/>FF<sp/>FF<sp/>FF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DLC;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxData[i]<sp/>!=<sp/>0xFF)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_SW_RESET_WITH_DEVICE_ID<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>CAN<sp/>data<sp/>=<sp/>MCU<sp/>Device<sp/>ID<sp/>Byte<sp/>[0]<sp/>[1]<sp/>[2]<sp/>[3]<sp/>[4]<sp/>[5]<sp/>[6]<sp/>[7]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(rxData[0]<sp/>==<sp/>(uint8_t)mcu_unique_deviceID.off0<sp/>&amp;&amp;<sp/>data[1]<sp/>==<sp/>(uint8_t)(mcu_unique_deviceID.off0<sp/>&gt;&gt;<sp/>8)<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxData[2]<sp/>==<sp/>(uint8_t)(mcu_unique_deviceID.off0<sp/>&gt;&gt;<sp/>16)<sp/>&amp;&amp;<sp/>rxData[3]<sp/>==<sp/>(uint8_t)(mcu_unique_deviceID.off0<sp/>&gt;&gt;<sp/>24)<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxData[4]<sp/>==<sp/>(uint8_t)mcu_unique_deviceID.off32<sp/>&amp;&amp;<sp/>rxData[5]<sp/>==<sp/>(uint8_t)(mcu_unique_deviceID.off32<sp/>&gt;&gt;<sp/>8)<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxData[6]<sp/>==<sp/>(uint8_t)(mcu_unique_deviceID.off32<sp/>&gt;&gt;<sp/>16)<sp/>&amp;&amp;<sp/>rxData[7]<sp/>==<sp/>(uint8_t)(mcu_unique_deviceID.off32<sp/>&gt;&gt;<sp/>24))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxData[0]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="can__cfg_8c_1a5e2181df66b88d357c46c156d5e56aa4" kindref="member">CAN_CheckNodeID</ref>(&amp;data[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1ad1258f7bac42dabd47e8a60e00a5fd42" kindref="member">CAN_CheckUniqueDeviceID</ref>(&amp;data[1])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1a70128542894da8e9abd73fdda0881d20" kindref="member">CAN_CheckBroadcastID</ref>(&amp;data[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reset<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SystemReset();</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgID<sp/>==<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILD_MODULE_ENABLE_BOOTLOADER<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxData[0]<sp/>==<sp/><ref refid="group__CONFIG__CAN_1gac0bc0f76047350682326ff70b45eee2c" kindref="member">CAN_ID_BOOTLOADER_SUBMSG_IDENTIFY</ref><sp/><sp/>&amp;&amp;<sp/>DLC<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Master<sp/>device<sp/>is<sp/>scanning<sp/>the<sp/>network,<sp/>so<sp/>each<sp/>device<sp/>sends<sp/>its<sp/>own<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[0]<sp/>=<sp/><ref refid="group__CONFIG__CAN_1gac0bc0f76047350682326ff70b45eee2c" kindref="member">CAN_ID_BOOTLOADER_SUBMSG_IDENTIFY</ref>;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[1]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref>);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[2]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[3]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[4]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILD_MODULE_ENABLE_NVRAM<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref>);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref>);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[7]<sp/>=<sp/><ref refid="can__cfg_8h_1a69e7d94c13e30ac1500727d583af0c14" kindref="member">CAN_BL_ACK</ref>;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/>node<sp/>identification<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxData[0]<sp/>==<sp/><ref refid="group__CONFIG__CAN_1ga4e7f84c0a452e6a67e9f13045687d95d" kindref="member">CAN_ID_BOOTLOADER_SUBMSG_SILENCE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="can__cfg_8c_1a5e2181df66b88d357c46c156d5e56aa4" kindref="member">CAN_CheckNodeID</ref>(&amp;rxData[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1ad1258f7bac42dabd47e8a60e00a5fd42" kindref="member">CAN_CheckUniqueDeviceID</ref>(&amp;rxData[1])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Master<sp/>device<sp/>requests<sp/>for<sp/>silence<sp/>mode<sp/>(listen<sp/>only,<sp/>stop<sp/>sending<sp/>can<sp/>messages)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[0]<sp/>=<sp/><ref refid="group__CONFIG__CAN_1ga4e7f84c0a452e6a67e9f13045687d95d" kindref="member">CAN_ID_BOOTLOADER_SUBMSG_SILENCE</ref>;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[1]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>@FIXME<sp/>use<sp/>crc32<sp/>of<sp/>all<sp/>96Bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[2]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[3]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[4]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILD_MODULE_ENABLE_NVRAM<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]=(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref>);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]=(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref>);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[7]<sp/>=<sp/><ref refid="can__cfg_8h_1a69e7d94c13e30ac1500727d583af0c14" kindref="member">CAN_BL_ACK</ref>;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/><sp/>silence<sp/>mode<sp/>commit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" kindref="member">canNode0_listenonly_mode</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" kindref="member">canNode1_listenonly_mode</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc=0;<sp/>cc<sp/>&lt;<sp/>10;<sp/>cc++)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mcu_8c_1ad73255284eee7230c9082a9f0e0500f9" kindref="member">MCU_Wait_us</ref>(500);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxData[0]<sp/>==<sp/><ref refid="can__cfg_8h_1a0aed37091214e0e13a3a1d6e2876c1a7" kindref="member">CAN_ID_BOOTLOADER_SUBMSG_SILENCE_FINI</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="can__cfg_8c_1a5e2181df66b88d357c46c156d5e56aa4" kindref="member">CAN_CheckNodeID</ref>(&amp;rxData[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1ad1258f7bac42dabd47e8a60e00a5fd42" kindref="member">CAN_CheckUniqueDeviceID</ref>(&amp;rxData[1])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1a70128542894da8e9abd73fdda0881d20" kindref="member">CAN_CheckBroadcastID</ref>(&amp;rxData[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Master<sp/>device<sp/>requests<sp/>for<sp/>silence<sp/>mode<sp/>(listen<sp/>only,<sp/>stop<sp/>sending<sp/>can<sp/>messages)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[0]<sp/>=<sp/><ref refid="can__cfg_8h_1a0aed37091214e0e13a3a1d6e2876c1a7" kindref="member">CAN_ID_BOOTLOADER_SUBMSG_SILENCE_FINI</ref>;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[1]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>@FIXME<sp/>use<sp/>crc32<sp/>of<sp/>all<sp/>96Bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[2]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[3]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[4]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILD_MODULE_ENABLE_NVRAM<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref>);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref>);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[7]<sp/>=<sp/><ref refid="can__cfg_8h_1a69e7d94c13e30ac1500727d583af0c14" kindref="member">CAN_BL_ACK</ref>;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" kindref="member">canNode0_listenonly_mode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1a52e614be9f1d0b38ade8d5f1dfd52b00" kindref="member">canNode1_listenonly_mode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc=0;<sp/>cc<sp/>&lt;<sp/>10;<sp/>cc++)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mcu_8c_1ad73255284eee7230c9082a9f0e0500f9" kindref="member">MCU_Wait_us</ref>(500);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/>silence<sp/>mode<sp/>finish<sp/>commit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxData[0]<sp/>==<sp/><ref refid="group__CONFIG__CAN_1ga2eacc96e149e4ba38d2013f00238ec5c" kindref="member">CAN_ID_BOOTLOADER_OPEN_BL_SESSION</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="can__cfg_8c_1a5e2181df66b88d357c46c156d5e56aa4" kindref="member">CAN_CheckNodeID</ref>(&amp;rxData[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1ad1258f7bac42dabd47e8a60e00a5fd42" kindref="member">CAN_CheckUniqueDeviceID</ref>(&amp;rxData[1])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1a70128542894da8e9abd73fdda0881d20" kindref="member">CAN_CheckBroadcastID</ref>(&amp;rxData[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" kindref="member">canNode0_listenonly_mode</ref><sp/>==<sp/>1)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>@FIXME<sp/>what<sp/>happens<sp/>if<sp/>one<sp/>device<sp/>is<sp/>not<sp/>in<sp/>listen-only<sp/>mode?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>download<sp/>request<sp/>flag<sp/>for<sp/>application<sp/>SW<sp/>and<sp/>restart<sp/>MCU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>intstate=<sp/>MCU_DisableINT();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(cc=0;cc&lt;100;cc++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MCU_Wait_us(500);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MCU_RestoreINT(intstate);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rtc__cfg_8h_1a9c3d4b75fb2ae8f94d0181220e042d1c" kindref="member">RTC_DOWNLOAD_REQUEST_FLAG</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[0]<sp/>=<sp/><ref refid="group__CONFIG__CAN_1ga2eacc96e149e4ba38d2013f00238ec5c" kindref="member">CAN_ID_BOOTLOADER_OPEN_BL_SESSION</ref>;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[1]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>@FIXME<sp/>use<sp/>crc32<sp/>of<sp/>all<sp/>96Bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[2]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[3]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[4]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILD_MODULE_ENABLE_NVRAM<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref>);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref>);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[7]<sp/>=<sp/><ref refid="can__cfg_8h_1a69e7d94c13e30ac1500727d583af0c14" kindref="member">CAN_BL_ACK</ref>;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" kindref="member">canNode0_listenonly_mode</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Commit<sp/>jumping<sp/>to<sp/>bootloader<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>to<sp/>transmit<sp/>CAN<sp/>messages<sp/>before<sp/>jumping<sp/>into<sp/>boot<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc=0;<sp/>cc<sp/>&lt;<sp/>4;<sp/>cc++)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mcu_8c_1ad73255284eee7230c9082a9f0e0500f9" kindref="member">MCU_Wait_us</ref>(500);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SystemReset();</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="can_8c_1adf1b1f5fa4e9025b882545c3cfd02d3f" kindref="member">canNode0_listenonly_mode</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>all<sp/>other<sp/>device<sp/>will<sp/>go<sp/>in<sp/>standby<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SYSCTRL_SetStateRequest(SYSCTRL_STATE_REQ_STANDBY);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//TODO:<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rtc_8c_1aa0c7fca836406ade332e1e3f1039d8ab" kindref="member">hrtc</ref>.Instance-&gt;BKP4R<sp/>=<sp/>2;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>system<sp/>reset<sp/>and<sp/>stay<sp/>in<sp/>bootloader<sp/>in<sp/>silence<sp/>mode*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_NVIC_SystemReset();</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[0]<sp/>=<sp/><ref refid="group__CONFIG__CAN_1ga2eacc96e149e4ba38d2013f00238ec5c" kindref="member">CAN_ID_BOOTLOADER_OPEN_BL_SESSION</ref>;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[1]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>@FIXME<sp/>use<sp/>crc32<sp/>of<sp/>all<sp/>96Bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[2]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[3]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[4]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILD_MODULE_ENABLE_NVRAM<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref>);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref>);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[7]<sp/>=<sp/><ref refid="can__cfg_8h_1a07b3bfdb3e98f63d106abedc49411b15" kindref="member">CAN_BL_NACK</ref>;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Jumping<sp/>to<sp/>bootloader<sp/>denied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga149aa7c137a5df42d5f64d2da0282d3a" kindref="member">CAN_ID_BOOTLOADER_MSG</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgID<sp/>==<sp/><ref refid="group__CONFIG__CAN_1ga03c5228e8d5d9322abafddb94fac1b63" kindref="member">CAN_ID_NETWORK_NODE_ID</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Response<sp/>to<sp/>message<sp/>only<sp/>if<sp/>actual<sp/>network<sp/>node<sp/>ID,<sp/>broadcast<sp/>address<sp/>or<sp/>crc<sp/>of<sp/>unique<sp/>device<sp/>ID<sp/>is<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="can__cfg_8c_1a5e2181df66b88d357c46c156d5e56aa4" kindref="member">CAN_CheckNodeID</ref>(&amp;rxData[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1ad1258f7bac42dabd47e8a60e00a5fd42" kindref="member">CAN_CheckUniqueDeviceID</ref>(&amp;rxData[1])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>||<sp/>(<ref refid="can__cfg_8c_1a70128542894da8e9abd73fdda0881d20" kindref="member">CAN_CheckBroadcastID</ref>(&amp;rxData[5])<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxData[0]<sp/>==<sp/><ref refid="group__CONFIG__CAN_1gacc2fddea990e0417957aa5e797d498ca" kindref="member">CAN_ID_NETWORK_NODE_ID_SUBMSG_WRITE</ref><sp/><sp/>&amp;&amp;<sp/>DLC<sp/>==<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>network<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[0]<sp/>=<sp/><ref refid="group__CONFIG__CAN_1gacc2fddea990e0417957aa5e797d498ca" kindref="member">CAN_ID_NETWORK_NODE_ID_SUBMSG_WRITE</ref>;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[1]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref>);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[2]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[3]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[4]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>BUILD_MODULE_ENABLE_NVRAM<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref><sp/>=<sp/>(uint16_t)(rxData[6]&lt;&lt;8)<sp/>+<sp/>rxData[5];</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a62312b7c811d29293f5f8f494fa8c502" kindref="member">chksum</ref><sp/>=<sp/><ref refid="eepr__cfg_8c_1ab14595ae571d9012a9650b3e2da964a5" kindref="member">EEPR_CalcChecksum</ref>((uint8_t*)&amp;<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(eepr_board_info)-4);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="eepr__cfg_8c_1a4fbf51938cfadc93ea31f69fe2be0e4f" kindref="member">EEPR_SetChannelData</ref>(<ref refid="eepr__cfg_8h_1a291d4ec50ef4ae6731a6551fd907b4bd" kindref="member">EEPR_CH_BOARD_INFO</ref>,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(eepr_board_info.network_nodeID);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(eepr_board_info.network_nodeID<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref>);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[7]<sp/>=<sp/><ref refid="can__cfg_8h_1a69e7d94c13e30ac1500727d583af0c14" kindref="member">CAN_BL_ACK</ref>;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Confirm<sp/>new<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga03c5228e8d5d9322abafddb94fac1b63" kindref="member">CAN_ID_NETWORK_NODE_ID</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga03c5228e8d5d9322abafddb94fac1b63" kindref="member">CAN_ID_NETWORK_NODE_ID</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rxData[0]<sp/>==<sp/><ref refid="group__CONFIG__CAN_1gaaad99d53332511f290a6f5c9cc4672d7" kindref="member">CAN_ID_NETWORK_NODE_ID_SUBMSG_READ</ref><sp/><sp/>&amp;&amp;<sp/>DLC<sp/>==<sp/>7)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>network<sp/>node<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[0]<sp/>=<sp/><ref refid="group__CONFIG__CAN_1gaaad99d53332511f290a6f5c9cc4672d7" kindref="member">CAN_ID_NETWORK_NODE_ID_SUBMSG_READ</ref>;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[1]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref>);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[2]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[3]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[4]<sp/>=<sp/>(uint8_t)(<ref refid="mcu_8c_1ac898f928970a9d55fcd431ac1fb30ce4" kindref="member">mcu_unique_deviceID</ref>.<ref refid="structMCU__DeviceID__s_1a11610e666fa6c63bcf31b76a7530d799" kindref="member">crc</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>BUILD_MODULE_ENABLE_NVRAM<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref>);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8c_1a11c266ecf2d94361a4f046799b275cb9" kindref="member">eepr_board_info</ref>.<ref refid="structEEPR__BOARD__INFO__s_1a6d09fb4b467032675ca68c8097be8be4" kindref="member">network_nodeID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[5]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref>);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[6]<sp/>=<sp/>(uint8_t)(<ref refid="eepr__cfg_8h_1a2fdb25c1345c0bcfd60e7f3784665bbd" kindref="member">EEPR_DEFAULT_NETWORK_ID</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canData[7]<sp/>=<sp/><ref refid="can__cfg_8h_1a69e7d94c13e30ac1500727d583af0c14" kindref="member">CAN_BL_ACK</ref>;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/>network<sp/>node<sp/>ID<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga03c5228e8d5d9322abafddb94fac1b63" kindref="member">CAN_ID_NETWORK_NODE_ID</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can_8c_1ae507124701ea8830a9bea774d8ed38cb" kindref="member">CAN_TxMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/><ref refid="group__CONFIG__CAN_1ga03c5228e8d5d9322abafddb94fac1b63" kindref="member">CAN_ID_NETWORK_NODE_ID</ref>,<sp/>&amp;canData[0],<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506" refid="can_8c_1a0b6c703ba61116e6f30f7b3c1aa39e53" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="can_8c_1a0b6c703ba61116e6f30f7b3c1aa39e53" kindref="member">CAN_InterpretReceivedMsg</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/>uint32_t<sp/>msgID,<sp/>uint8_t*<sp/>data,<sp/>uint8_t<sp/>DLC,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>RTR)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>***************************************************************</highlight></codeline>
<codeline lineno="1512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Implement<sp/>wished<sp/>functionality<sp/>of<sp/>received<sp/>messages<sp/>here,</highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>if<sp/>no<sp/>callback<sp/>function<sp/>in<sp/>CAN_MSG_RX_TYPE_s<sp/>struct<sp/>is<sp/>defined</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*****************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***************************************</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/>*<sp/><sp/>Sleep<sp/>mode</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/>****************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524" refid="can_8h_1a16f96b3b71b4f4ea6e8e9b0b06f8976c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a16f96b3b71b4f4ea6e8e9b0b06f8976c" kindref="member">CAN_SetSleepMode</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_CAN_Sleep(&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_CAN_Sleep(&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534" refid="can_8h_1a5a81b3e2fbc69b03435aba60dfd61402" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="can_8c_1a5a81b3e2fbc69b03435aba60dfd61402" kindref="member">CAN_WakeUp</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode)<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_CAN_Sleep(&amp;<ref refid="can__cfg_8c_1ad481c533767bb0629c33ffa48f9a02f2" kindref="member">hcan0</ref>);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/><sp/>==<sp/><sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_CAN_Sleep(&amp;<ref refid="can__cfg_8c_1a1618d731d18d69e906e8a357b7cd3c8d" kindref="member">hcan1</ref>);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/can/can.c"/>
  </compounddef>
</doxygen>
