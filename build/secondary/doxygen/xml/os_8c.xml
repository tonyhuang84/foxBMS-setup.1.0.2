<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="os_8c" kind="file" language="C++">
    <compoundname>os.c</compoundname>
    <includes refid="general_8h" local="yes">general.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <includes refid="enginetask_8h" local="yes">enginetask.h</includes>
    <includes refid="appltask_8h" local="yes">appltask.h</includes>
    <includes refid="database_8h" local="yes">database.h</includes>
    <includes refid="sys_8h" local="yes">sys.h</includes>
    <includes refid="nvic_8h" local="yes">nvic.h</includes>
    <includes refid="cansignal_8h" local="yes">cansignal.h</includes>
    <includes refid="can_8h" local="yes">can.h</includes>
    <includes refid="diag_8h" local="yes">diag.h</includes>
    <includes refid="sdram_8h" local="yes">sdram.h</includes>
    <incdepgraph>
      <node id="1800">
        <label>appltask_cfg.h</label>
        <link refid="appltask__cfg_8h"/>
        <childnode refid="1792" relation="include">
        </childnode>
        <childnode refid="1795" relation="include">
        </childnode>
      </node>
      <node id="1801">
        <label>database.h</label>
        <link refid="database_8h"/>
        <childnode refid="1802" relation="include">
        </childnode>
      </node>
      <node id="1812">
        <label>io_package_cfg.h</label>
        <link refid="io__package__cfg_8h"/>
      </node>
      <node id="1815">
        <label>cansignal_cfg.h</label>
        <link refid="cansignal__cfg_8h"/>
        <childnode refid="1816" relation="include">
        </childnode>
      </node>
      <node id="1821">
        <label>rtc.h</label>
        <link refid="rtc_8h"/>
        <childnode refid="1822" relation="include">
        </childnode>
        <childnode refid="1809" relation="include">
        </childnode>
      </node>
      <node id="1793">
        <label>stdint.h</label>
      </node>
      <node id="1802">
        <label>database_cfg.h</label>
        <link refid="database__cfg_8h"/>
        <childnode refid="1803" relation="include">
        </childnode>
      </node>
      <node id="1823">
        <label>sdram.h</label>
        <link refid="sdram_8h"/>
        <childnode refid="1824" relation="include">
        </childnode>
      </node>
      <node id="1806">
        <label>mcu.h</label>
        <link refid="mcu_8h"/>
        <childnode refid="1792" relation="include">
        </childnode>
      </node>
      <node id="1798">
        <label>enginetask_cfg.h</label>
        <link refid="enginetask__cfg_8h"/>
        <childnode refid="1792" relation="include">
        </childnode>
        <childnode refid="1795" relation="include">
        </childnode>
      </node>
      <node id="1796">
        <label>cmsis_os.h</label>
      </node>
      <node id="1803">
        <label>batterysystem_cfg.h</label>
        <link refid="batterysystem__cfg_8h"/>
        <childnode refid="1792" relation="include">
        </childnode>
      </node>
      <node id="1791">
        <label>os.c</label>
        <link refid="os_8c"/>
        <childnode refid="1792" relation="include">
        </childnode>
        <childnode refid="1795" relation="include">
        </childnode>
        <childnode refid="1797" relation="include">
        </childnode>
        <childnode refid="1799" relation="include">
        </childnode>
        <childnode refid="1801" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1807" relation="include">
        </childnode>
        <childnode refid="1814" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1823" relation="include">
        </childnode>
      </node>
      <node id="1795">
        <label>os.h</label>
        <link refid="os_8h"/>
        <childnode refid="1796" relation="include">
        </childnode>
      </node>
      <node id="1809">
        <label>mcu_cfg.h</label>
        <link refid="mcu__cfg_8h"/>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1811" relation="include">
        </childnode>
      </node>
      <node id="1804">
        <label>sys.h</label>
        <link refid="sys_8h"/>
        <childnode refid="1805" relation="include">
        </childnode>
      </node>
      <node id="1813">
        <label>io_mcu_cfg.h</label>
        <link refid="io__mcu__cfg_8h"/>
      </node>
      <node id="1797">
        <label>enginetask.h</label>
        <link refid="enginetask_8h"/>
        <childnode refid="1798" relation="include">
        </childnode>
      </node>
      <node id="1808">
        <label>nvic_cfg.h</label>
        <link refid="nvic__cfg_8h"/>
        <childnode refid="1809" relation="include">
        </childnode>
      </node>
      <node id="1799">
        <label>appltask.h</label>
        <link refid="appltask_8h"/>
        <childnode refid="1800" relation="include">
        </childnode>
      </node>
      <node id="1811">
        <label>io_cfg.h</label>
        <link refid="io__cfg_8h"/>
        <childnode refid="1809" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
        <childnode refid="1813" relation="include">
        </childnode>
      </node>
      <node id="1824">
        <label>sdram_cfg.h</label>
        <link refid="sdram__cfg_8h"/>
        <childnode refid="1793" relation="include">
        </childnode>
      </node>
      <node id="1816">
        <label>can_cfg.h</label>
        <link refid="can__cfg_8h"/>
        <childnode refid="1809" relation="include">
        </childnode>
      </node>
      <node id="1794">
        <label>std_types.h</label>
        <link refid="std__types_8h"/>
      </node>
      <node id="1814">
        <label>cansignal.h</label>
        <link refid="cansignal_8h"/>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1792" relation="include">
        </childnode>
      </node>
      <node id="1817">
        <label>can.h</label>
        <link refid="can_8h"/>
        <childnode refid="1816" relation="include">
        </childnode>
      </node>
      <node id="1807">
        <label>nvic.h</label>
        <link refid="nvic_8h"/>
        <childnode refid="1808" relation="include">
        </childnode>
      </node>
      <node id="1820">
        <label>diag_id_cfg.h</label>
        <link refid="diag__id__cfg_8h"/>
      </node>
      <node id="1792">
        <label>general.h</label>
        <link refid="general_8h"/>
        <childnode refid="1793" relation="include">
        </childnode>
        <childnode refid="1794" relation="include">
        </childnode>
      </node>
      <node id="1819">
        <label>diag_cfg.h</label>
        <link refid="diag__cfg_8h"/>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1820" relation="include">
        </childnode>
        <childnode refid="1821" relation="include">
        </childnode>
      </node>
      <node id="1810">
        <label>stm32f4xx_hal.h</label>
      </node>
      <node id="1805">
        <label>sys_cfg.h</label>
        <link refid="sys__cfg_8h"/>
        <childnode refid="1806" relation="include">
        </childnode>
      </node>
      <node id="1822">
        <label>rtc_cfg.h</label>
        <link refid="rtc__cfg_8h"/>
        <childnode refid="1809" relation="include">
        </childnode>
      </node>
      <node id="1818">
        <label>diag.h</label>
        <link refid="diag_8h"/>
        <childnode refid="1819" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" prot="public" static="no" mutable="no">
        <type><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fb" kindref="member">OS_BOOT_STATE_e</ref></type>
        <definition>volatile OS_BOOT_STATE_e os_boot</definition>
        <argsstring></argsstring>
        <name>os_boot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="60" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="os_8c_1ad858422b7a211f094e302688c3f98917" prot="public" static="no" mutable="no">
        <type><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fb" kindref="member">OS_BOOT_STATE_e</ref></type>
        <definition>volatile OS_BOOT_STATE_e os_safety_state</definition>
        <argsstring></argsstring>
        <name>os_safety_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="61" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="os_8c_1aa87bfae31fe8a496099cd9dfa2aecdf9" prot="public" static="no" mutable="no">
        <type><ref refid="structOS__TIMER__s" kindref="compound">OS_TIMER_s</ref></type>
        <definition>volatile OS_TIMER_s os_timer</definition>
        <argsstring></argsstring>
        <name>os_timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="62" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="os_8c_1adb03983fbd5d3091532895d08f6a4e5a" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t eng_init</definition>
        <argsstring></argsstring>
        <name>eng_init</name>
        <initializer>= <ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="63" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t os_schedulerstarttime</definition>
        <argsstring></argsstring>
        <name>os_schedulerstarttime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scheduler &quot;zero&quot; time for task phase control </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="68" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="os_8c_1a2935ff9d27172624efdc5e36a5bb036c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OS_TimerTrigger</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TimerTrigger</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>increments the system timer os_timer </para>        </briefdescription>
        <detaileddescription>
<para>The os_timer is a runtime-counter, counting the time since the last reset.</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="71" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="264" bodyend="296"/>
        <references refid="structOS__TIMER__s_1a76083e4eee94f37324478b8cc2c0c01e" compoundref="os_8h" startline="114">OS_TIMER_s::Timer_1ms</references>
        <references refid="structOS__TIMER__s_1aba1a640ede3ed9b99b7a40447ec13917" compoundref="os_8h" startline="115">OS_TIMER_s::Timer_10ms</references>
        <references refid="structOS__TIMER__s_1ad89c3f7586f482ce0316a4b70444ca65" compoundref="os_8h" startline="116">OS_TIMER_s::Timer_100ms</references>
        <references refid="structOS__TIMER__s_1afb7037d90ef5ac004b414ad4cda66887" compoundref="os_8h" startline="117">OS_TIMER_s::Timer_sec</references>
        <references refid="structOS__TIMER__s_1a6e0521201d5b6957d7e1f4e4072dd0d4" compoundref="os_8h" startline="118">OS_TIMER_s::Timer_min</references>
        <references refid="structOS__TIMER__s_1ab8f203f52cafc7e660a0f16e9232658e" compoundref="os_8h" startline="119">OS_TIMER_s::Timer_h</references>
        <references refid="structOS__TIMER__s_1abbac9c91aad0cb76d871fe7fcf3bc21e" compoundref="os_8h" startline="120">OS_TIMER_s::Timer_d</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a6f5422e600224458a5f0c216f534db57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TaskInit</definition>
        <argsstring>()</argsstring>
        <name>OS_TaskInit</name>
        <briefdescription>
<para>Initialization the RTOS interface. </para>        </briefdescription>
        <detaileddescription>
<para>The initialization functions inits mutexes, eventgroups and tasks.</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="75" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="75" bodyend="104"/>
        <references refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" compoundref="os_8c" startline="60">os_boot</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fba2077d31d88c2af4e7cf51c93a35c7731" compoundref="os_8h" startline="81">OS_ENG_CREATE_QUEUES</references>
        <references refid="enginetask__cfg_8c_1ac2f41a91ed525e3792d44b13baab99e3" compoundref="enginetask__cfg_8c" startline="94" endline="104">ENG_CreateQueues</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab30a2d0385602f13448cb36660cab949" compoundref="os_8h" startline="82">OS_ENG_CREATE_MUTEX</references>
        <references refid="enginetask__cfg_8c_1ae356447f195edd7e3bdf2fc317f49e46" compoundref="enginetask__cfg_8c" startline="106" endline="108">ENG_CreateMutex</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fba460481803fba51a5d762761dfe911d49" compoundref="os_8h" startline="83">OS_ENG_CREATE_EVENT</references>
        <references refid="enginetask__cfg_8c_1a2c6c4b8deea1c0fe0595434d8079d091" compoundref="enginetask__cfg_8c" startline="110" endline="112">ENG_CreateEvent</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fba350250fb87e00ef401b1ba88b6210c1c" compoundref="os_8h" startline="84">OS_ENG_CREATE_TASKS</references>
        <references refid="enginetask__cfg_8c_1adca639aff16795100f1976d22a1d099d" compoundref="enginetask__cfg_8c" startline="114" endline="144">ENG_CreateTask</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fba2690077fe08b599e901f961bf1900f64" compoundref="os_8h" startline="85">OS_APPL_CREATE_MUTEX</references>
        <references refid="appltask_8c_1a6fa44ea750012fc37aa15130e9a60957" compoundref="appltask_8c" startline="70" endline="72">APPL_CreateMutex</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fba3f96fe12c247965bb35bb0428ff9d356" compoundref="os_8h" startline="86">OS_APPL_CREATE_EVENT</references>
        <references refid="appltask_8c_1a3ac355e656e45203b36403b94143dbdd" compoundref="appltask_8c" startline="74" endline="76">APPL_CreateEvent</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbaacf28b10f6af0bc92783f0042305c155" compoundref="os_8h" startline="87">OS_APPL_CREATE_TASKS</references>
        <references refid="appltask_8c_1a850dd1b4a8624221ab29afb4ae0efa41" compoundref="appltask_8c" startline="78" endline="94">APPL_CreateTask</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a97fd430f36f8b065226e2bff9bad1de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vApplicationIdleHook</definition>
        <argsstring>(void)</argsstring>
        <name>vApplicationIdleHook</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Hook function for the idle task. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="106" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="106" bodyend="109"/>
        <references refid="os_8c_1ace849181954b143dc0187c632605da86" compoundref="os_8c" startline="251" endline="253">OS_IdleTask</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1aa80555e4e2cc33cafc73e340ccf09a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TSK_Engine</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TSK_Engine</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Database-Task The task manages the data exchange with the database and must have a higher task priority than any task using the database. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="112" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="112" bodyend="123"/>
        <references refid="os_8c_1a9f0687e02ddc61f131d2c43d4270542f" compoundref="os_8c" startline="227" endline="249">OS_PostOSInit</references>
        <references refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" compoundref="os_8c" startline="60">os_boot</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" compoundref="os_8h" startline="94">OS_SYSTEM_RUNNING</references>
        <references refid="database_8c_1a1585d5c7665504898be0371c5c6295b9" compoundref="database_8c" startline="108" endline="192">DATA_Task</references>
        <references refid="diag_8c_1af5b8cf38b93979152c6d3d64c6340b03" compoundref="diag_8c" startline="652" endline="706">DIAG_SysMon</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a8f64fac71dfe371cc8b9ac6670519c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TSK_Cyclic_1ms</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TSK_Cyclic_1ms</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>cyclic 1ms-Task, preemptive with TSK_Cyclic_10ms() and TSK_Cyclic_100ms(). </para>        </briefdescription>
        <detaileddescription>
<para>The Task calls OsStartUp() in the very beginning, this is the first active Task. Then the Task is delayed by a phase as defined in eng_tskdef_cyclic_1ms.Phase (in milliseconds). After the phase delay, the cyclic execution starts, the entry time is saved in currentTime. After one cycle, the Task is set to sleep until entry time + eng_tskdef_cyclic_1ms.CycleTime (in milliseconds). The Task calls Job_1ms(), Job_2ms() and Job_5ms().</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="126" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="126" bodyend="149"/>
        <references refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" compoundref="os_8c" startline="60">os_boot</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" compoundref="os_8h" startline="94">OS_SYSTEM_RUNNING</references>
        <references refid="os_8c_1adb03983fbd5d3091532895d08f6a4e5a" compoundref="os_8c" startline="63">eng_init</references>
        <references refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="std__types_8h" startline="43">FALSE</references>
        <references refid="enginetask_8c_1a544d886c3c21cf2c0f967e9aa6f7856b" compoundref="enginetask_8c" startline="61" endline="106">ENG_Init</references>
        <references refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="std__types_8h" startline="42">TRUE</references>
        <references refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" compoundref="os_8c" startline="68">os_schedulerstarttime</references>
        <references refid="enginetask__cfg_8c_1a593e4d302e6eafde29900e03198aa45a" compoundref="enginetask__cfg_8c" startline="50">eng_tskdef_cyclic_1ms</references>
        <references refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" compoundref="os_8h" startline="127">BMS_Task_Definition_s::Phase</references>
        <references refid="os_8c_1a2935ff9d27172624efdc5e36a5bb036c" compoundref="os_8c" startline="264" endline="296">OS_TimerTrigger</references>
        <references refid="enginetask_8c_1a68a74af2a1db1cc404f7fe1ecbcb8963" compoundref="enginetask_8c" startline="108" endline="114">ENG_TSK_Cyclic_1ms</references>
        <references refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" compoundref="os_8h" startline="128">BMS_Task_Definition_s::CycleTime</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a48f7b4b1f01ae62f13ad77b21c51cfdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TSK_Cyclic_10ms</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TSK_Cyclic_10ms</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>cyclic 10ms-Task, preemptive with TSK_Cyclic_1ms() and TSK_Cyclic_100ms(). </para>        </briefdescription>
        <detaileddescription>
<para>Task is delayed by a phase as defined in eng_tskdef_cyclic_10ms.Phase (in milliseconds). After the phase delay, the cyclic execution starts, the entry time is saved in currentTime. After one cycle, the Task is set to sleep until entry time + eng_tskdef_cyclic_10ms.CycleTime (in milliseconds). The task calls Job_10ms() and Job_50ms().</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="152" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="152" bodyend="169"/>
        <references refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" compoundref="os_8c" startline="60">os_boot</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" compoundref="os_8h" startline="94">OS_SYSTEM_RUNNING</references>
        <references refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" compoundref="os_8c" startline="68">os_schedulerstarttime</references>
        <references refid="enginetask__cfg_8c_1a54c9e843832aef3241680f632afd3824" compoundref="enginetask__cfg_8c" startline="51">eng_tskdef_cyclic_10ms</references>
        <references refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" compoundref="os_8h" startline="127">BMS_Task_Definition_s::Phase</references>
        <references refid="enginetask_8c_1af6d38da27fba7f2fcaf23578f3d8c9c3" compoundref="enginetask_8c" startline="116" endline="127">ENG_TSK_Cyclic_10ms</references>
        <references refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" compoundref="os_8h" startline="128">BMS_Task_Definition_s::CycleTime</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1aadee9bc1893bd8fb3a99d60824786e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TSK_Cyclic_100ms</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TSK_Cyclic_100ms</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>cyclic 100ms-Task, preemptive with TSK_Cyclic_1ms() and TSK_Cyclic_10ms(). </para>        </briefdescription>
        <detaileddescription>
<para>Task is delayed by a phase as defined in eng_tskdef_cyclic_100ms.Phase (in milliseconds). After the phase delay, the cyclic execution starts, the entry time is saved in currentTime. After one cycle, the Task is set to sleep until entry time + eng_tskdef_cyclic_100ms.CycleTime (in milliseconds). The task calls Job_100ms(), Job_500ms() and Job_1s().</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="171" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="171" bodyend="187"/>
        <references refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" compoundref="os_8c" startline="60">os_boot</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" compoundref="os_8h" startline="94">OS_SYSTEM_RUNNING</references>
        <references refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" compoundref="os_8c" startline="68">os_schedulerstarttime</references>
        <references refid="enginetask__cfg_8c_1a0810f0eaa4d2f19d5360450406602a6a" compoundref="enginetask__cfg_8c" startline="52">eng_tskdef_cyclic_100ms</references>
        <references refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" compoundref="os_8h" startline="127">BMS_Task_Definition_s::Phase</references>
        <references refid="enginetask_8c_1a9bf9dee43edcffc12cd87e375e81557a" compoundref="enginetask_8c" startline="129" endline="160">ENG_TSK_Cyclic_100ms</references>
        <references refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" compoundref="os_8h" startline="128">BMS_Task_Definition_s::CycleTime</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a760d60acd540f21162c90527bbf59a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TSK_EventHandler</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TSK_EventHandler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>cyclic and event driven handler. </para>        </briefdescription>
        <detaileddescription>
<para>Task configurations (cycle and delay time) are specified by eng_tskdef_eventhandler.</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="190" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="190" bodyend="205"/>
        <references refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" compoundref="os_8c" startline="60">os_boot</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" compoundref="os_8h" startline="94">OS_SYSTEM_RUNNING</references>
        <references refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" compoundref="os_8c" startline="68">os_schedulerstarttime</references>
        <references refid="enginetask__cfg_8c_1a4b651a123340fea402ee74ee3feeb2dc" compoundref="enginetask__cfg_8c" startline="53">eng_tskdef_eventhandler</references>
        <references refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" compoundref="os_8h" startline="127">BMS_Task_Definition_s::Phase</references>
        <references refid="enginetask_8c_1ab7d4e17991d9361ec23be9d8a16fd8cb" compoundref="enginetask_8c" startline="163" endline="165">ENG_TSK_EventHandler</references>
        <references refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" compoundref="os_8h" startline="128">BMS_Task_Definition_s::CycleTime</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a5b2888a2b67fa092c16c06cf12dbe44e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TSK_Diagnosis</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TSK_Diagnosis</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>cyclic diagnosis task. </para>        </briefdescription>
        <detaileddescription>
<para>Task configurations (cycle and delay time) are specified by eng_tskdef_diagnosis.</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="207" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="207" bodyend="223"/>
        <references refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" compoundref="os_8c" startline="60">os_boot</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" compoundref="os_8h" startline="94">OS_SYSTEM_RUNNING</references>
        <references refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" compoundref="os_8c" startline="68">os_schedulerstarttime</references>
        <references refid="enginetask__cfg_8c_1ade347e641157ad2a0ffc994ccafb4b3a" compoundref="enginetask__cfg_8c" startline="54">eng_tskdef_diagnosis</references>
        <references refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" compoundref="os_8h" startline="127">BMS_Task_Definition_s::Phase</references>
        <references refid="enginetask_8c_1a7a2724820b8c6b953d931ef1bb91a7f1" compoundref="enginetask_8c" startline="167" endline="169">ENG_TSK_Diagnosis</references>
        <references refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" compoundref="os_8h" startline="128">BMS_Task_Definition_s::CycleTime</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a9f0687e02ddc61f131d2c43d4270542f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_PostOSInit</definition>
        <argsstring>(void)</argsstring>
        <name>OS_PostOSInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>reads non-volatile memory and initializes the sys module </para>        </briefdescription>
        <detaileddescription>
<para>Start up at scheduler start, called from 1ms-Task before the 1ms cyclic execution</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="227" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="227" bodyend="249"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" compoundref="os_8c" startline="60">os_boot</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fbafdaa6d873ad05e293ab03ab356e05af4" compoundref="os_8h" startline="91">OS_RUNNING</references>
        <references refid="nvic_8c_1a609f6efbe6a90d1908ae1e3f1a7096fa" compoundref="nvic_8c" startline="114" endline="173">NVIC_PostOsInit</references>
        <references refid="sdram_8h_1a9c4b12172af5ca9805ff6d8e68cbce6b">SDRAM_Init</references>
        <references refid="can_8c_1a0505a1f9b26b55293dc199f45e7bb0ec" compoundref="can_8c" startline="171" endline="226">CAN_Init</references>
        <references refid="os_8h_1a704c877baf1e90bab13ca745627a42fba0cd71f4c8ffec9cc447bb85341e5ff7c" compoundref="os_8h" startline="93">OS_BMS_INIT</references>
        <references refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" compoundref="diag_8c" startline="449" endline="481">DIAG_Handler</references>
        <references refid="diag__cfg_8h_1a99548d8406f95b3249155ccaf61b8c73" compoundref="diag__cfg_8h" startline="96">DIAG_CH_POSTOSINIT_FAILURE</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" compoundref="diag__id__cfg_8h" startline="44">DIAG_EVENT_NOK</references>
      </memberdef>
      <memberdef kind="function" id="os_8c_1ace849181954b143dc0187c632605da86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_IdleTask</definition>
        <argsstring>(void)</argsstring>
        <name>OS_IdleTask</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>OS_IdleTask, called by <ref refid="os_8h_1a97fd430f36f8b065226e2bff9bad1de5" kindref="member">vApplicationIdleHook()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="251" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a3678d1ab3c96402d191ac3ce6edcefba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t OS_Check_Context</definition>
        <argsstring>(void)</argsstring>
        <name>OS_Check_Context</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>auxiliary function to distinguish OS Task from an ISR </para>        </briefdescription>
        <detaileddescription>
<para>checks the function context: task (thread) mode or interrupt (handler) mode</para><para><simplesect kind="return"><para>0 when OS-Task, 0x1 when ISR </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="298" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="298" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a5573d7c2221a3f3b9cfe5c109603b441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TaskEnter_Critical</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TaskEnter_Critical</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enter Critical interface function for use in FreeRTOS-Tasks and FreeRTOS-ISR. </para>        </briefdescription>
        <detaileddescription>
<para>checks the function context (task/thread mode or interrupt (handler) mode) and calls the corresponding enter-critical function</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="311" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="311" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="os_8c_1a7e5b7892152952d2109c89baa0add1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_TaskExit_Critical</definition>
        <argsstring>(void)</argsstring>
        <name>OS_TaskExit_Critical</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exit Critical interface function for use in FreeRTOS-Tasks and FreeRTOS-ISR. </para>        </briefdescription>
        <detaileddescription>
<para>checks the function context (task/thread mode or interrupt (handler) mode) and calls the corresponding exit-critical function</para><para><simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" line="324" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c" bodystart="324" bodyend="335"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of the tasks used by the system. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para><copy/> 2010 - 2017, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. All rights reserved.</para></simplesect>
BSD 3-Clause License Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para></listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para></listitem><listitem><para>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para></listitem></orderedlist>
</para><para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para><para>We kindly request you to use one or more of the following phrases to refer to foxBMS in your hardware, software, documentation or advertising materials:</para><para><Prime/>This product uses parts of foxBMS<registered/><Prime/></para><para><Prime/>This product includes parts of foxBMS<registered/><Prime/></para><para><Prime/>This product is derived from foxBMS<registered/><Prime/></para><para><simplesect kind="author"><para>foxBMS Team </para></simplesect>
<simplesect kind="date"><para>27.08.2015 (date of creation)</para></simplesect>
<simplesect kind="par"><title>Module-prefix</title><para>OS </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="34"><highlight class="comment">/*==================<sp/>Includes<sp/>=============================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>recommended<sp/>include<sp/>order<sp/>of<sp/>header<sp/>files:</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>1.<sp/><sp/><sp/><sp/>include<sp/>general.h</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>2.<sp/><sp/><sp/><sp/>include<sp/>module&apos;s<sp/>own<sp/>header</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>3...<sp/><sp/>other<sp/>headers</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="general_8h" kindref="compound">general.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="os_8h" kindref="compound">os.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="enginetask_8h" kindref="compound">enginetask.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="appltask_8h" kindref="compound">appltask.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="database_8h" kindref="compound">database.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sys_8h" kindref="compound">sys.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="os_8h" kindref="compound">os.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nvic_8h" kindref="compound">nvic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cansignal_8h" kindref="compound">cansignal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="can_8h" kindref="compound">can.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="diag_8h" kindref="compound">diag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sdram_8h" kindref="compound">sdram.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Macros<sp/>and<sp/>Definitions<sp/>===============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Constant<sp/>and<sp/>Variable<sp/>Definitions<sp/>====================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="os_8h_1adb8d62335b1b8a020f5cf5d6c4e51924" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fb" kindref="member">OS_BOOT_STATE_e</ref><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref>;</highlight></codeline>
<codeline lineno="61" refid="os_8h_1ad858422b7a211f094e302688c3f98917" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fb" kindref="member">OS_BOOT_STATE_e</ref><sp/><ref refid="os_8c_1ad858422b7a211f094e302688c3f98917" kindref="member">os_safety_state</ref>;</highlight></codeline>
<codeline lineno="62" refid="os_8h_1aa87bfae31fe8a496099cd9dfa2aecdf9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="structOS__TIMER__s" kindref="compound">OS_TIMER_s</ref><sp/><ref refid="os_8c_1aa87bfae31fe8a496099cd9dfa2aecdf9" kindref="member">os_timer</ref>;</highlight></codeline>
<codeline lineno="63" refid="os_8c_1adb03983fbd5d3091532895d08f6a4e5a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="os_8c_1adb03983fbd5d3091532895d08f6a4e5a" kindref="member">eng_init</ref><sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="os_8h_1a68b2b486b62b629bdf9e645fd5e6069f" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" kindref="member">os_schedulerstarttime</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Prototypes<sp/>==================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a2935ff9d27172624efdc5e36a5bb036c" kindref="member">OS_TimerTrigger</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Implementations<sp/>=============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="os_8h_1a6f5422e600224458a5f0c216f534db57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a6f5422e600224458a5f0c216f534db57" kindref="member">OS_TaskInit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configuration<sp/>of<sp/>RTOS<sp/>Queues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fba2077d31d88c2af4e7cf51c93a35c7731" kindref="member">OS_ENG_CREATE_QUEUES</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="enginetask__cfg_8c_1ac2f41a91ed525e3792d44b13baab99e3" kindref="member">ENG_CreateQueues</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configuration<sp/>of<sp/>RTOS<sp/>Mutexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab30a2d0385602f13448cb36660cab949" kindref="member">OS_ENG_CREATE_MUTEX</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="enginetask__cfg_8c_1ae356447f195edd7e3bdf2fc317f49e46" kindref="member">ENG_CreateMutex</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configuration<sp/>of<sp/>RTOS<sp/>Events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fba460481803fba51a5d762761dfe911d49" kindref="member">OS_ENG_CREATE_EVENT</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="enginetask__cfg_8c_1a2c6c4b8deea1c0fe0595434d8079d091" kindref="member">ENG_CreateEvent</ref>();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configuration<sp/>of<sp/>RTOS<sp/>Tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fba350250fb87e00ef401b1ba88b6210c1c" kindref="member">OS_ENG_CREATE_TASKS</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="enginetask__cfg_8c_1adca639aff16795100f1976d22a1d099d" kindref="member">ENG_CreateTask</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configuration<sp/>of<sp/>RTOS<sp/>Mutexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fba2690077fe08b599e901f961bf1900f64" kindref="member">OS_APPL_CREATE_MUTEX</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="appltask_8c_1a6fa44ea750012fc37aa15130e9a60957" kindref="member">APPL_CreateMutex</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configuration<sp/>of<sp/>RTOS<sp/>Events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fba3f96fe12c247965bb35bb0428ff9d356" kindref="member">OS_APPL_CREATE_EVENT</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="appltask_8c_1a3ac355e656e45203b36403b94143dbdd" kindref="member">APPL_CreateEvent</ref>();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configuration<sp/>of<sp/>RTOS<sp/>Tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbaacf28b10f6af0bc92783f0042305c155" kindref="member">OS_APPL_CREATE_TASKS</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="appltask_8c_1a850dd1b4a8624221ab29afb4ae0efa41" kindref="member">APPL_CreateTask</ref>();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="os_8h_1a97fd430f36f8b065226e2bff9bad1de5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a97fd430f36f8b065226e2bff9bad1de5" kindref="member">vApplicationIdleHook</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1ace849181954b143dc0187c632605da86" kindref="member">OS_IdleTask</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="os_8h_1aa80555e4e2cc33cafc73e340ccf09a79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1aa80555e4e2cc33cafc73e340ccf09a79" kindref="member">OS_TSK_Engine</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1a9f0687e02ddc61f131d2c43d4270542f" kindref="member">OS_PostOSInit</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" kindref="member">OS_SYSTEM_RUNNING</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="database_8c_1a1585d5c7665504898be0371c5c6295b9" kindref="member">DATA_Task</ref>();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>database<sp/>manager<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="diag_8c_1af5b8cf38b93979152c6d3d64c6340b03" kindref="member">DIAG_SysMon</ref>();<sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>Overall<sp/>System<sp/>Monitoring<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="os_8h_1a8f64fac71dfe371cc8b9ac6670519c59" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a8f64fac71dfe371cc8b9ac6670519c59" kindref="member">OS_TSK_Cyclic_1ms</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>!=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" kindref="member">OS_SYSTEM_RUNNING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="os_8c_1adb03983fbd5d3091532895d08f6a4e5a" kindref="member">eng_init</ref>==<ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="enginetask_8c_1a544d886c3c21cf2c0f967e9aa6f7856b" kindref="member">ENG_Init</ref>();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb03983fbd5d3091532895d08f6a4e5a" kindref="member">eng_init</ref>=<ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>osDelayUntil(&amp;<ref refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" kindref="member">os_schedulerstarttime</ref>,<sp/><ref refid="enginetask__cfg_8c_1a593e4d302e6eafde29900e03198aa45a" kindref="member">eng_tskdef_cyclic_1ms</ref>.<ref refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" kindref="member">Phase</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>currentTime<sp/>=<sp/>osKernelSysTick();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os_8c_1a2935ff9d27172624efdc5e36a5bb036c" kindref="member">OS_TimerTrigger</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>system<sp/>timer<sp/>os_timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="enginetask_8c_1a68a74af2a1db1cc404f7fe1ecbcb8963" kindref="member">ENG_TSK_Cyclic_1ms</ref>();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>osDelayUntil(&amp;currentTime,<sp/><ref refid="enginetask__cfg_8c_1a593e4d302e6eafde29900e03198aa45a" kindref="member">eng_tskdef_cyclic_1ms</ref>.<ref refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" kindref="member">CycleTime</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="os_8h_1a48f7b4b1f01ae62f13ad77b21c51cfdb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a48f7b4b1f01ae62f13ad77b21c51cfdb" kindref="member">OS_TSK_Cyclic_10ms</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>!=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" kindref="member">OS_SYSTEM_RUNNING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>osDelayUntil(&amp;<ref refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" kindref="member">os_schedulerstarttime</ref>,<sp/><ref refid="enginetask__cfg_8c_1a54c9e843832aef3241680f632afd3824" kindref="member">eng_tskdef_cyclic_10ms</ref>.<ref refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" kindref="member">Phase</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>currentTime<sp/>=<sp/>osKernelSysTick();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="enginetask_8c_1af6d38da27fba7f2fcaf23578f3d8c9c3" kindref="member">ENG_TSK_Cyclic_10ms</ref>();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>osDelayUntil(&amp;currentTime,<sp/><ref refid="enginetask__cfg_8c_1a54c9e843832aef3241680f632afd3824" kindref="member">eng_tskdef_cyclic_10ms</ref>.<ref refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" kindref="member">CycleTime</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="os_8h_1aadee9bc1893bd8fb3a99d60824786e60" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1aadee9bc1893bd8fb3a99d60824786e60" kindref="member">OS_TSK_Cyclic_100ms</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>!=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" kindref="member">OS_SYSTEM_RUNNING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>osDelayUntil(&amp;<ref refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" kindref="member">os_schedulerstarttime</ref>,<sp/><ref refid="enginetask__cfg_8c_1a0810f0eaa4d2f19d5360450406602a6a" kindref="member">eng_tskdef_cyclic_100ms</ref>.<ref refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" kindref="member">Phase</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>currentTime<sp/>=<sp/>osKernelSysTick();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="enginetask_8c_1a9bf9dee43edcffc12cd87e375e81557a" kindref="member">ENG_TSK_Cyclic_100ms</ref>();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>osDelayUntil(&amp;currentTime,<sp/><ref refid="enginetask__cfg_8c_1a0810f0eaa4d2f19d5360450406602a6a" kindref="member">eng_tskdef_cyclic_100ms</ref>.<ref refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" kindref="member">CycleTime</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="os_8h_1a760d60acd540f21162c90527bbf59a5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a760d60acd540f21162c90527bbf59a5e" kindref="member">OS_TSK_EventHandler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>!=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" kindref="member">OS_SYSTEM_RUNNING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>osDelayUntil(&amp;<ref refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" kindref="member">os_schedulerstarttime</ref>,<sp/><ref refid="enginetask__cfg_8c_1a4b651a123340fea402ee74ee3feeb2dc" kindref="member">eng_tskdef_eventhandler</ref>.<ref refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" kindref="member">Phase</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>currentTime<sp/>=<sp/>osKernelSysTick();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="enginetask_8c_1ab7d4e17991d9361ec23be9d8a16fd8cb" kindref="member">ENG_TSK_EventHandler</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>osDelayUntil(&amp;currentTime,<sp/><ref refid="enginetask__cfg_8c_1a4b651a123340fea402ee74ee3feeb2dc" kindref="member">eng_tskdef_eventhandler</ref>.<ref refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" kindref="member">CycleTime</ref>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="os_8h_1a5b2888a2b67fa092c16c06cf12dbe44e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a5b2888a2b67fa092c16c06cf12dbe44e" kindref="member">OS_TSK_Diagnosis</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>!=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbab6422df04846c1726af32ee967e03aae" kindref="member">OS_SYSTEM_RUNNING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>osDelayUntil(&amp;<ref refid="os_8c_1a68b2b486b62b629bdf9e645fd5e6069f" kindref="member">os_schedulerstarttime</ref>,<sp/><ref refid="enginetask__cfg_8c_1ade347e641157ad2a0ffc994ccafb4b3a" kindref="member">eng_tskdef_diagnosis</ref>.<ref refid="structBMS__Task__Definition__s_1a313c13307905805e7423a1b544b927d0" kindref="member">Phase</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>currentTime<sp/>=<sp/>osKernelSysTick();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="enginetask_8c_1a7a2724820b8c6b953d931ef1bb91a7f1" kindref="member">ENG_TSK_Diagnosis</ref>();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>osDelayUntil(&amp;currentTime,<sp/><ref refid="enginetask__cfg_8c_1ade347e641157ad2a0ffc994ccafb4b3a" kindref="member">eng_tskdef_diagnosis</ref>.<ref refid="structBMS__Task__Definition__s_1af0eb3f1fa27cd6f22e34583cbb9eab08" kindref="member">CycleTime</ref>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="os_8h_1a9f0687e02ddc61f131d2c43d4270542f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a9f0687e02ddc61f131d2c43d4270542f" kindref="member">OS_PostOSInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>err_type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>ret_val<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fbafdaa6d873ad05e293ab03ab356e05af4" kindref="member">OS_RUNNING</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nvic_8c_1a609f6efbe6a90d1908ae1e3f1a7096fa" kindref="member">NVIC_PostOsInit</ref>();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAL_SDRAM_MODULE_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sdram_8h_1a9c4b12172af5ca9805ff6d8e68cbce6b" kindref="member">SDRAM_Init</ref>();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can_8c_1a0505a1f9b26b55293dc199f45e7bb0ec" kindref="member">CAN_Init</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os_8c_1adb8d62335b1b8a020f5cf5d6c4e51924" kindref="member">os_boot</ref><sp/>=<sp/><ref refid="os_8h_1a704c877baf1e90bab13ca745627a42fba0cd71f4c8ffec9cc447bb85341e5ff7c" kindref="member">OS_BMS_INIT</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret_val)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a99548d8406f95b3249155ccaf61b8c73" kindref="member">DIAG_CH_POSTOSINIT_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>8,<sp/>NULL);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="os_8h_1ace849181954b143dc0187c632605da86" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1ace849181954b143dc0187c632605da86" kindref="member">OS_IdleTask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="os_8c_1a2935ff9d27172624efdc5e36a5bb036c" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a2935ff9d27172624efdc5e36a5bb036c" kindref="member">OS_TimerTrigger</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++os_timer.<ref refid="structOS__TIMER__s_1a76083e4eee94f37324478b8cc2c0c01e" kindref="member">Timer_1ms</ref><sp/>&gt;<sp/>9<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>10ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_timer.<ref refid="structOS__TIMER__s_1a76083e4eee94f37324478b8cc2c0c01e" kindref="member">Timer_1ms</ref>=0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++os_timer.<ref refid="structOS__TIMER__s_1aba1a640ede3ed9b99b7a40447ec13917" kindref="member">Timer_10ms</ref><sp/>&gt;<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>100ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_timer.<ref refid="structOS__TIMER__s_1aba1a640ede3ed9b99b7a40447ec13917" kindref="member">Timer_10ms</ref>=0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++os_timer.<ref refid="structOS__TIMER__s_1ad89c3f7586f482ce0316a4b70444ca65" kindref="member">Timer_100ms</ref><sp/>&gt;<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_timer.<ref refid="structOS__TIMER__s_1ad89c3f7586f482ce0316a4b70444ca65" kindref="member">Timer_100ms</ref>=0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++os_timer.<ref refid="structOS__TIMER__s_1afb7037d90ef5ac004b414ad4cda66887" kindref="member">Timer_sec</ref><sp/>&gt;<sp/>59)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_timer.<ref refid="structOS__TIMER__s_1afb7037d90ef5ac004b414ad4cda66887" kindref="member">Timer_sec</ref>=0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++os_timer.<ref refid="structOS__TIMER__s_1a6e0521201d5b6957d7e1f4e4072dd0d4" kindref="member">Timer_min</ref><sp/>&gt;<sp/>59)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_timer.<ref refid="structOS__TIMER__s_1a6e0521201d5b6957d7e1f4e4072dd0d4" kindref="member">Timer_min</ref>=0;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++os_timer.<ref refid="structOS__TIMER__s_1ab8f203f52cafc7e660a0f16e9232658e" kindref="member">Timer_h</ref><sp/>&gt;<sp/>23)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_timer.<ref refid="structOS__TIMER__s_1ab8f203f52cafc7e660a0f16e9232658e" kindref="member">Timer_h</ref>=0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++os_timer.<ref refid="structOS__TIMER__s_1abbac9c91aad0cb76d871fe7fcf3bc21e" kindref="member">Timer_d</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="os_8h_1a3678d1ab3c96402d191ac3ce6edcefba" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="os_8c_1a3678d1ab3c96402d191ac3ce6edcefba" kindref="member">OS_Check_Context</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>define<sp/>from<sp/>port.c<sp/>:<sp/><sp/><sp/>portVECTACTIVE_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((portNVIC_INT_CTRL_REG<sp/>&amp;<sp/>0xFFUL)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>and<sp/>mask<sp/>off<sp/>all<sp/>bits<sp/>but<sp/>the<sp/>VECTACTIVE<sp/>bits<sp/>in<sp/>the<sp/>ICSR<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Context<sp/>of<sp/>caller<sp/>function<sp/>is<sp/>a<sp/>TASK<sp/>(Thread)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Context<sp/>of<sp/>caller<sp/>function<sp/>is<sp/>an<sp/>ISR<sp/>(FreeRTOS-Interrupt<sp/>or<sp/>Realtime<sp/>Interrupt)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="os_8h_1a5573d7c2221a3f3b9cfe5c109603b441" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a5573d7c2221a3f3b9cfe5c109603b441" kindref="member">OS_TaskEnter_Critical</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>define<sp/>from<sp/>port.c<sp/>:<sp/><sp/><sp/>portVECTACTIVE_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((portNVIC_INT_CTRL_REG<sp/>&amp;<sp/>0xFFUL)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>and<sp/>mask<sp/>off<sp/>all<sp/>bits<sp/>but<sp/>the<sp/>VECTACTIVE<sp/>bits<sp/>in<sp/>the<sp/>ICSR<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskENTER_CRITICAL();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>enter<sp/>critical<sp/>function<sp/>within<sp/>task<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskENTER_CRITICAL_FROM_ISR();<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>Call<sp/>enter<sp/>critical<sp/>function<sp/>within<sp/>ISR<sp/>context<sp/>(FreeRTOS-Interrupt)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="os_8h_1a7e5b7892152952d2109c89baa0add1a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="os_8c_1a7e5b7892152952d2109c89baa0add1a8" kindref="member">OS_TaskExit_Critical</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>define<sp/>from<sp/>port.c<sp/>:<sp/><sp/><sp/>portVECTACTIVE_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((portNVIC_INT_CTRL_REG<sp/>&amp;<sp/>0xFFUL)<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>and<sp/>mask<sp/>off<sp/>all<sp/>bits<sp/>but<sp/>the<sp/>VECTACTIVE<sp/>bits<sp/>in<sp/>the<sp/>ICSR<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>exit<sp/>critical<sp/>function<sp/>within<sp/>task<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL_FROM_ISR(0);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>Call<sp/>exit<sp/>critical<sp/>function<sp/>within<sp/>ISR<sp/>context<sp/>(FreeRTOS-Interrupt)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-secondary/src/os/os.c"/>
  </compounddef>
</doxygen>
