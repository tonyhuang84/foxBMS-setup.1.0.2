<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="uart_8c" kind="file" language="C++">
    <compoundname>uart.c</compoundname>
    <includes refid="general_8h" local="yes">general.h</includes>
    <includes refid="uart_8h" local="yes">uart.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <incdepgraph>
      <node id="2362">
        <label>io_package_cfg.h</label>
        <link refid="io__package__cfg_8h"/>
      </node>
      <node id="2355">
        <label>stdint.h</label>
      </node>
      <node id="2365">
        <label>cmsis_os.h</label>
      </node>
      <node id="2358">
        <label>uart_cfg.h</label>
        <link refid="uart__cfg_8h"/>
        <childnode refid="2359" relation="include">
        </childnode>
      </node>
      <node id="2364">
        <label>os.h</label>
        <link refid="os_8h"/>
        <childnode refid="2365" relation="include">
        </childnode>
      </node>
      <node id="2359">
        <label>mcu_cfg.h</label>
        <link refid="mcu__cfg_8h"/>
        <childnode refid="2360" relation="include">
        </childnode>
        <childnode refid="2361" relation="include">
        </childnode>
      </node>
      <node id="2363">
        <label>io_mcu_cfg.h</label>
        <link refid="io__mcu__cfg_8h"/>
      </node>
      <node id="2361">
        <label>io_cfg.h</label>
        <link refid="io__cfg_8h"/>
        <childnode refid="2359" relation="include">
        </childnode>
        <childnode refid="2362" relation="include">
        </childnode>
        <childnode refid="2363" relation="include">
        </childnode>
      </node>
      <node id="2356">
        <label>std_types.h</label>
        <link refid="std__types_8h"/>
      </node>
      <node id="2353">
        <label>uart.c</label>
        <link refid="uart_8c"/>
        <childnode refid="2354" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2364" relation="include">
        </childnode>
      </node>
      <node id="2357">
        <label>uart.h</label>
        <link refid="uart_8h"/>
        <childnode refid="2358" relation="include">
        </childnode>
      </node>
      <node id="2354">
        <label>general.h</label>
        <link refid="general_8h"/>
        <childnode refid="2355" relation="include">
        </childnode>
        <childnode refid="2356" relation="include">
        </childnode>
      </node>
      <node id="2360">
        <label>stm32f4xx_hal.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="uart_8c_1abca84e567fdf8d965cb33aa7c9508574" prot="public" static="no">
        <name>MSG_NOT_BUSY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="53" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="uart_8c_1a93d184f9ed1981aab374b9b583cd5261" prot="public" static="no">
        <name>MSG_BUSY</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="54" column="9" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="uart_8c_1ab43ee40fd88b580ae7026b1fff9c9648" prot="public" static="no" mutable="no">
        <type>unsigned char</type>
        <definition>volatile unsigned char Msg0SendBusy</definition>
        <argsstring></argsstring>
        <name>Msg0SendBusy</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="59" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t rxbuf[RXBUF_LENGTH]</definition>
        <argsstring>[RXBUF_LENGTH]</argsstring>
        <name>rxbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="61" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="uart_8c_1a8990aadc014fe913da95339f543da06e" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t txbuf[TXBUF_LENGTH]</definition>
        <argsstring>[TXBUF_LENGTH]</argsstring>
        <name>txbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="62" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="uart_8c_1a7084af22bb403999bb4e79efbe6026c1" prot="public" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* wrpoi_rxbuf</definition>
        <argsstring></argsstring>
        <name>wrpoi_rxbuf</name>
        <initializer>=&amp;<ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="64" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="uart_8c_1acd7e8281720586d294888d0a235a2233" prot="public" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* rdpoi_rxbuf</definition>
        <argsstring></argsstring>
        <name>rdpoi_rxbuf</name>
        <initializer>=&amp;<ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="65" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="uart_8c_1a6f569957b90c3acc74ed9580c5eef98b" prot="public" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* wrpoi_txbuf</definition>
        <argsstring></argsstring>
        <name>wrpoi_txbuf</name>
        <initializer>=&amp;<ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="67" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" prot="public" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* rdpoi_txbuf</definition>
        <argsstring></argsstring>
        <name>rdpoi_txbuf</name>
        <initializer>=&amp;<ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="68" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="uart_8c_1a7e7befd2277356057974ae817e8865e3" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char uart_com_receivedbyte[UART_COM_RECEIVEBUFFER_LENGTH]</definition>
        <argsstring>[UART_COM_RECEIVEBUFFER_LENGTH]</argsstring>
        <name>uart_com_receivedbyte</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="73" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="uart_8c_1a0ec8fe837cb588ecc7beb08747a12f79" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t uart_com_receive_slot</definition>
        <argsstring></argsstring>
        <name>uart_com_receive_slot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="74" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void UART_IntRx</definition>
        <argsstring>(void)</argsstring>
        <name>UART_IntRx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>UART_IntRx is responsible for handling receive requests. </para>        </briefdescription>
        <detaileddescription>
<para>This is invoked from with the interrupt handler and processes userdata on receive event. It copies data from data register into a ringbuffer, provides some very basic application example.</para><para><simplesect kind="return"><para>(type: void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="78" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="367" bodyend="390"/>
        <references refid="uart_8c_1a7084af22bb403999bb4e79efbe6026c1" compoundref="uart_8c" startline="64">wrpoi_rxbuf</references>
        <references refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" compoundref="uart__cfg_8c" startline="48">uart_cfg</references>
        <references refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" compoundref="uart_8c" startline="61">rxbuf</references>
        <references refid="uart_8h_1a301215b09f88add5cd0e8be518bc4d7b" compoundref="uart_8h" startline="43">RXBUF_LENGTH</references>
        <references refid="uart_8c_1a0ec8fe837cb588ecc7beb08747a12f79" compoundref="uart_8c" startline="74">uart_com_receive_slot</references>
        <references refid="uart_8h_1a50224b15fcbc27089556a0c5ef4c4ff7" compoundref="uart_8h" startline="61">UART_COM_RECEIVEBUFFER_LENGTH</references>
        <references refid="uart_8c_1a7e7befd2277356057974ae817e8865e3" compoundref="uart_8c" startline="73">uart_com_receivedbyte</references>
        <references refid="uart_8c_1acd7e8281720586d294888d0a235a2233" compoundref="uart_8c" startline="65">rdpoi_rxbuf</references>
      </memberdef>
      <memberdef kind="function" id="uart_8c_1ad364d02588fd09332955ff897bd72eb5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void UART_IntTx</definition>
        <argsstring>(void)</argsstring>
        <name>UART_IntTx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>UART_IntTx is responsible for handling send requests. </para>        </briefdescription>
        <detaileddescription>
<para>This is invoked from with the interrupt handler and processes userdata on send event. It copies data from a ringbuffer into the data register as long as the read pointer doesn&apos;t match the write pointer (which means there&apos;s still unsent data in the ringbuffer)</para><para><simplesect kind="return"><para>(type: void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="79" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="403" bodyend="428"/>
        <references refid="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" compoundref="uart_8c" startline="68">rdpoi_txbuf</references>
        <references refid="uart_8c_1a8990aadc014fe913da95339f543da06e" compoundref="uart_8c" startline="62">txbuf</references>
        <references refid="uart_8h_1a73dd4c3ae3c5bcfc236bed249e546865" compoundref="uart_8h" startline="44">TXBUF_LENGTH</references>
        <references refid="uart_8c_1a6f569957b90c3acc74ed9580c5eef98b" compoundref="uart_8c" startline="67">wrpoi_txbuf</references>
        <references refid="uart_8c_1ab43ee40fd88b580ae7026b1fff9c9648" compoundref="uart_8c" startline="59">Msg0SendBusy</references>
        <references refid="uart_8c_1a93d184f9ed1981aab374b9b583cd5261" compoundref="uart_8c" startline="54">MSG_BUSY</references>
        <references refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" compoundref="uart__cfg_8c" startline="48">uart_cfg</references>
        <references refid="uart_8c_1abca84e567fdf8d965cb33aa7c9508574" compoundref="uart_8c" startline="53">MSG_NOT_BUSY</references>
      </memberdef>
      <memberdef kind="function" id="uart_8c_1a5d5b8f61fe495fe7287979d64bfc77c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void UART_IntRxComp</definition>
        <argsstring>(void)</argsstring>
        <name>UART_IntRxComp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disables UART transmit complete interrupt</para><para><simplesect kind="return"><para>(type: void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="80" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="435" bodyend="441"/>
        <references refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" compoundref="uart__cfg_8c" startline="48">uart_cfg</references>
      </memberdef>
      <memberdef kind="function" id="uart_8c_1adb40c35394bc4ff4e750c9f4dfe1aa95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>static uint8_t * UART_txbuf_copy</definition>
        <argsstring>(uint8_t *ptrb, uint8_t *ptra)</argsstring>
        <name>UART_txbuf_copy</name>
        <param>
          <type>uint8_t *</type>
          <declname>ptrb</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>ptra</declname>
        </param>
        <briefdescription>
<para>UART_txbuf_copy is a helper function. </para>        </briefdescription>
        <detaileddescription>
<para>This function just copies content from buffer a to ringbuffer b.</para><para><simplesect kind="return"><para>(type: uint8_t) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="81" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="466" bodyend="488"/>
        <references refid="uart_8c_1a8990aadc014fe913da95339f543da06e" compoundref="uart_8c" startline="62">txbuf</references>
        <references refid="uart_8h_1a73dd4c3ae3c5bcfc236bed249e546865" compoundref="uart_8h" startline="44">TXBUF_LENGTH</references>
      </memberdef>
      <memberdef kind="function" id="uart_8c_1ad5cbed2a2222bb84e8b5c1caaa50634e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART_Init</definition>
        <argsstring>(void)</argsstring>
        <name>UART_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>UART_Init provides initialization of the UART module. </para>        </briefdescription>
        <detaileddescription>
<para>It needs to be called during startup, send/receive will only work after initialization is completed. This function configures parameters of the UART interface and enables the needed interrupts.</para><para>Available baudrate is dependent on Sysclock.</para><para><simplesect kind="return"><para>(type: void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="86" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="86" bodyend="102"/>
        <references refid="uart__cfg_8c_1ab63c1c64282e223e610f34a407b0b907" compoundref="uart__cfg_8c" startline="61">uart_cfg_length</references>
        <references refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" compoundref="uart__cfg_8c" startline="48">uart_cfg</references>
        <references refid="uart_8c_1ac308c1e7bd9c48ff894bdfee4fc0685d" compoundref="uart_8c" startline="231" endline="354">HAL_UART_CustomIRQHandler</references>
        <references refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" compoundref="uart_8c" startline="367" endline="390">UART_IntRx</references>
        <references refid="uart_8c_1ad364d02588fd09332955ff897bd72eb5" compoundref="uart_8c" startline="403" endline="428">UART_IntTx</references>
        <references refid="uart_8c_1a5d5b8f61fe495fe7287979d64bfc77c5" compoundref="uart_8c" startline="435" endline="441">UART_IntRxComp</references>
      </memberdef>
      <memberdef kind="function" id="uart_8c_1ac308c1e7bd9c48ff894bdfee4fc0685d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void HAL_UART_CustomIRQHandler</definition>
        <argsstring>(UART_HandleTypeDef *huart)</argsstring>
        <name>HAL_UART_CustomIRQHandler</name>
        <param>
          <type>UART_HandleTypeDef *</type>
          <declname>huart</declname>
        </param>
        <briefdescription>
<para>HAL_UART_CustomIRQHandler is responsible for handling all requests. </para>        </briefdescription>
        <detaileddescription>
<para>This custom interrupt handler does all the handling for sending/receiving data, reset and error handling. In case of send/receive a subfunction is called which handles further processing.</para><para><simplesect kind="return"><para>(type: void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="231" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="231" bodyend="354"/>
        <references refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" compoundref="uart_8c" startline="367" endline="390">UART_IntRx</references>
        <references refid="uart_8c_1ad364d02588fd09332955ff897bd72eb5" compoundref="uart_8c" startline="403" endline="428">UART_IntTx</references>
        <references refid="uart_8c_1a5d5b8f61fe495fe7287979d64bfc77c5" compoundref="uart_8c" startline="435" endline="441">UART_IntRxComp</references>
      </memberdef>
      <memberdef kind="function" id="uart_8c_1a7a6a0383091751db2390834f1af685e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UART_vWrite</definition>
        <argsstring>(const uint8_t *source)</argsstring>
        <name>UART_vWrite</name>
        <param>
          <type>const uint8_t *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>UART_vWrite provides an interface to send data. </para>        </briefdescription>
        <detaileddescription>
<para>This function copies data from input buffer to transmit ringbuffer and processes this data in case it&apos;s not already busy transitting data. To avoid data corruption caused by simultaneous accesses some kind of critical section is used.</para><para><simplesect kind="return"><para>(type: uint8_t) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" line="444" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c" bodystart="444" bodyend="457"/>
        <references refid="uart_8c_1a6f569957b90c3acc74ed9580c5eef98b" compoundref="uart_8c" startline="67">wrpoi_txbuf</references>
        <references refid="uart_8c_1adb40c35394bc4ff4e750c9f4dfe1aa95" compoundref="uart_8c" startline="466" endline="488">UART_txbuf_copy</references>
        <references refid="uart_8c_1ab43ee40fd88b580ae7026b1fff9c9648" compoundref="uart_8c" startline="59">Msg0SendBusy</references>
        <references refid="uart_8c_1abca84e567fdf8d965cb33aa7c9508574" compoundref="uart_8c" startline="53">MSG_NOT_BUSY</references>
        <references refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" compoundref="uart__cfg_8c" startline="48">uart_cfg</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Driver for the UART. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para><copy/> 2010 - 2017, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. All rights reserved.</para></simplesect>
BSD 3-Clause License Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para></listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para></listitem><listitem><para>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para></listitem></orderedlist>
</para><para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para><para>We kindly request you to use one or more of the following phrases to refer to foxBMS in your hardware, software, documentation or advertising materials:</para><para><Prime/>This product uses parts of foxBMS<registered/><Prime/></para><para><Prime/>This product includes parts of foxBMS<registered/><Prime/></para><para><Prime/>This product is derived from foxBMS<registered/><Prime/></para><para><simplesect kind="author"><para>foxBMS Team </para></simplesect>
<simplesect kind="date"><para>23.09.2015 (date of creation)</para></simplesect>
<simplesect kind="par"><title>Module-prefix</title><para>UART</para></simplesect>
This uart module handles sending/receiving requests using UART/RS232. In its current implementation it&apos;s interrupt driven, may change in the future in order to support DMA. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="38"><highlight class="comment">/*==================<sp/>Includes<sp/>=============================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>recommended<sp/>include<sp/>order<sp/>of<sp/>header<sp/>files:</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>1.<sp/><sp/><sp/><sp/>include<sp/>general.h</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>2.<sp/><sp/><sp/><sp/>include<sp/>module&apos;s<sp/>own<sp/>header</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>3...<sp/><sp/>other<sp/>headers</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="general_8h" kindref="compound">general.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="uart_8h" kindref="compound">uart.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="os_8h" kindref="compound">os.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Macros<sp/>and<sp/>Definitions<sp/>===============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="uart_8c_1abca84e567fdf8d965cb33aa7c9508574" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSG_NOT_BUSY<sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="uart_8c_1a93d184f9ed1981aab374b9b583cd5261" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MSG_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Constant<sp/>and<sp/>Variable<sp/>Definitions<sp/>====================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="uart_8c_1ab43ee40fd88b580ae7026b1fff9c9648" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1ab43ee40fd88b580ae7026b1fff9c9648" kindref="member">Msg0SendBusy</ref>=0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[<ref refid="uart_8h_1a301215b09f88add5cd0e8be518bc4d7b" kindref="member">RXBUF_LENGTH</ref>];</highlight></codeline>
<codeline lineno="62" refid="uart_8c_1a8990aadc014fe913da95339f543da06e" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[<ref refid="uart_8h_1a73dd4c3ae3c5bcfc236bed249e546865" kindref="member">TXBUF_LENGTH</ref>];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="uart_8c_1a7084af22bb403999bb4e79efbe6026c1" refkind="member"><highlight class="normal">uint8_t<sp/>*<ref refid="uart_8c_1a7084af22bb403999bb4e79efbe6026c1" kindref="member">wrpoi_rxbuf</ref>=&amp;<ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[0];</highlight></codeline>
<codeline lineno="65" refid="uart_8c_1acd7e8281720586d294888d0a235a2233" refkind="member"><highlight class="normal">uint8_t<sp/>*<ref refid="uart_8c_1acd7e8281720586d294888d0a235a2233" kindref="member">rdpoi_rxbuf</ref>=&amp;<ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[0];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="uart_8c_1a6f569957b90c3acc74ed9580c5eef98b" refkind="member"><highlight class="normal">uint8_t<sp/>*<ref refid="uart_8c_1a6f569957b90c3acc74ed9580c5eef98b" kindref="member">wrpoi_txbuf</ref>=&amp;<ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[0];</highlight></codeline>
<codeline lineno="68" refid="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" refkind="member"><highlight class="normal">uint8_t<sp/>*<ref refid="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" kindref="member">rdpoi_txbuf</ref>=&amp;<ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[0];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Constant<sp/>and<sp/>Variable<sp/>Definitions<sp/>====================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="uart_8h_1a7e7befd2277356057974ae817e8865e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1a7e7befd2277356057974ae817e8865e3" kindref="member">uart_com_receivedbyte</ref>[<ref refid="uart_8h_1a50224b15fcbc27089556a0c5ef4c4ff7" kindref="member">UART_COM_RECEIVEBUFFER_LENGTH</ref>];</highlight></codeline>
<codeline lineno="74" refid="uart_8h_1a0ec8fe837cb588ecc7beb08747a12f79" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="uart_8c_1a0ec8fe837cb588ecc7beb08747a12f79" kindref="member">uart_com_receive_slot</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Prototypes<sp/>==================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" kindref="member">UART_IntRx</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1ad364d02588fd09332955ff897bd72eb5" kindref="member">UART_IntTx</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1a5d5b8f61fe495fe7287979d64bfc77c5" kindref="member">UART_IntRxComp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="uart_8c_1adb40c35394bc4ff4e750c9f4dfe1aa95" kindref="member">UART_txbuf_copy</ref><sp/>(uint8_t<sp/>*ptrb,<sp/>uint8_t<sp/>*ptra);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Implementations<sp/>=============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="uart_8h_1ad5cbed2a2222bb84e8b5c1caaa50634e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1ad5cbed2a2222bb84e8b5c1caaa50634e" kindref="member">UART_Init</ref>(</highlight><highlight class="comment">/*UART_HandleTypeDef<sp/>*uart_cfg*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="uart__cfg_8c_1ab63c1c64282e223e610f34a407b0b907" kindref="member">uart_cfg_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_Init(&amp;<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[i]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Enable<sp/>the<sp/>UART<sp/>Parity<sp/>Error<sp/>Interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[i].Instance-&gt;CR1,<sp/>USART_CR1_PEIE);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Enable<sp/>the<sp/>UART<sp/>Error<sp/>Interrupt:<sp/>(Frame<sp/>error,<sp/>noise<sp/>error,<sp/>overrun<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[i].Instance-&gt;CR3,<sp/>USART_CR3_EIE);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Enable<sp/>the<sp/>UART<sp/>Data<sp/>Register<sp/>not<sp/>empty<sp/>Interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[i].Instance-&gt;CR1,<sp/>USART_CR1_RXNEIE);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>STM32F767xx<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1ac308c1e7bd9c48ff894bdfee4fc0685d" kindref="member">HAL_UART_CustomIRQHandler</ref>(UART_HandleTypeDef<sp/>*huart)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>isrflags<sp/><sp/><sp/>=<sp/>READ_REG(huart-&gt;Instance-&gt;ISR);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cr1its<sp/><sp/><sp/><sp/><sp/>=<sp/>READ_REG(huart-&gt;Instance-&gt;CR1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cr3its<sp/><sp/><sp/><sp/><sp/>=<sp/>READ_REG(huart-&gt;Instance-&gt;CR3);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>errorflags<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dmarequest<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>no<sp/>error<sp/>occurs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>errorflags<sp/>=<sp/>(isrflags<sp/>&amp;<sp/>(uint32_t)(USART_ISR_PE<sp/>|<sp/>USART_ISR_FE<sp/>|<sp/>USART_ISR_ORE<sp/>|<sp/>USART_ISR_NE));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errorflags<sp/>==<sp/>RESET)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>in<sp/>mode<sp/>Receiver<sp/>-------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_ISR_RXNE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_RXNEIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" kindref="member">UART_IntRx</ref>();<sp/></highlight><highlight class="comment">//@todo<sp/>use<sp/>general<sp/>handler<sp/>according<sp/>to<sp/>HAL-Interface:<sp/><sp/>UART_Receive_IT(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>some<sp/>errors<sp/>occur<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((errorflags<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr3its<sp/>&amp;<sp/>(USART_CR3_EIE<sp/>|<sp/>USART_CR1_PEIE))<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>parity<sp/>error<sp/>interrupt<sp/>occurred<sp/>----------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_ISR_PE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_PEIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>|=<sp/>HAL_UART_ERROR_PE;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>noise<sp/>error<sp/>interrupt<sp/>occurred<sp/>-----------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_ISR_NE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr3its<sp/>&amp;<sp/>USART_CR3_EIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>|=<sp/>HAL_UART_ERROR_NE;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>frame<sp/>error<sp/>interrupt<sp/>occurred<sp/>-----------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_ISR_FE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr3its<sp/>&amp;<sp/>USART_CR3_EIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>|=<sp/>HAL_UART_ERROR_FE;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>Over-Run<sp/>interrupt<sp/>occurred<sp/>--------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_ISR_ORE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr3its<sp/>&amp;<sp/>USART_CR3_EIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>|=<sp/>HAL_UART_ERROR_ORE;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>UART<sp/>Error<sp/>Call<sp/>back<sp/>function<sp/>if<sp/>need<sp/>be<sp/>--------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(huart-&gt;ErrorCode<sp/>!=<sp/>HAL_UART_ERROR_NONE)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>in<sp/>mode<sp/>Receiver<sp/>-----------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_ISR_RXNE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_RXNEIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" kindref="member">UART_IntRx</ref>();<sp/></highlight><highlight class="comment">//@todo<sp/>use<sp/>general<sp/>handler<sp/>according<sp/>to<sp/>HAL-Interface:<sp/><sp/>UART_Receive_IT(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>Overrun<sp/>error<sp/>occurs,<sp/>or<sp/>if<sp/>any<sp/>error<sp/>occurs<sp/>in<sp/>DMA<sp/>mode<sp/>reception,</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consider<sp/>error<sp/>as<sp/>blocking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dmarequest<sp/>=<sp/>HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3,<sp/>USART_CR3_DMAR);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((huart-&gt;ErrorCode<sp/>&amp;<sp/>HAL_UART_ERROR_ORE)<sp/>!=<sp/>RESET)<sp/>||<sp/>dmarequest)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Blocking<sp/>error<sp/>:<sp/>transfer<sp/>is<sp/>aborted</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set<sp/>the<sp/>UART<sp/>state<sp/>ready<sp/>to<sp/>be<sp/>able<sp/>to<sp/>start<sp/>again<sp/>the<sp/>process,</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Disable<sp/>Rx<sp/>Interrupts,<sp/>and<sp/>disable<sp/>Rx<sp/>DMA<sp/>request,<sp/>if<sp/>ongoing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//@todo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_EndRxTransfer(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>UART<sp/>DMA<sp/>Rx<sp/>request<sp/>if<sp/>enabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3,<sp/>USART_CR3_DMAR))</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLEAR_BIT(huart-&gt;Instance-&gt;CR3,<sp/>USART_CR3_DMAR);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Abort<sp/>the<sp/>UART<sp/>DMA<sp/>Rx<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(huart-&gt;hdmarx<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>UART<sp/>DMA<sp/>Abort<sp/>callback<sp/>:</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>lead<sp/>to<sp/>call<sp/>HAL_UART_ErrorCallback()<sp/>at<sp/>end<sp/>of<sp/>DMA<sp/>abort<sp/>procedure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//@todo<sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;hdmarx-&gt;XferAbortCallback<sp/>=<sp/>UART_DMAAbortOnError;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(HAL_DMA_Abort_IT(huart-&gt;hdmarx)<sp/>!=<sp/>HAL_OK)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>Directly<sp/>XferAbortCallback<sp/>function<sp/>in<sp/>case<sp/>of<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//@todo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;hdmarx-&gt;XferAbortCallback(huart-&gt;hdmarx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_HandleTypeDef*<sp/>huartptr<sp/>=<sp/>(<sp/>UART_HandleTypeDef*<sp/>)((DMA_HandleTypeDef*<sp/>)(huart-&gt;hdmarx))-&gt;Parent;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huartptr-&gt;RxXferCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huartptr-&gt;TxXferCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_ErrorCallback(huartptr);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>user<sp/>error<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_ErrorCallback(huart);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>user<sp/>error<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_ErrorCallback(huart);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Non<sp/>Blocking<sp/>error<sp/>:<sp/>transfer<sp/>could<sp/>go<sp/>on.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>is<sp/>notified<sp/>to<sp/>user<sp/>through<sp/>user<sp/>error<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_ErrorCallback(huart);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>=<sp/>HAL_UART_ERROR_NONE;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>End<sp/>if<sp/>some<sp/>error<sp/>occurs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>in<sp/>mode<sp/>Transmitter<sp/>------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_ISR_TXE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_TXEIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1ad364d02588fd09332955ff897bd72eb5" kindref="member">UART_IntTx</ref>();<sp/></highlight><highlight class="comment">//@todo<sp/>use<sp/>general<sp/>handler<sp/>according<sp/>to<sp/>HAL-Interface:<sp/>UART_Transmit_IT(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>in<sp/>mode<sp/>Transmitter<sp/>end<sp/>--------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_ISR_TC)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_TCIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a5d5b8f61fe495fe7287979d64bfc77c5" kindref="member">UART_IntRxComp</ref>();<sp/></highlight><highlight class="comment">//@todo<sp/>use<sp/>general<sp/>handler<sp/>according<sp/>to<sp/>HAL-Interface:<sp/><sp/>UART_EndTransmit_IT(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="uart_8h_1ac308c1e7bd9c48ff894bdfee4fc0685d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1ac308c1e7bd9c48ff894bdfee4fc0685d" kindref="member">HAL_UART_CustomIRQHandler</ref>(UART_HandleTypeDef<sp/>*huart)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>isrflags<sp/><sp/><sp/>=<sp/>READ_REG(huart-&gt;Instance-&gt;SR);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cr1its<sp/><sp/><sp/><sp/><sp/>=<sp/>READ_REG(huart-&gt;Instance-&gt;CR1);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cr3its<sp/><sp/><sp/><sp/><sp/>=<sp/>READ_REG(huart-&gt;Instance-&gt;CR3);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>errorflags<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dmarequest<sp/>=<sp/>0x00U;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>no<sp/>error<sp/>occurs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/>errorflags<sp/>=<sp/>(isrflags<sp/>&amp;<sp/>(uint32_t)(USART_SR_PE<sp/>|<sp/>USART_SR_FE<sp/>|<sp/>USART_SR_ORE<sp/>|<sp/>USART_SR_NE));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errorflags<sp/>==<sp/>RESET)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>in<sp/>mode<sp/>Receiver<sp/>-------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_SR_RXNE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_RXNEIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" kindref="member">UART_IntRx</ref>();<sp/></highlight><highlight class="comment">//@todo<sp/>use<sp/>general<sp/>handler<sp/>according<sp/>to<sp/>HAL-Interface:<sp/><sp/>UART_Receive_IT(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>some<sp/>errors<sp/>occur<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((errorflags<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr3its<sp/>&amp;<sp/>(USART_CR3_EIE<sp/>|<sp/>USART_CR1_PEIE))<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>parity<sp/>error<sp/>interrupt<sp/>occurred<sp/>----------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_SR_PE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_PEIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>|=<sp/>HAL_UART_ERROR_PE;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>noise<sp/>error<sp/>interrupt<sp/>occurred<sp/>-----------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_SR_NE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr3its<sp/>&amp;<sp/>USART_CR3_EIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>|=<sp/>HAL_UART_ERROR_NE;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>frame<sp/>error<sp/>interrupt<sp/>occurred<sp/>-----------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_SR_FE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr3its<sp/>&amp;<sp/>USART_CR3_EIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>|=<sp/>HAL_UART_ERROR_FE;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>Over-Run<sp/>interrupt<sp/>occurred<sp/>--------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_SR_ORE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr3its<sp/>&amp;<sp/>USART_CR3_EIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>|=<sp/>HAL_UART_ERROR_ORE;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>UART<sp/>Error<sp/>Call<sp/>back<sp/>function<sp/>if<sp/>need<sp/>be<sp/>--------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(huart-&gt;ErrorCode<sp/>!=<sp/>HAL_UART_ERROR_NONE)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>in<sp/>mode<sp/>Receiver<sp/>-----------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_SR_RXNE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_RXNEIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" kindref="member">UART_IntRx</ref>();<sp/></highlight><highlight class="comment">//@todo<sp/>use<sp/>general<sp/>handler<sp/>according<sp/>to<sp/>HAL-Interface:<sp/><sp/>UART_Receive_IT(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>Overrun<sp/>error<sp/>occurs,<sp/>or<sp/>if<sp/>any<sp/>error<sp/>occurs<sp/>in<sp/>DMA<sp/>mode<sp/>reception,</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consider<sp/>error<sp/>as<sp/>blocking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dmarequest<sp/>=<sp/>HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3,<sp/>USART_CR3_DMAR);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((huart-&gt;ErrorCode<sp/>&amp;<sp/>HAL_UART_ERROR_ORE)<sp/>!=<sp/>RESET)<sp/>||<sp/>dmarequest)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Blocking<sp/>error<sp/>:<sp/>transfer<sp/>is<sp/>aborted</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set<sp/>the<sp/>UART<sp/>state<sp/>ready<sp/>to<sp/>be<sp/>able<sp/>to<sp/>start<sp/>again<sp/>the<sp/>process,</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Disable<sp/>Rx<sp/>Interrupts,<sp/>and<sp/>disable<sp/>Rx<sp/>DMA<sp/>request,<sp/>if<sp/>ongoing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//@todo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_EndRxTransfer(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>UART<sp/>DMA<sp/>Rx<sp/>request<sp/>if<sp/>enabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3,<sp/>USART_CR3_DMAR))</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLEAR_BIT(huart-&gt;Instance-&gt;CR3,<sp/>USART_CR3_DMAR);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Abort<sp/>the<sp/>UART<sp/>DMA<sp/>Rx<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(huart-&gt;hdmarx<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>UART<sp/>DMA<sp/>Abort<sp/>callback<sp/>:</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>lead<sp/>to<sp/>call<sp/>HAL_UART_ErrorCallback()<sp/>at<sp/>end<sp/>of<sp/>DMA<sp/>abort<sp/>procedure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//@todo<sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;hdmarx-&gt;XferAbortCallback<sp/>=<sp/>UART_DMAAbortOnError;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(HAL_DMA_Abort_IT(huart-&gt;hdmarx)<sp/>!=<sp/>HAL_OK)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>Directly<sp/>XferAbortCallback<sp/>function<sp/>in<sp/>case<sp/>of<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//@todo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;hdmarx-&gt;XferAbortCallback(huart-&gt;hdmarx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UART_HandleTypeDef*<sp/>huartptr<sp/>=<sp/>(<sp/>UART_HandleTypeDef*<sp/>)((DMA_HandleTypeDef*<sp/>)(huart-&gt;hdmarx))-&gt;Parent;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huartptr-&gt;RxXferCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huartptr-&gt;TxXferCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_ErrorCallback(huartptr);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>user<sp/>error<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_ErrorCallback(huart);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>user<sp/>error<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_ErrorCallback(huart);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Non<sp/>Blocking<sp/>error<sp/>:<sp/>transfer<sp/>could<sp/>go<sp/>on.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>is<sp/>notified<sp/>to<sp/>user<sp/>through<sp/>user<sp/>error<sp/>callback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_UART_ErrorCallback(huart);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huart-&gt;ErrorCode<sp/>=<sp/>HAL_UART_ERROR_NONE;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>End<sp/>if<sp/>some<sp/>error<sp/>occurs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>in<sp/>mode<sp/>Transmitter<sp/>------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_SR_TXE)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_TXEIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1ad364d02588fd09332955ff897bd72eb5" kindref="member">UART_IntTx</ref>();<sp/></highlight><highlight class="comment">//@todo<sp/>use<sp/>general<sp/>handler<sp/>according<sp/>to<sp/>HAL-Interface:<sp/>UART_Transmit_IT(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>UART<sp/>in<sp/>mode<sp/>Transmitter<sp/>end<sp/>--------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(((isrflags<sp/>&amp;<sp/>USART_SR_TC)<sp/>!=<sp/>RESET)<sp/>&amp;&amp;<sp/>((cr1its<sp/>&amp;<sp/>USART_CR1_TCIE)<sp/>!=<sp/>RESET))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a5d5b8f61fe495fe7287979d64bfc77c5" kindref="member">UART_IntRxComp</ref>();<sp/></highlight><highlight class="comment">//@todo<sp/>use<sp/>general<sp/>handler<sp/>according<sp/>to<sp/>HAL-Interface:<sp/><sp/>UART_EndTransmit_IT(huart);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1a03ea09e13ef4e763fabce35fc3454136" kindref="member">UART_IntRx</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*asc0_wrpoi_rxbuf=(ASC0_RBUF.U<sp/>&amp;<sp/>0xFF);<sp/><sp/><sp/><sp/><sp/>//<sp/>read<sp/>8-Bit<sp/>receive<sp/>buffer<sp/>register<sp/>(like<sp/>ASC0_usGetData(void)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>STM32F767xx<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="uart_8c_1a7084af22bb403999bb4e79efbe6026c1" kindref="member">wrpoi_rxbuf</ref><sp/>=<sp/>(uint8_t)(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[0].Instance-&gt;RDR</highlight><highlight class="comment">/*<sp/>&amp;<sp/>huart3.Mask*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="uart_8c_1a7084af22bb403999bb4e79efbe6026c1" kindref="member">wrpoi_rxbuf</ref><sp/>=<sp/>(uint8_t)(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[0].Instance-&gt;DR</highlight><highlight class="comment">/*<sp/>&amp;<sp/>huart3.Mask*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*pointer<sp/>handling<sp/>of<sp/>ringbuffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++<ref refid="uart_8c_1a7084af22bb403999bb4e79efbe6026c1" kindref="member">wrpoi_rxbuf</ref><sp/>&gt;=<sp/>&amp;<ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[<ref refid="uart_8h_1a301215b09f88add5cd0e8be518bc4d7b" kindref="member">RXBUF_LENGTH</ref>])</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a7084af22bb403999bb4e79efbe6026c1" kindref="member">wrpoi_rxbuf</ref><sp/>=<sp/>&amp;<ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[0];</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>overwrite<sp/>of<sp/>read<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>todo:<sp/>this<sp/>is<sp/>just<sp/>a<sp/>very<sp/>simple<sp/>debug/demonstration<sp/>implementation<sp/>for<sp/>decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="uart_8c_1a0ec8fe837cb588ecc7beb08747a12f79" kindref="member">uart_com_receive_slot</ref><sp/>&lt;<sp/><ref refid="uart_8h_1a50224b15fcbc27089556a0c5ef4c4ff7" kindref="member">UART_COM_RECEIVEBUFFER_LENGTH</ref>-1)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>*(<ref refid="uart_8c_1a7e7befd2277356057974ae817e8865e3" kindref="member">uart_com_receivedbyte</ref><sp/>+<sp/><ref refid="uart_8c_1a0ec8fe837cb588ecc7beb08747a12f79" kindref="member">uart_com_receive_slot</ref>)<sp/>=<sp/>*<ref refid="uart_8c_1acd7e8281720586d294888d0a235a2233" kindref="member">rdpoi_rxbuf</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a0ec8fe837cb588ecc7beb08747a12f79" kindref="member">uart_com_receive_slot</ref>++;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*pointer<sp/>handling<sp/>of<sp/>ringbuffer*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++<ref refid="uart_8c_1acd7e8281720586d294888d0a235a2233" kindref="member">rdpoi_rxbuf</ref><sp/>&gt;=<sp/>&amp;<ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[RXBUF_LENGTH])</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1acd7e8281720586d294888d0a235a2233" kindref="member">rdpoi_rxbuf</ref><sp/>=<sp/>&amp;<ref refid="uart_8c_1afc42bc53e6ddf077c65cebc4ae71a704" kindref="member">rxbuf</ref>[0];</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="uart_8c_1ad364d02588fd09332955ff897bd72eb5" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1ad364d02588fd09332955ff897bd72eb5" kindref="member">UART_IntTx</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" kindref="member">rdpoi_txbuf</ref><sp/>&gt;=<sp/>&amp;<ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[<ref refid="uart_8h_1a73dd4c3ae3c5bcfc236bed249e546865" kindref="member">TXBUF_LENGTH</ref>])</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" kindref="member">rdpoi_txbuf</ref><sp/>=<sp/>&amp;<ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[0];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" kindref="member">rdpoi_txbuf</ref><sp/>!=<sp/><ref refid="uart_8c_1a6f569957b90c3acc74ed9580c5eef98b" kindref="member">wrpoi_txbuf</ref>)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1ab43ee40fd88b580ae7026b1fff9c9648" kindref="member">Msg0SendBusy</ref>=<ref refid="uart_8c_1a93d184f9ed1981aab374b9b583cd5261" kindref="member">MSG_BUSY</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ASC0_vSendData(*asc0_rdpoi_txbuf++);<sp/>//<sp/>send<sp/>when<sp/>pointers<sp/>unequal<sp/>(values<sp/>in<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>STM32F767xx<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[0].Instance-&gt;TDR<sp/>=<sp/>(uint16_t)<sp/>(*<ref refid="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" kindref="member">rdpoi_txbuf</ref>++);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[0].Instance-&gt;DR<sp/>=<sp/>(uint16_t)<sp/>(*<ref refid="uart_8c_1a20501e8a7cbb795759e2f047e3ae30f3" kindref="member">rdpoi_txbuf</ref>++);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>UART<sp/>Transmit<sp/>Data<sp/>Register<sp/>Empty<sp/>Interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLEAR_BIT(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[0].Instance-&gt;CR1,<sp/>USART_CR1_TXEIE);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>UART<sp/>Transmit<sp/>Complete<sp/>Interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[0].Instance-&gt;CR1,<sp/>USART_CR1_TCIE);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uart_8c_1ab43ee40fd88b580ae7026b1fff9c9648" kindref="member">Msg0SendBusy</ref>=<ref refid="uart_8c_1abca84e567fdf8d965cb33aa7c9508574" kindref="member">MSG_NOT_BUSY</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="uart_8c_1a5d5b8f61fe495fe7287979d64bfc77c5" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1a5d5b8f61fe495fe7287979d64bfc77c5" kindref="member">UART_IntRxComp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>UART<sp/>Transmit<sp/>Complete<sp/>Interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>CLEAR_BIT(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[0].Instance-&gt;CR1,<sp/>USART_CR1_TCIE);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optional:<sp/>call<sp/>TX<sp/>complete<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="uart_8h_1a7a6a0383091751db2390834f1af685e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uart_8c_1a7a6a0383091751db2390834f1af685e7" kindref="member">UART_vWrite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*source)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>taskENTER_CRITICAL();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uart_8c_1a6f569957b90c3acc74ed9580c5eef98b" kindref="member">wrpoi_txbuf</ref>=<ref refid="uart_8c_1adb40c35394bc4ff4e750c9f4dfe1aa95" kindref="member">UART_txbuf_copy</ref><sp/>(<ref refid="uart_8c_1a6f569957b90c3acc74ed9580c5eef98b" kindref="member">wrpoi_txbuf</ref>,(uint8_t*)<sp/>source);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="uart_8c_1ab43ee40fd88b580ae7026b1fff9c9648" kindref="member">Msg0SendBusy</ref>==<ref refid="uart_8c_1abca84e567fdf8d965cb33aa7c9508574" kindref="member">MSG_NOT_BUSY</ref>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>UART<sp/>Transmit<sp/>Data<sp/>Register<sp/>Empty<sp/>Interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_BIT(<ref refid="uart__cfg_8c_1a982ee7c2007d1f058e78f05a70995216" kindref="member">uart_cfg</ref>[0].Instance-&gt;CR1,<sp/>USART_CR1_TXEIE);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="uart_8c_1adb40c35394bc4ff4e750c9f4dfe1aa95" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<ref refid="uart_8c_1adb40c35394bc4ff4e750c9f4dfe1aa95" kindref="member">UART_txbuf_copy</ref><sp/>(uint8_t<sp/>*ptrb,<sp/>uint8_t<sp/>*ptra)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*tmpPtr<sp/>=<sp/>ptra;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*ptra)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptrb++=*ptra++;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ptrb<sp/>&gt;=<sp/>&amp;<ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[<ref refid="uart_8h_1a73dd4c3ae3c5bcfc236bed249e546865" kindref="member">TXBUF_LENGTH</ref>])</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrb<sp/>=<sp/>&amp;<ref refid="uart_8c_1a8990aadc014fe913da95339f543da06e" kindref="member">txbuf</ref>[0];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>do<sp/>not<sp/>send<sp/>NULL-Value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>buffer<sp/>a<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*tmpPtr)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tmpPtr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpPtr++;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptrb;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/uart/uart.c"/>
  </compounddef>
</doxygen>
