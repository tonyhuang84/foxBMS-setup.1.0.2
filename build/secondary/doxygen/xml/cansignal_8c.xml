<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="cansignal_8c" kind="file" language="C++">
    <compoundname>cansignal.c</compoundname>
    <includes refid="general_8h" local="yes">general.h</includes>
    <includes refid="cansignal_8h" local="yes">cansignal.h</includes>
    <includes refid="mcu_8h" local="yes">mcu.h</includes>
    <includes refid="os_8h" local="yes">os.h</includes>
    <includes refid="can_8h" local="yes">can.h</includes>
    <includes refid="diag_8h" local="yes">diag.h</includes>
    <includes refid="database_8h" local="yes">database.h</includes>
    <incdepgraph>
      <node id="415">
        <label>database.h</label>
        <link refid="database_8h"/>
        <childnode refid="416" relation="include">
        </childnode>
      </node>
      <node id="403">
        <label>io_package_cfg.h</label>
        <link refid="io__package__cfg_8h"/>
      </node>
      <node id="398">
        <label>cansignal_cfg.h</label>
        <link refid="cansignal__cfg_8h"/>
        <childnode refid="399" relation="include">
        </childnode>
      </node>
      <node id="413">
        <label>rtc.h</label>
        <link refid="rtc_8h"/>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
      </node>
      <node id="395">
        <label>stdint.h</label>
      </node>
      <node id="416">
        <label>database_cfg.h</label>
        <link refid="database__cfg_8h"/>
        <childnode refid="411" relation="include">
        </childnode>
      </node>
      <node id="405">
        <label>mcu.h</label>
        <link refid="mcu_8h"/>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
      <node id="407">
        <label>cmsis_os.h</label>
      </node>
      <node id="411">
        <label>batterysystem_cfg.h</label>
        <link refid="batterysystem__cfg_8h"/>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
      <node id="406">
        <label>os.h</label>
        <link refid="os_8h"/>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="400">
        <label>mcu_cfg.h</label>
        <link refid="mcu__cfg_8h"/>
        <childnode refid="401" relation="include">
        </childnode>
        <childnode refid="402" relation="include">
        </childnode>
      </node>
      <node id="404">
        <label>io_mcu_cfg.h</label>
        <link refid="io__mcu__cfg_8h"/>
      </node>
      <node id="402">
        <label>io_cfg.h</label>
        <link refid="io__cfg_8h"/>
        <childnode refid="400" relation="include">
        </childnode>
        <childnode refid="403" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
      </node>
      <node id="399">
        <label>can_cfg.h</label>
        <link refid="can__cfg_8h"/>
        <childnode refid="400" relation="include">
        </childnode>
      </node>
      <node id="396">
        <label>std_types.h</label>
        <link refid="std__types_8h"/>
      </node>
      <node id="393">
        <label>cansignal.c</label>
        <link refid="cansignal_8c"/>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
        <childnode refid="406" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="409" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
      </node>
      <node id="397">
        <label>cansignal.h</label>
        <link refid="cansignal_8h"/>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
      <node id="408">
        <label>can.h</label>
        <link refid="can_8h"/>
        <childnode refid="399" relation="include">
        </childnode>
      </node>
      <node id="412">
        <label>diag_id_cfg.h</label>
        <link refid="diag__id__cfg_8h"/>
      </node>
      <node id="394">
        <label>general.h</label>
        <link refid="general_8h"/>
        <childnode refid="395" relation="include">
        </childnode>
        <childnode refid="396" relation="include">
        </childnode>
      </node>
      <node id="410">
        <label>diag_cfg.h</label>
        <link refid="diag__cfg_8h"/>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
      </node>
      <node id="401">
        <label>stm32f4xx_hal.h</label>
      </node>
      <node id="414">
        <label>rtc_cfg.h</label>
        <link refid="rtc__cfg_8h"/>
        <childnode refid="400" relation="include">
        </childnode>
      </node>
      <node id="409">
        <label>diag.h</label>
        <link refid="diag_8h"/>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cansignal_8c_1a3e96374cc8b9ba028aaee3493e531b41" prot="public" static="yes" mutable="no">
        <type><ref refid="structCANS__STATE__s" kindref="compound">CANS_STATE_s</ref></type>
        <definition>CANS_STATE_s cans_state</definition>
        <argsstring></argsstring>
        <name>cans_state</name>
        <initializer>= {
        .periodic_enable = <ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>,
        .current_sensor_present = <ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>,
        .current_sensor_cc_present = <ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>,
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="55" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cansignal_8c_1ab5c8acc2d93c19ae8e42c53328e0f45c" prot="public" static="yes" mutable="no">
        <type><ref refid="structDATA__BLOCK__STATEREQUEST__s" kindref="compound">DATA_BLOCK_STATEREQUEST_s</ref></type>
        <definition>DATA_BLOCK_STATEREQUEST_s canstatereq_tab</definition>
        <argsstring></argsstring>
        <name>canstatereq_tab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="61" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cansignal_8c_1a0f084eaaab6753114dc99ac3e3b6fe60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>static STD_RETURN_TYPE_e CANS_PeriodicTransmit</definition>
        <argsstring>(void)</argsstring>
        <name>CANS_PeriodicTransmit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>handles the processing of messages that are meant to be transmitted.</para><para>This function looks for the repetition times and the repetition phase of messages that are intended to be sent periodically. If a comparison with an internal counter (i.e., the counter how often this function has been called) states that a transmit is pending, the message is composed by call of CANS_ComposeMessage and transfered to the buffer of the CAN module. If a callback function is declared in configuration, this callback is called after successful transmission.</para><para><simplesect kind="return"><para>E_OK if a successful transfer to CAN buffer occured, E_NOT_OK otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="64" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="103" bodyend="154"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="can__cfg_8c_1a57045378d523cac4ab2fd57935c6ff2a" compoundref="can__cfg_8c" startline="263">can_CAN0_tx_length</references>
        <references refid="group__CONFIG__CANSIGNAL_1ga9060669d55a55b34ebfb1228bc33ac66" compoundref="cansignal__cfg_8h" startline="50">CANS_TICK_MS</references>
        <references refid="can__cfg_8c_1aabb961ce7a40e9712480c56be88f686b" compoundref="can__cfg_8c" startline="254">can_CAN0_messages_tx</references>
        <references refid="cansignal_8c_1aa3c553a69a0c9228e72689f26125653c" compoundref="cansignal_8c" startline="270" endline="299">CANS_ComposeMessage</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" compoundref="can__cfg_8h" startline="373">CanPdu::sdu</references>
        <references refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" compoundref="can__cfg_8h" startline="374">CanPdu::id</references>
        <references refid="structCAN__MSG__TX__TYPE__s_1ac97ba868bdf829c4661f65a000f11bdd" compoundref="can__cfg_8h" startline="365">CAN_MSG_TX_TYPE_s::ID</references>
        <references refid="can_8c_1ad7386c0b7048c957b8453b6492fb544f" compoundref="can_8c" startline="860" endline="933">CAN_Send</references>
        <references refid="structCanPdu_1a11b3ccf3bb1e8f402b99a471ea316b29" compoundref="can__cfg_8h" startline="375">CanPdu::dlc</references>
        <references refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" compoundref="diag_8c" startline="449" endline="481">DIAG_Handler</references>
        <references refid="diag__cfg_8h_1a0266ed73d26538b4999bf50b3a1ec739" compoundref="diag__cfg_8h" startline="117">DIAG_CH_CANS_CAN_MOD_FAILURE</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" compoundref="diag__id__cfg_8h" startline="44">DIAG_EVENT_NOK</references>
        <references refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" compoundref="std__types_8h" startline="40">NULL_PTR</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" compoundref="diag__id__cfg_8h" startline="43">DIAG_EVENT_OK</references>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
        <references refid="structCAN__MSG__TX__TYPE__s_1a96819389d64625a61b9c54c8bf9c4ac7" compoundref="can__cfg_8h" startline="369">CAN_MSG_TX_TYPE_s::cbk_func</references>
        <references refid="can__cfg_8c_1a97b1060f51dfffc2d68fb471ac5cf4ba" compoundref="can__cfg_8c" startline="264">can_CAN1_tx_length</references>
        <references refid="can__cfg_8c_1ae1dc85e1c4c9889f29ba37e10c2111b9" compoundref="can__cfg_8c" startline="259">can_CAN1_messages_tx</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="std__types_8h" startline="42">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1aee4ed4a68e69e2b5c9b197b6d491d88e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref></type>
        <definition>static STD_RETURN_TYPE_e CANS_PeriodicReceive</definition>
        <argsstring>(void)</argsstring>
        <name>CANS_PeriodicReceive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>handles the processing of received CAN messages.</para><para>This function gets the messages in the receive buffer of the CAN module. If a message ID is matching one of the IDs in the configuration of CANS module, the signal processing is executed by call to CANS_ParseMessage.</para><para><simplesect kind="return"><para>E_OK, if a message has been received and parsed, E_NOT_OK otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="65" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="167" bodyend="199"/>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" compoundref="std__types_8h" startline="59">E_NOT_OK</references>
        <references refid="can_8c_1a043869ff22e53aac90ce0895bdf60ff6" compoundref="can_8c" startline="1190" endline="1235">CAN_ReceiveBuffer</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" compoundref="std__types_8h" startline="58">E_OK</references>
        <references refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" compoundref="can__cfg_8c" startline="301">can_CAN0_rx_length</references>
        <references refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" compoundref="can__cfg_8h" startline="374">CanPdu::id</references>
        <references refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" compoundref="can__cfg_8c" startline="271">can0_RxMsgs</references>
        <references refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" compoundref="can__cfg_8h" startline="345">CAN_MSG_RX_TYPE::ID</references>
        <references refid="cansignal_8c_1a91fb02ee3639cfb6e7791f83051ba261" compoundref="cansignal_8c" startline="308" endline="336">CANS_ParseMessage</references>
        <references refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" compoundref="can__cfg_8h" startline="373">CanPdu::sdu</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" compoundref="can__cfg_8c" startline="302">can_CAN1_rx_length</references>
        <references refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" compoundref="can__cfg_8c" startline="286">can1_RxMsgs</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1af89a8da997248a0cd5900fb5f1d3d1d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CANS_SetSignalData</definition>
        <argsstring>(CANS_signal_s signal, uint64_t value, uint8_t *dataPtr)</argsstring>
        <name>CANS_SetSignalData</name>
        <param>
          <type><ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref></type>
          <declname>signal</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dataPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>assembles signal data in CAN message data</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>signal identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>signal value data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN message data, in which the signal data is inserted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="66" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="251" bodyend="260"/>
        <references refid="structCANS__signal__s_1a89169c8eea6dd1f792b828b19974d4e0" compoundref="cansignal__cfg_8h" startline="201">CANS_signal_s::bit_position</references>
        <references refid="structCANS__signal__s_1a8d3a2074ed029b0ffaea5ba1e10bfa04" compoundref="cansignal__cfg_8h" startline="202">CANS_signal_s::bit_length</references>
        <references refid="cansignal_8c_1a7d95cbf333bab22f926b97262b20a283" compoundref="cansignal_8c" startline="207" endline="215">CANS_GetBitmask</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1a55ae468a92bef75f84a27145f603eb72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CANS_GetSignalData</definition>
        <argsstring>(uint64_t *dst, CANS_signal_s signal, uint8_t *dataPtr)</argsstring>
        <name>CANS_GetSignalData</name>
        <param>
          <type>uint64_t *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref></type>
          <declname>signal</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dataPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>extracts signal data from CAN message data</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where the signal data should be copied to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signal</parametername>
</parameternamelist>
<parameterdescription>
<para>signal identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dataPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN message data, from which signal data is extracted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="67" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="224" bodyend="243"/>
        <references refid="structCANS__signal__s_1a89169c8eea6dd1f792b828b19974d4e0" compoundref="cansignal__cfg_8h" startline="201">CANS_signal_s::bit_position</references>
        <references refid="structCANS__signal__s_1a8d3a2074ed029b0ffaea5ba1e10bfa04" compoundref="cansignal__cfg_8h" startline="202">CANS_signal_s::bit_length</references>
        <references refid="cansignal_8c_1a7d95cbf333bab22f926b97262b20a283" compoundref="cansignal_8c" startline="207" endline="215">CANS_GetBitmask</references>
        <references refid="structCANS__signal__s_1a9f7b03efc15a30bcb67e83898526a2e7" compoundref="cansignal__cfg_8h" startline="203">CANS_signal_s::max</references>
        <references refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" compoundref="diag_8c" startline="449" endline="481">DIAG_Handler</references>
        <references refid="diag__cfg_8h_1a3344d3250665d8f27247202c839a9eb5" compoundref="diag__cfg_8h" startline="115">DIAG_CH_CANS_MAX_VALUE_VIOLATE</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" compoundref="diag__id__cfg_8h" startline="44">DIAG_EVENT_NOK</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" compoundref="diag__id__cfg_8h" startline="43">DIAG_EVENT_OK</references>
        <references refid="structCANS__signal__s_1aa64f65fb663c8a05d56d8be16fd05697" compoundref="cansignal__cfg_8h" startline="204">CANS_signal_s::min</references>
        <references refid="diag__cfg_8h_1ae516e16008bfd1f42f080216cbc822a4" compoundref="diag__cfg_8h" startline="116">DIAG_CH_CANS_MIN_VALUE_VIOLATE</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1aa3c553a69a0c9228e72689f26125653c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CANS_ComposeMessage</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, CANS_messagesTx_e msgIdx, uint8_t dataptr[])</argsstring>
        <name>CANS_ComposeMessage</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type><ref refid="cansignal__cfg_8h_1ae93daf397f977d7d1a364aabec0fc5c2" kindref="member">CANS_messagesTx_e</ref></type>
          <declname>msgIdx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dataptr</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>composes message data from all signals associated with this msgIdx</para><para>signal data is received by callback getter functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msgIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>message index for which the data should be composed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dataptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where the message data should be stored to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="68" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="270" bodyend="299"/>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="cansignal__cfg_8c_1a00b5c5f6e2c4347b7898ae4cd8946670" compoundref="cansignal__cfg_8c" startline="74">cans_CAN0_signals_tx</references>
        <references refid="cansignal__cfg_8c_1a76a2b16912c01559b1281c463d4d7a0f" compoundref="cansignal__cfg_8c" startline="119">cans_CAN0_signals_tx_length</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="cansignal__cfg_8c_1a7441a668581186628ab12dd0ebdd0f7c" compoundref="cansignal__cfg_8c" startline="78">cans_CAN1_signals_tx</references>
        <references refid="cansignal__cfg_8c_1a1425407d1b20511625b6cd6b340ebd57" compoundref="cansignal__cfg_8c" startline="120">cans_CAN1_signals_tx_length</references>
        <references refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" compoundref="std__types_8h" startline="40">NULL_PTR</references>
        <references refid="structCANS__signal__s_1ab8901c9d328e1d934dde0d7b6760e308" compoundref="cansignal__cfg_8h" startline="212">CANS_signal_s::getter</references>
        <references refid="cansignal_8c_1af89a8da997248a0cd5900fb5f1d3d1d0" compoundref="cansignal_8c" startline="251" endline="260">CANS_SetSignalData</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1a91fb02ee3639cfb6e7791f83051ba261" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CANS_ParseMessage</definition>
        <argsstring>(CAN_NodeTypeDef_e canNode, CANS_messagesRx_e msgIdx, uint8_t dataptr[])</argsstring>
        <name>CANS_ParseMessage</name>
        <param>
          <type><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref></type>
          <declname>canNode</declname>
        </param>
        <param>
          <type><ref refid="cansignal__cfg_8h_1a87850e24db2ea06885d1bb80a40a93f9" kindref="member">CANS_messagesRx_e</ref></type>
          <declname>msgIdx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dataptr</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>parses signal data from message associated with this msgIdx </para>        </briefdescription>
        <detaileddescription>
<para>signal data is received by callback setter functions</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msgIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>message index for which the data should be parsed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dataptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer where the message data is stored </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="69" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="308" bodyend="336"/>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" compoundref="can_8h" startline="72">CAN_NODE0</references>
        <references refid="cansignal__cfg_8c_1a09fad45966212a86c0470b1608275b42" compoundref="cansignal__cfg_8c" startline="122">cans_CAN0_signals_rx_length</references>
        <references refid="cansignal__cfg_8c_1aab49b0b2fd3ee38354c5d64f75416425" compoundref="cansignal__cfg_8c" startline="82">cans_CAN0_signals_rx</references>
        <references refid="cansignal_8c_1a55ae468a92bef75f84a27145f603eb72" compoundref="cansignal_8c" startline="224" endline="243">CANS_GetSignalData</references>
        <references refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" compoundref="std__types_8h" startline="40">NULL_PTR</references>
        <references refid="structCANS__signal__s_1a6f6cfe20670b728efee60498bf51e321" compoundref="cansignal__cfg_8h" startline="211">CANS_signal_s::setter</references>
        <references refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" compoundref="can_8h" startline="71">CAN_NODE1</references>
        <references refid="cansignal__cfg_8c_1a14f12d8fd481484941df1876cbd63c64" compoundref="cansignal__cfg_8c" startline="123">cans_CAN1_signals_rx_length</references>
        <references refid="cansignal__cfg_8c_1a6a25a471299bc5e3290e06a8f79989e7" compoundref="cansignal__cfg_8c" startline="100">cans_CAN1_signals_rx</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1ad7dc2fc23723da5905c2a71247ff3f1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t CANS_CheckCanTiming</definition>
        <argsstring>(void)</argsstring>
        <name>CANS_CheckCanTiming</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the CAN messages come in the specified time window. </para>        </briefdescription>
        <detaileddescription>
<para>if actual time stamp- previous time stamp is &gt; 96 and &lt; 104 check is good else the check is bad</para><para><simplesect kind="return"><para>TRUE if timing is in tolerance range, FLASE if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="70" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="347" bodyend="400"/>
        <references refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="std__types_8h" startline="43">FALSE</references>
        <references refid="mcu_8c_1a09e5f493b1f3dc15a07b7b72ad69cede" compoundref="mcu_8c" startline="164" endline="166">MCU_GetTimeStamp</references>
        <references refid="database_8c_1ace052ca2c5098dcade967992ecebc8bf" compoundref="database_8c" startline="195" endline="225">DATA_GetTable</references>
        <references refid="database__cfg_8h_1a0b445280174407a1a20ae8a173aeb6b9" compoundref="database__cfg_8h" startline="125">DATA_BLOCK_ID_STATEREQUEST</references>
        <references refid="database__cfg_8h_1a3692160bb5c67925e83710d276f461e0" compoundref="database__cfg_8h" startline="132">DATA_BLOCK_ID_SYSTEMSTATE</references>
        <references refid="structDATA__BLOCK__STATEREQUEST__s_1ab503dd29a7cfaa03042b2acaeab1d5f7" compoundref="database__cfg_8h" startline="282">DATA_BLOCK_STATEREQUEST_s::timestamp</references>
        <references refid="structDATA__BLOCK__STATEREQUEST__s_1afe4115eefe4358fc967e26121d70995a" compoundref="database__cfg_8h" startline="283">DATA_BLOCK_STATEREQUEST_s::previous_timestamp</references>
        <references refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="std__types_8h" startline="42">TRUE</references>
        <references refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" compoundref="diag_8c" startline="449" endline="481">DIAG_Handler</references>
        <references refid="diag__cfg_8h_1a71cdf76a7750aa26e7b67cbfd2615e67" compoundref="diag__cfg_8h" startline="171">DIAG_CH_CAN_TIMING</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" compoundref="diag__id__cfg_8h" startline="43">DIAG_EVENT_OK</references>
        <references refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" compoundref="std__types_8h" startline="40">NULL_PTR</references>
        <references refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" compoundref="diag__id__cfg_8h" startline="44">DIAG_EVENT_NOK</references>
        <references refid="database__cfg_8h_1a8f42993f5e17a2d234df914e08d9e3a9" compoundref="database__cfg_8h" startline="123">DATA_BLOCK_ID_CURRENT</references>
        <references refid="structDATA__BLOCK__CURRENT__s_1ac93da9c37d00d7942aeaa4b4473a6431" compoundref="database__cfg_8h" startline="247">DATA_BLOCK_CURRENT_s::timestamp</references>
        <references refid="cansignal__cfg_8h_1a47ab8f56379070261ca015aaa0dd334d" compoundref="cansignal__cfg_8h" startline="56">CANS_SENSOR_RESPONSE_TIMEOUT_MS</references>
        <references refid="diag__cfg_8h_1a8da7a136ff2c0fac2db6f85b2fa26319" compoundref="diag__cfg_8h" startline="179">DIAG_CH_CURRENT_SENSOR_RESPONDING</references>
        <references refid="structCANS__STATE__s_1a15f08f9047985a761cc09ec005e73b4c" compoundref="cansignal_8h" startline="51">CANS_STATE_s::current_sensor_present</references>
        <references refid="cansignal_8c_1aacb4821468ac8968f70d0ce692105af4" compoundref="cansignal_8c" startline="429" endline="439">CANS_SetCurrentSensorPresent</references>
        <references refid="structDATA__BLOCK__SYSTEMSTATE__s_1ad54e397711ca8f7fa0162e8294ad8899" compoundref="database__cfg_8h" startline="383">DATA_BLOCK_SYSTEMSTATE_s::can_cc_used</references>
        <references refid="structDATA__BLOCK__CURRENT__s_1a0e273c20b7cc95e1b982f817067ab6be" compoundref="database__cfg_8h" startline="255">DATA_BLOCK_CURRENT_s::timestamp_cc</references>
        <references refid="diag__cfg_8h_1acd788c9e93973bd1cbac3f8bdba3e0dc" compoundref="diag__cfg_8h" startline="175">DIAG_CH_CAN_CC_RESPONDING</references>
        <references refid="structCANS__STATE__s_1a68d948a0280d50227217d7164ffa4bab" compoundref="cansignal_8h" startline="52">CANS_STATE_s::current_sensor_cc_present</references>
        <references refid="cansignal_8c_1af00a202e9b366122c385701d513667f8" compoundref="cansignal_8c" startline="448" endline="458">CANS_SetCurrentSensorCCPresent</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1aacb4821468ac8968f70d0ce692105af4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CANS_SetCurrentSensorPresent</definition>
        <argsstring>(uint8_t command)</argsstring>
        <name>CANS_SetCurrentSensorPresent</name>
        <param>
          <type>uint8_t</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>set flag for presence of current sensor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="71" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="429" bodyend="439"/>
        <references refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="std__types_8h" startline="42">TRUE</references>
        <references refid="structCANS__STATE__s_1a15f08f9047985a761cc09ec005e73b4c" compoundref="cansignal_8h" startline="51">CANS_STATE_s::current_sensor_present</references>
        <references refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="std__types_8h" startline="43">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1af00a202e9b366122c385701d513667f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CANS_SetCurrentSensorCCPresent</definition>
        <argsstring>(uint8_t command)</argsstring>
        <name>CANS_SetCurrentSensorCCPresent</name>
        <param>
          <type>uint8_t</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>set flag for sending of C-C by current sensor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="72" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="448" bodyend="458"/>
        <references refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="std__types_8h" startline="42">TRUE</references>
        <references refid="structCANS__STATE__s_1a68d948a0280d50227217d7164ffa4bab" compoundref="cansignal_8h" startline="52">CANS_STATE_s::current_sensor_cc_present</references>
        <references refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="std__types_8h" startline="43">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1a5c4ee29efe0675c64a5a1680b0abcde9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CANS_Init</definition>
        <argsstring>(void)</argsstring>
        <name>CANS_Init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initializes local variables and module internals needed to use conversion of can signals. Until now no initialization is needed and thus the function does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="76" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1a71e4775d942e6f8392927858d08c2c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CANS_MainFunction</definition>
        <argsstring>(void)</argsstring>
        <name>CANS_MainFunction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>handles the conversion of can signals from and to datamanager database or other modules defined by the getter and setter configuration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="80" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="80" bodyend="88"/>
        <references refid="cansignal_8c_1aee4ed4a68e69e2b5c9b197b6d491d88e" compoundref="cansignal_8c" startline="167" endline="199">CANS_PeriodicReceive</references>
        <references refid="cansignal_8c_1ad7dc2fc23723da5905c2a71247ff3f1c" compoundref="cansignal_8c" startline="347" endline="400">CANS_CheckCanTiming</references>
        <references refid="structCANS__STATE__s_1a7db4ec6006576dc7a1d63c82802fbcb4" compoundref="cansignal_8h" startline="50">CANS_STATE_s::periodic_enable</references>
        <references refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="std__types_8h" startline="42">TRUE</references>
        <references refid="cansignal_8c_1a0f084eaaab6753114dc99ac3e3b6fe60" compoundref="cansignal_8c" startline="103" endline="154">CANS_PeriodicTransmit</references>
        <references refid="diag_8c_1a7970909aa22bb87427a96c694fbab0e4" compoundref="diag_8c" startline="709" endline="718">DIAG_SysMonNotify</references>
        <references refid="diag__cfg_8h_1ab8bcd0c1c3cbdf47eae14308b979a78fa845396d905a4e0f39ea2d7174ab1b69e" compoundref="diag__cfg_8h" startline="297">DIAG_SYSMON_CANS_ID</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1a7d95cbf333bab22f926b97262b20a283" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t CANS_GetBitmask</definition>
        <argsstring>(uint8_t bitlength)</argsstring>
        <name>CANS_GetBitmask</name>
        <param>
          <type>uint8_t</type>
          <declname>bitlength</declname>
        </param>
        <briefdescription>
<para>generates bitfield, which masks the bits where the actual signal (defined by its bitlength) is located </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitlength</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the signal in bits</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bitmask bitfield mask </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="207" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="207" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1a28c789e881eaa97bf87a0b4e51f40423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CANS_Enable_Periodic</definition>
        <argsstring>(uint8_t command)</argsstring>
        <name>CANS_Enable_Periodic</name>
        <param>
          <type>uint8_t</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>enable/disable the periodic transmit/receive. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="409" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="409" bodyend="419"/>
        <references refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="std__types_8h" startline="42">TRUE</references>
        <references refid="structCANS__STATE__s_1a7db4ec6006576dc7a1d63c82802fbcb4" compoundref="cansignal_8h" startline="50">CANS_STATE_s::periodic_enable</references>
        <references refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="std__types_8h" startline="43">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1a94e479f449b20c73b65d165cdae1d482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CANS_IsCurrentSensorPresent</definition>
        <argsstring>(void)</argsstring>
        <name>CANS_IsCurrentSensorPresent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>set flag for presence of current sensor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>retval TRUE if a current sensor is present, FALSE otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="468" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="468" bodyend="474"/>
        <references refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="std__types_8h" startline="43">FALSE</references>
        <references refid="structCANS__STATE__s_1a15f08f9047985a761cc09ec005e73b4c" compoundref="cansignal_8h" startline="51">CANS_STATE_s::current_sensor_present</references>
      </memberdef>
      <memberdef kind="function" id="cansignal_8c_1ac4c69a3c7d81c33764178e49e55b327a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CANS_IsCurrentSensorCCPresent</definition>
        <argsstring>(void)</argsstring>
        <name>CANS_IsCurrentSensorCCPresent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>set flag for sending of C-C by current sensor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>retval TRUE if C-C is being sent, FALSE otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" line="484" column="1" bodyfile="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c" bodystart="484" bodyend="490"/>
        <references refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="std__types_8h" startline="43">FALSE</references>
        <references refid="structCANS__STATE__s_1a68d948a0280d50227217d7164ffa4bab" compoundref="cansignal_8h" startline="52">CANS_STATE_s::current_sensor_cc_present</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Messages and signal settings for the CAN driver. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para><copy/> 2010 - 2017, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V. All rights reserved.</para></simplesect>
BSD 3-Clause License Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<orderedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para></listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para></listitem><listitem><para>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para></listitem></orderedlist>
</para><para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</para><para>We kindly request you to use one or more of the following phrases to refer to foxBMS in your hardware, software, documentation or advertising materials:</para><para><Prime/>This product uses parts of foxBMS<registered/><Prime/></para><para><Prime/>This product includes parts of foxBMS<registered/><Prime/></para><para><Prime/>This product is derived from foxBMS<registered/><Prime/></para><para><simplesect kind="author"><para>foxBMS Team </para></simplesect>
<simplesect kind="date"><para>01.10.2015 (date of creation)</para></simplesect>
<simplesect kind="par"><title>Module-prefix</title><para>CANS</para></simplesect>
generic conversion module of Can signals from CAN buffered reception to DATA Manager and vice versa </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="37"><highlight class="comment">/*==================<sp/>Includes<sp/>=============================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>recommended<sp/>include<sp/>order<sp/>of<sp/>header<sp/>files:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>1.<sp/><sp/><sp/><sp/>include<sp/>general.h</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>2.<sp/><sp/><sp/><sp/>include<sp/>module&apos;s<sp/>own<sp/>header</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>3...<sp/><sp/>other<sp/>headers</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="general_8h" kindref="compound">general.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cansignal_8h" kindref="compound">cansignal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mcu_8h" kindref="compound">mcu.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="os_8h" kindref="compound">os.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="can_8h" kindref="compound">can.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="diag_8h" kindref="compound">diag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="database_8h" kindref="compound">database.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Macros<sp/>and<sp/>Definitions<sp/>===============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Constant<sp/>and<sp/>Variable<sp/>Definitions<sp/>====================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="cansignal_8c_1a3e96374cc8b9ba028aaee3493e531b41" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structCANS__STATE__s" kindref="compound">CANS_STATE_s</ref><sp/><ref refid="cansignal_8c_1a3e96374cc8b9ba028aaee3493e531b41" kindref="member">cans_state</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structCANS__STATE__s_1a7db4ec6006576dc7a1d63c82802fbcb4" kindref="member">periodic_enable</ref><sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.current_sensor_present<sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.current_sensor_cc_present<sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="cansignal_8c_1ab5c8acc2d93c19ae8e42c53328e0f45c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structDATA__BLOCK__STATEREQUEST__s" kindref="compound">DATA_BLOCK_STATEREQUEST_s</ref><sp/><ref refid="cansignal_8c_1ab5c8acc2d93c19ae8e42c53328e0f45c" kindref="member">canstatereq_tab</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Prototypes<sp/>==================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="cansignal_8c_1a0f084eaaab6753114dc99ac3e3b6fe60" kindref="member">CANS_PeriodicTransmit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="cansignal_8c_1aee4ed4a68e69e2b5c9b197b6d491d88e" kindref="member">CANS_PeriodicReceive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1af89a8da997248a0cd5900fb5f1d3d1d0" kindref="member">CANS_SetSignalData</ref>(<ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref><sp/>signal,<sp/>uint64_t<sp/>value,<sp/>uint8_t<sp/>*dataPtr);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1a55ae468a92bef75f84a27145f603eb72" kindref="member">CANS_GetSignalData</ref>(uint64_t<sp/>*dst,<sp/><ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref><sp/>signal,<sp/>uint8_t<sp/>*dataPtr);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1aa3c553a69a0c9228e72689f26125653c" kindref="member">CANS_ComposeMessage</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/><ref refid="cansignal__cfg_8h_1ae93daf397f977d7d1a364aabec0fc5c2" kindref="member">CANS_messagesTx_e</ref><sp/>msgIdx,<sp/>uint8_t<sp/>dataptr[]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1a91fb02ee3639cfb6e7791f83051ba261" kindref="member">CANS_ParseMessage</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/><ref refid="cansignal__cfg_8h_1a87850e24db2ea06885d1bb80a40a93f9" kindref="member">CANS_messagesRx_e</ref><sp/>msgIdx,<sp/>uint8_t<sp/>dataptr[]);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="cansignal_8c_1ad7dc2fc23723da5905c2a71247ff3f1c" kindref="member">CANS_CheckCanTiming</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1aacb4821468ac8968f70d0ce692105af4" kindref="member">CANS_SetCurrentSensorPresent</ref>(uint8_t<sp/>command);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1af00a202e9b366122c385701d513667f8" kindref="member">CANS_SetCurrentSensorCCPresent</ref>(uint8_t<sp/>command);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Function<sp/>Implementations<sp/>=============================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Public<sp/>functions<sp/>=====================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="cansignal_8h_1a5c4ee29efe0675c64a5a1680b0abcde9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1a5c4ee29efe0675c64a5a1680b0abcde9" kindref="member">CANS_Init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>custom<sp/>initialization<sp/>could<sp/>be<sp/>made<sp/>here.<sp/>right<sp/>now<sp/>no<sp/>need<sp/>for<sp/>any<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="cansignal_8h_1a71e4775d942e6f8392927858d08c2c15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1a71e4775d942e6f8392927858d08c2c15" kindref="member">CANS_MainFunction</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="cansignal_8c_1aee4ed4a68e69e2b5c9b197b6d491d88e" kindref="member">CANS_PeriodicReceive</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1ad7dc2fc23723da5905c2a71247ff3f1c" kindref="member">CANS_CheckCanTiming</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cans_state.<ref refid="structCANS__STATE__s_1a7db4ec6006576dc7a1d63c82802fbcb4" kindref="member">periodic_enable</ref><sp/>==<sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<ref refid="cansignal_8c_1a0f084eaaab6753114dc99ac3e3b6fe60" kindref="member">CANS_PeriodicTransmit</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="diag_8c_1a7970909aa22bb87427a96c694fbab0e4" kindref="member">DIAG_SysMonNotify</ref>(<ref refid="diag__cfg_8h_1ab8bcd0c1c3cbdf47eae14308b979a78fa845396d905a4e0f39ea2d7174ab1b69e" kindref="member">DIAG_SYSMON_CANS_ID</ref>,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>task<sp/>is<sp/>running,<sp/>state<sp/>=<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">/*==================<sp/>Static<sp/>functions<sp/>=====================================*/</highlight></codeline>
<codeline lineno="103" refid="cansignal_8c_1a0f084eaaab6753114dc99ac3e3b6fe60" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="cansignal_8c_1a0f084eaaab6753114dc99ac3e3b6fe60" kindref="member">CANS_PeriodicTransmit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>counter_ticks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>result<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="can__cfg_8c_1a57045378d523cac4ab2fd57935c6ff2a" kindref="member">can_CAN0_tx_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((counter_ticks<sp/>*<sp/><ref refid="group__CONFIG__CANSIGNAL_1ga9060669d55a55b34ebfb1228bc33ac66" kindref="member">CANS_TICK_MS</ref>)<sp/>%<sp/>(<ref refid="can__cfg_8c_1aabb961ce7a40e9712480c56be88f686b" kindref="member">can_CAN0_messages_tx</ref>[i].repetition_time))<sp/>==<sp/><ref refid="can__cfg_8c_1aabb961ce7a40e9712480c56be88f686b" kindref="member">can_CAN0_messages_tx</ref>[i].repetition_phase)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCanPdu" kindref="compound">Can_PduType</ref><sp/>PduToSend<sp/>=<sp/>{<sp/>{<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00<sp/>},<sp/>0x0,<sp/>8<sp/>};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1aa3c553a69a0c9228e72689f26125653c" kindref="member">CANS_ComposeMessage</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/>(<ref refid="cansignal__cfg_8h_1ae93daf397f977d7d1a364aabec0fc5c2" kindref="member">CANS_messagesTx_e</ref>)(i),<sp/>PduToSend.<ref refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" kindref="member">sdu</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PduToSend.<ref refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" kindref="member">id</ref><sp/>=<sp/><ref refid="can__cfg_8c_1aabb961ce7a40e9712480c56be88f686b" kindref="member">can_CAN0_messages_tx</ref>[i].<ref refid="structCAN__MSG__TX__TYPE__s_1ac97ba868bdf829c4661f65a000f11bdd" kindref="member">ID</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="can_8c_1ad7386c0b7048c957b8453b6492fb544f" kindref="member">CAN_Send</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/>PduToSend.<ref refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" kindref="member">id</ref>,<sp/>PduToSend.<ref refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" kindref="member">sdu</ref>,<sp/>PduToSend.<ref refid="structCanPdu_1a11b3ccf3bb1e8f402b99a471ea316b29" kindref="member">dlc</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a0266ed73d26538b4999bf50b3a1ec739" kindref="member">DIAG_CH_CANS_CAN_MOD_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>1,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a0266ed73d26538b4999bf50b3a1ec739" kindref="member">DIAG_CH_CANS_CAN_MOD_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" kindref="member">DIAG_EVENT_OK</ref>,<sp/>1,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="can__cfg_8c_1aabb961ce7a40e9712480c56be88f686b" kindref="member">can_CAN0_messages_tx</ref>[i].cbk_func<sp/>!=<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref><sp/>&amp;&amp;<sp/>result<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can__cfg_8c_1aabb961ce7a40e9712480c56be88f686b" kindref="member">can_CAN0_messages_tx</ref>[i].<ref refid="structCAN__MSG__TX__TYPE__s_1a96819389d64625a61b9c54c8bf9c4ac7" kindref="member">cbk_func</ref>(i,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="can__cfg_8c_1a97b1060f51dfffc2d68fb471ac5cf4ba" kindref="member">can_CAN1_tx_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((counter_ticks<sp/>*<sp/><ref refid="group__CONFIG__CANSIGNAL_1ga9060669d55a55b34ebfb1228bc33ac66" kindref="member">CANS_TICK_MS</ref>)<sp/>%<sp/>(<ref refid="can__cfg_8c_1ae1dc85e1c4c9889f29ba37e10c2111b9" kindref="member">can_CAN1_messages_tx</ref>[i].repetition_time))<sp/>==<sp/><ref refid="can__cfg_8c_1ae1dc85e1c4c9889f29ba37e10c2111b9" kindref="member">can_CAN1_messages_tx</ref>[i].repetition_phase)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCanPdu" kindref="compound">Can_PduType</ref><sp/>PduToSend<sp/>=<sp/>{<sp/>{<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00<sp/>},<sp/>0x0,<sp/>8<sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1aa3c553a69a0c9228e72689f26125653c" kindref="member">CANS_ComposeMessage</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/>(<ref refid="cansignal__cfg_8h_1ae93daf397f977d7d1a364aabec0fc5c2" kindref="member">CANS_messagesTx_e</ref>)i<sp/>+<sp/>can_CAN0_tx_length,<sp/>PduToSend.<ref refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" kindref="member">sdu</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PduToSend.<ref refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" kindref="member">id</ref><sp/>=<sp/><ref refid="can__cfg_8c_1ae1dc85e1c4c9889f29ba37e10c2111b9" kindref="member">can_CAN1_messages_tx</ref>[i].<ref refid="structCAN__MSG__TX__TYPE__s_1ac97ba868bdf829c4661f65a000f11bdd" kindref="member">ID</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="can_8c_1ad7386c0b7048c957b8453b6492fb544f" kindref="member">CAN_Send</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/>PduToSend.<ref refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" kindref="member">id</ref>,<sp/>PduToSend.<ref refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" kindref="member">sdu</ref>,<sp/>PduToSend.<ref refid="structCanPdu_1a11b3ccf3bb1e8f402b99a471ea316b29" kindref="member">dlc</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a0266ed73d26538b4999bf50b3a1ec739" kindref="member">DIAG_CH_CANS_CAN_MOD_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a0266ed73d26538b4999bf50b3a1ec739" kindref="member">DIAG_CH_CANS_CAN_MOD_FAILURE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" kindref="member">DIAG_EVENT_OK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="can__cfg_8c_1ae1dc85e1c4c9889f29ba37e10c2111b9" kindref="member">can_CAN1_messages_tx</ref>[i].cbk_func<sp/>!=<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref><sp/>&amp;&amp;<sp/>result<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="can__cfg_8c_1ae1dc85e1c4c9889f29ba37e10c2111b9" kindref="member">can_CAN1_messages_tx</ref>[i].<ref refid="structCAN__MSG__TX__TYPE__s_1a96819389d64625a61b9c54c8bf9c4ac7" kindref="member">cbk_func</ref>(i,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>counter_ticks++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="cansignal_8c_1aee4ed4a68e69e2b5c9b197b6d491d88e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/><ref refid="cansignal_8c_1aee4ed4a68e69e2b5c9b197b6d491d88e" kindref="member">CANS_PeriodicReceive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCanPdu" kindref="compound">Can_PduType</ref><sp/>msg<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398" kindref="member">STD_RETURN_TYPE_e</ref><sp/>result_node0<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>,<sp/>result_node1<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398a15b95ea81a76501d167f9beca795cb0e" kindref="member">E_NOT_OK</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE0<sp/>==<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="can_8c_1a043869ff22e53aac90ce0895bdf60ff6" kindref="member">CAN_ReceiveBuffer</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/>&amp;msg)<sp/><sp/>==<sp/><sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" kindref="member">can_CAN0_rx_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.<ref refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" kindref="member">id</ref><sp/><sp/>==<sp/><sp/><ref refid="can__cfg_8c_1a2f16b0fa6559c13341790a11c411eaf5" kindref="member">can0_RxMsgs</ref>[i].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref>)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1a91fb02ee3639cfb6e7791f83051ba261" kindref="member">CANS_ParseMessage</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>,<sp/>(<ref refid="cansignal__cfg_8h_1a87850e24db2ea06885d1bb80a40a93f9" kindref="member">CANS_messagesRx_e</ref>)i,<sp/>msg.<ref refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" kindref="member">sdu</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_node0<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>result_node0<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CAN_USE_CAN_NODE1<sp/>==<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="can_8c_1a043869ff22e53aac90ce0895bdf60ff6" kindref="member">CAN_ReceiveBuffer</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/>&amp;msg)<sp/>==<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="can__cfg_8c_1a9cee6bfc5d40def47caa0ef9ba42974d" kindref="member">can_CAN1_rx_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.<ref refid="structCanPdu_1ab63a04613a09801d1babf73861fb1b26" kindref="member">id</ref><sp/>==<sp/><ref refid="can__cfg_8c_1a80ac2d641e28ef88a858bacbcc0262fb" kindref="member">can1_RxMsgs</ref>[i].<ref refid="structCAN__MSG__RX__TYPE_1a939a1206054bdb9c185591ebf5e01693" kindref="member">ID</ref>)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1a91fb02ee3639cfb6e7791f83051ba261" kindref="member">CANS_ParseMessage</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>,<sp/>(<ref refid="cansignal__cfg_8h_1a87850e24db2ea06885d1bb80a40a93f9" kindref="member">CANS_messagesRx_e</ref>)i<sp/>+<sp/><ref refid="can__cfg_8c_1a5f03735b09f5dbc7411f98ba6e333256" kindref="member">can_CAN0_rx_length</ref>,<sp/>msg.<ref refid="structCanPdu_1a48b318e9c9d489d854840700cb92d177" kindref="member">sdu</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_node1<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>result_node1<sp/>=<sp/><ref refid="std__types_8h_1a15c0d7d047c476ea033586165d49d398ab7f63f013a1b30e2bba00534c6f0477c" kindref="member">E_OK</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_node0<sp/>&amp;&amp;<sp/>result_node1;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207" refid="cansignal_8c_1a7d95cbf333bab22f926b97262b20a283" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="cansignal_8c_1a7d95cbf333bab22f926b97262b20a283" kindref="member">CANS_GetBitmask</ref>(uint8_t<sp/>bitlength)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>bitmask<sp/>=<sp/>0x00000000;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bitlength;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitmask<sp/>=<sp/>bitmask<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitmask<sp/>=<sp/>bitmask<sp/>|<sp/>0x00000001;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitmask;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="cansignal_8c_1a55ae468a92bef75f84a27145f603eb72" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1a55ae468a92bef75f84a27145f603eb72" kindref="member">CANS_GetSignalData</ref>(uint64_t<sp/>*dst,<sp/><ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref><sp/>signal,<sp/>uint8_t<sp/>*dataPtr)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bitposition<sp/>=<sp/>signal.<ref refid="structCANS__signal__s_1a89169c8eea6dd1f792b828b19974d4e0" kindref="member">bit_position</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bitlength<sp/>=<sp/>(uint8_t)signal.<ref refid="structCANS__signal__s_1a8d3a2074ed029b0ffaea5ba1e10bfa04" kindref="member">bit_length</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>bitmask<sp/>=<sp/>0x00000000;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>*dataPtr64<sp/>=<sp/>(uint64_t<sp/>*)dataPtr;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmask<sp/>=<sp/><ref refid="cansignal_8c_1a7d95cbf333bab22f926b97262b20a283" kindref="member">CANS_GetBitmask</ref>(bitlength);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>*dst<sp/>=<sp/>(((*dataPtr64)<sp/>&gt;&gt;<sp/>bitposition)<sp/>&amp;<sp/>bitmask);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*dst<sp/>=<sp/>signal.factor*(float)(((*dataPtr64)<sp/>&gt;&gt;<sp/>bitposition)<sp/>&amp;<sp/>bitmask)<sp/>+<sp/>signal.offset;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*dst<sp/>&gt;<sp/>signal.<ref refid="structCANS__signal__s_1a9f7b03efc15a30bcb67e83898526a2e7" kindref="member">max</ref>)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a3344d3250665d8f27247202c839a9eb5" kindref="member">DIAG_CH_CANS_MAX_VALUE_VIOLATE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a3344d3250665d8f27247202c839a9eb5" kindref="member">DIAG_CH_CANS_MAX_VALUE_VIOLATE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" kindref="member">DIAG_EVENT_OK</ref>,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*dst<sp/>&lt;<sp/>signal.<ref refid="structCANS__signal__s_1aa64f65fb663c8a05d56d8be16fd05697" kindref="member">min</ref>)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1ae516e16008bfd1f42f080216cbc822a4" kindref="member">DIAG_CH_CANS_MIN_VALUE_VIOLATE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1ae516e16008bfd1f42f080216cbc822a4" kindref="member">DIAG_CH_CANS_MIN_VALUE_VIOLATE</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" kindref="member">DIAG_EVENT_OK</ref>,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251" refid="cansignal_8c_1af89a8da997248a0cd5900fb5f1d3d1d0" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1af89a8da997248a0cd5900fb5f1d3d1d0" kindref="member">CANS_SetSignalData</ref>(<ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref><sp/>signal,<sp/>uint64_t<sp/>value,<sp/>uint8_t<sp/>*dataPtr)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bitposition<sp/>=<sp/>signal.<ref refid="structCANS__signal__s_1a89169c8eea6dd1f792b828b19974d4e0" kindref="member">bit_position</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>bitlength<sp/>=<sp/>(uint8_t)signal.<ref refid="structCANS__signal__s_1a8d3a2074ed029b0ffaea5ba1e10bfa04" kindref="member">bit_length</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>bitmask<sp/>=<sp/>0x0000000000000000;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>*dataPtr64<sp/>=<sp/>(uint64_t<sp/>*)dataPtr;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmask<sp/>=<sp/><ref refid="cansignal_8c_1a7d95cbf333bab22f926b97262b20a283" kindref="member">CANS_GetBitmask</ref>(bitlength);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>dataPtr64[0]<sp/>&amp;=<sp/>~(((uint64_t)bitmask)<sp/>&lt;&lt;<sp/>bitposition);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>dataPtr64[0]<sp/>|=<sp/>((((uint64_t)value)<sp/>&amp;<sp/>bitmask)<sp/>&lt;&lt;<sp/>bitposition);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="cansignal_8c_1aa3c553a69a0c9228e72689f26125653c" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1aa3c553a69a0c9228e72689f26125653c" kindref="member">CANS_ComposeMessage</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/><ref refid="cansignal__cfg_8h_1ae93daf397f977d7d1a364aabec0fc5c2" kindref="member">CANS_messagesTx_e</ref><sp/>msgIdx,<sp/>uint8_t<sp/>dataptr[])<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nrTxSignals<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>multiplexor<sp/>if<sp/>multiplexed<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref><sp/>*cans_signals_tx;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/>==<sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_signals_tx<sp/>=<sp/>(<ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref><sp/>*)&amp;<ref refid="cansignal__cfg_8c_1a00b5c5f6e2c4347b7898ae4cd8946670" kindref="member">cans_CAN0_signals_tx</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrTxSignals<sp/>=<sp/><ref refid="cansignal__cfg_8c_1a76a2b16912c01559b1281c463d4d7a0f" kindref="member">cans_CAN0_signals_tx_length</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/>==<sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_signals_tx<sp/>=<sp/>(<ref refid="structCANS__signal__s" kindref="compound">CANS_signal_s</ref><sp/>*)&amp;<ref refid="cansignal__cfg_8c_1a7441a668581186628ab12dd0ebdd0f7c" kindref="member">cans_CAN1_signals_tx</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrTxSignals<sp/>=<sp/><ref refid="cansignal__cfg_8c_1a1425407d1b20511625b6cd6b340ebd57" kindref="member">cans_CAN1_signals_tx_length</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nrTxSignals;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cans_signals_tx[i].msgIdx.Tx<sp/>==<sp/>msgIdx)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simple,<sp/>not<sp/>multiplexed<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cans_signals_tx[i].getter<sp/>!=<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_signals_tx[i].<ref refid="structCANS__signal__s_1ab8901c9d328e1d934dde0d7b6760e308" kindref="member">getter</ref>(i,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1af89a8da997248a0cd5900fb5f1d3d1d0" kindref="member">CANS_SetSignalData</ref>(cans_signals_tx[i],<sp/>value,<sp/>dataptr);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308" refid="cansignal_8c_1a91fb02ee3639cfb6e7791f83051ba261" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1a91fb02ee3639cfb6e7791f83051ba261" kindref="member">CANS_ParseMessage</ref>(<ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63" kindref="member">CAN_NodeTypeDef_e</ref><sp/>canNode,<sp/><ref refid="cansignal__cfg_8h_1a87850e24db2ea06885d1bb80a40a93f9" kindref="member">CANS_messagesRx_e</ref><sp/>msgIdx,<sp/>uint8_t<sp/>dataptr[])<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/>==<sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63af7bc162482d27661c97627000ba67e20" kindref="member">CAN_NODE0</ref>)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="cansignal__cfg_8c_1a09fad45966212a86c0470b1608275b42" kindref="member">cans_CAN0_signals_rx_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>CAN0<sp/>rx<sp/>signals<sp/>and<sp/>find<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cansignal__cfg_8c_1aab49b0b2fd3ee38354c5d64f75416425" kindref="member">cans_CAN0_signals_rx</ref>[i].msgIdx.Rx<sp/><sp/>==<sp/><sp/>msgIdx)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1a55ae468a92bef75f84a27145f603eb72" kindref="member">CANS_GetSignalData</ref>(&amp;value,<sp/><ref refid="cansignal__cfg_8c_1aab49b0b2fd3ee38354c5d64f75416425" kindref="member">cans_CAN0_signals_rx</ref>[i],<sp/>dataptr);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cansignal__cfg_8c_1aab49b0b2fd3ee38354c5d64f75416425" kindref="member">cans_CAN0_signals_rx</ref>[i].setter<sp/>!=<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal__cfg_8c_1aab49b0b2fd3ee38354c5d64f75416425" kindref="member">cans_CAN0_signals_rx</ref>[i].<ref refid="structCANS__signal__s_1a6f6cfe20670b728efee60498bf51e321" kindref="member">setter</ref>(i,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canNode<sp/>==<sp/><ref refid="can_8h_1ac88c60b085cc1aaf0589a38ea2f62e63abc0d575858a83648dda892612d224388" kindref="member">CAN_NODE1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="cansignal__cfg_8c_1a14f12d8fd481484941df1876cbd63c64" kindref="member">cans_CAN1_signals_rx_length</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>over<sp/>CAN1<sp/>rx<sp/>signals<sp/>and<sp/>find<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cansignal__cfg_8c_1a6a25a471299bc5e3290e06a8f79989e7" kindref="member">cans_CAN1_signals_rx</ref>[i].msgIdx.Rx<sp/><sp/>==<sp/><sp/>msgIdx)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1a55ae468a92bef75f84a27145f603eb72" kindref="member">CANS_GetSignalData</ref>(&amp;value,<sp/><ref refid="cansignal__cfg_8c_1a6a25a471299bc5e3290e06a8f79989e7" kindref="member">cans_CAN1_signals_rx</ref>[i],<sp/>dataptr);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="cansignal__cfg_8c_1a6a25a471299bc5e3290e06a8f79989e7" kindref="member">cans_CAN1_signals_rx</ref>[i].setter<sp/>!=<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal__cfg_8c_1a6a25a471299bc5e3290e06a8f79989e7" kindref="member">cans_CAN1_signals_rx</ref>[i].<ref refid="structCANS__signal__s_1a6f6cfe20670b728efee60498bf51e321" kindref="member">setter</ref>(<ref refid="cansignal__cfg_8c_1a09fad45966212a86c0470b1608275b42" kindref="member">cans_CAN0_signals_rx_length</ref><sp/>+<sp/>i,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="cansignal_8c_1ad7dc2fc23723da5905c2a71247ff3f1c" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="cansignal_8c_1ad7dc2fc23723da5905c2a71247ff3f1c" kindref="member">CANS_CheckCanTiming</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>current_time;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDATA__BLOCK__SYSTEMSTATE__s" kindref="compound">DATA_BLOCK_SYSTEMSTATE_s</ref><sp/>error_flags;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structDATA__BLOCK__CURRENT__s" kindref="compound">DATA_BLOCK_CURRENT_s</ref><sp/>current_tab;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>current_time<sp/>=<sp/><ref refid="mcu_8c_1a09e5f493b1f3dc15a07b7b72ad69cede" kindref="member">MCU_GetTimeStamp</ref>();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="database_8c_1ace052ca2c5098dcade967992ecebc8bf" kindref="member">DATA_GetTable</ref>(&amp;canstatereq_tab,<sp/><ref refid="database__cfg_8h_1a0b445280174407a1a20ae8a173aeb6b9" kindref="member">DATA_BLOCK_ID_STATEREQUEST</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="database_8c_1ace052ca2c5098dcade967992ecebc8bf" kindref="member">DATA_GetTable</ref>(&amp;error_flags,<sp/><ref refid="database__cfg_8h_1a3692160bb5c67925e83710d276f461e0" kindref="member">DATA_BLOCK_ID_SYSTEMSTATE</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>BMS<sp/>still<sp/>getting<sp/>CAN<sp/>messages?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((current_time-canstatereq_tab.<ref refid="structDATA__BLOCK__STATEREQUEST__s_1ab503dd29a7cfaa03042b2acaeab1d5f7" kindref="member">timestamp</ref>)<sp/>&lt;=<sp/>105)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((canstatereq_tab.<ref refid="structDATA__BLOCK__STATEREQUEST__s_1ab503dd29a7cfaa03042b2acaeab1d5f7" kindref="member">timestamp</ref><sp/>-<sp/>canstatereq_tab.<ref refid="structDATA__BLOCK__STATEREQUEST__s_1afe4115eefe4358fc967e26121d70995a" kindref="member">previous_timestamp</ref>)<sp/>&gt;=<sp/>95)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((canstatereq_tab.<ref refid="structDATA__BLOCK__STATEREQUEST__s_1ab503dd29a7cfaa03042b2acaeab1d5f7" kindref="member">timestamp</ref><sp/>-<sp/>canstatereq_tab.<ref refid="structDATA__BLOCK__STATEREQUEST__s_1afe4115eefe4358fc967e26121d70995a" kindref="member">previous_timestamp</ref>)<sp/>&lt;=<sp/>105))<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a71cdf76a7750aa26e7b67cbfd2615e67" kindref="member">DIAG_CH_CAN_TIMING</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" kindref="member">DIAG_EVENT_OK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a71cdf76a7750aa26e7b67cbfd2615e67" kindref="member">DIAG_CH_CAN_TIMING</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a71cdf76a7750aa26e7b67cbfd2615e67" kindref="member">DIAG_CH_CAN_TIMING</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>time<sp/>stamps<sp/>of<sp/>current<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="database_8c_1ace052ca2c5098dcade967992ecebc8bf" kindref="member">DATA_GetTable</ref>(&amp;current_tab,<sp/><ref refid="database__cfg_8h_1a8f42993f5e17a2d234df914e08d9e3a9" kindref="member">DATA_BLOCK_ID_CURRENT</ref>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_time-current_tab.<ref refid="structDATA__BLOCK__CURRENT__s_1ac93da9c37d00d7942aeaa4b4473a6431" kindref="member">timestamp</ref><sp/>&gt;<sp/><ref refid="cansignal__cfg_8h_1a47ab8f56379070261ca015aaa0dd334d" kindref="member">CANS_SENSOR_RESPONSE_TIMEOUT_MS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a8da7a136ff2c0fac2db6f85b2fa26319" kindref="member">DIAG_CH_CURRENT_SENSOR_RESPONDING</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1a8da7a136ff2c0fac2db6f85b2fa26319" kindref="member">DIAG_CH_CURRENT_SENSOR_RESPONDING</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" kindref="member">DIAG_EVENT_OK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cans_state.<ref refid="structCANS__STATE__s_1a15f08f9047985a761cc09ec005e73b4c" kindref="member">current_sensor_present</ref><sp/>==<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1aacb4821468ac8968f70d0ce692105af4" kindref="member">CANS_SetCurrentSensorPresent</ref>(<ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>time<sp/>stamps<sp/>of<sp/>CC<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error_flags.<ref refid="structDATA__BLOCK__SYSTEMSTATE__s_1ad54e397711ca8f7fa0162e8294ad8899" kindref="member">can_cc_used</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_time-current_tab.<ref refid="structDATA__BLOCK__CURRENT__s_1a0e273c20b7cc95e1b982f817067ab6be" kindref="member">timestamp_cc</ref><sp/>&gt;<sp/><ref refid="cansignal__cfg_8h_1a47ab8f56379070261ca015aaa0dd334d" kindref="member">CANS_SENSOR_RESPONSE_TIMEOUT_MS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd788c9e93973bd1cbac3f8bdba3e0dc" kindref="member">DIAG_CH_CAN_CC_RESPONDING</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868a5d181c9c635e48349f8b78ed23749482" kindref="member">DIAG_EVENT_NOK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__API__DIAG_1gaf3e14f837ad6b7df26392f0164a8a0bd" kindref="member">DIAG_Handler</ref>(<ref refid="diag__cfg_8h_1acd788c9e93973bd1cbac3f8bdba3e0dc" kindref="member">DIAG_CH_CAN_CC_RESPONDING</ref>,<sp/><ref refid="diag__id__cfg_8h_1a1cf4ebb501b8762842208748e9f44868af6dc8eb4f6ae8e000e83ec9486007807" kindref="member">DIAG_EVENT_OK</ref>,<sp/>0,<sp/><ref refid="std__types_8h_1a530f11a96e508d171d28564c8dc20942" kindref="member">NULL_PTR</ref>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cans_state.<ref refid="structCANS__STATE__s_1a68d948a0280d50227217d7164ffa4bab" kindref="member">current_sensor_cc_present</ref><sp/>==<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cansignal_8c_1af00a202e9b366122c385701d513667f8" kindref="member">CANS_SetCurrentSensorCCPresent</ref>(<ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DATA_StoreDataBlock(&amp;error_flags,<sp/>DATA_BLOCK_ID_ERRORFLAGS);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="cansignal_8h_1a28c789e881eaa97bf87a0b4e51f40423" refkind="member"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1a28c789e881eaa97bf87a0b4e51f40423" kindref="member">CANS_Enable_Periodic</ref>(uint8_t<sp/>command)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>==<sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskENTER_CRITICAL();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_state.<ref refid="structCANS__STATE__s_1a7db4ec6006576dc7a1d63c82802fbcb4" kindref="member">periodic_enable</ref><sp/>=<sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskENTER_CRITICAL();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_state.<ref refid="structCANS__STATE__s_1a7db4ec6006576dc7a1d63c82802fbcb4" kindref="member">periodic_enable</ref><sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="cansignal_8c_1aacb4821468ac8968f70d0ce692105af4" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1aacb4821468ac8968f70d0ce692105af4" kindref="member">CANS_SetCurrentSensorPresent</ref>(uint8_t<sp/>command)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>==<sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskENTER_CRITICAL();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_state.<ref refid="structCANS__STATE__s_1a15f08f9047985a761cc09ec005e73b4c" kindref="member">current_sensor_present</ref><sp/>=<sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskENTER_CRITICAL();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_state.<ref refid="structCANS__STATE__s_1a15f08f9047985a761cc09ec005e73b4c" kindref="member">current_sensor_present</ref><sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="cansignal_8c_1af00a202e9b366122c385701d513667f8" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cansignal_8c_1af00a202e9b366122c385701d513667f8" kindref="member">CANS_SetCurrentSensorCCPresent</ref>(uint8_t<sp/>command)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command<sp/>==<sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskENTER_CRITICAL();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_state.<ref refid="structCANS__STATE__s_1a68d948a0280d50227217d7164ffa4bab" kindref="member">current_sensor_cc_present</ref><sp/>=<sp/><ref refid="std__types_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskENTER_CRITICAL();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cans_state.<ref refid="structCANS__STATE__s_1a68d948a0280d50227217d7164ffa4bab" kindref="member">current_sensor_cc_present</ref><sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskEXIT_CRITICAL();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="cansignal_8h_1a94e479f449b20c73b65d165cdae1d482" refkind="member"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="cansignal_8c_1a94e479f449b20c73b65d165cdae1d482" kindref="member">CANS_IsCurrentSensorPresent</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>retval<sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/><sp/><sp/><sp/>=<sp/>cans_state.<ref refid="structCANS__STATE__s_1a15f08f9047985a761cc09ec005e73b4c" kindref="member">current_sensor_present</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(retval);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="cansignal_8h_1ac4c69a3c7d81c33764178e49e55b327a" refkind="member"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="cansignal_8c_1ac4c69a3c7d81c33764178e49e55b327a" kindref="member">CANS_IsCurrentSensorCCPresent</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>retval<sp/>=<sp/><ref refid="std__types_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/><sp/><sp/><sp/>=<sp/>cans_state.<ref refid="structCANS__STATE__s_1a68d948a0280d50227217d7164ffa4bab" kindref="member">current_sensor_cc_present</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(retval);</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/itri/foxBMS/src/foxBMS-setup/embedded-software/mcu-common/src/module/cansignal/cansignal.c"/>
  </compounddef>
</doxygen>
